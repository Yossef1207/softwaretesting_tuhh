# DO NOT EDIT THIS FILE!
#
# This file is generated from the CDP specification. If you need to make
# changes, edit the generator and regenerate all modules.
#
# CDP version: v0.0.1438564

from __future__ import annotations

from typing import TYPE_CHECKING, Any


if TYPE_CHECKING:
    from typing_extensions import TypeAlias


T_JSON_DICT: TypeAlias = "dict[str, Any]"
_event_parsers = {}
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):
    """Forward call to original or mutated function, depending on the environment"""
    import os
    mutant_under_test = os.environ['MUTANT_UNDER_TEST']
    if mutant_under_test == 'fail':
        from mutmut.__main__ import MutmutProgrammaticFailException
        raise MutmutProgrammaticFailException('Failed programmatically')      
    elif mutant_under_test == 'stats':
        from mutmut.__main__ import record_trampoline_hit
        record_trampoline_hit(orig.__module__ + '.' + orig.__name__)
        result = orig(*call_args, **call_kwargs)
        return result  # for the yield case
    prefix = orig.__module__ + '.' + orig.__name__ + '__mutmut_'
    if not mutant_under_test.startswith(prefix):
        result = orig(*call_args, **call_kwargs)
        return result  # for the yield case
    mutant_name = mutant_under_test.rpartition('.')[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = mutants[mutant_name](*call_args, **call_kwargs)
    return result
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_yield_from_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):
    """Forward call to original or mutated function, depending on the environment"""
    import os
    mutant_under_test = os.environ['MUTANT_UNDER_TEST']
    if mutant_under_test == 'fail':
        from mutmut.__main__ import MutmutProgrammaticFailException
        raise MutmutProgrammaticFailException('Failed programmatically')      
    elif mutant_under_test == 'stats':
        from mutmut.__main__ import record_trampoline_hit
        record_trampoline_hit(orig.__module__ + '.' + orig.__name__)
        result = yield from orig(*call_args, **call_kwargs)
        return result  # for the yield case
    prefix = orig.__module__ + '.' + orig.__name__ + '__mutmut_'
    if not mutant_under_test.startswith(prefix):
        result = yield from orig(*call_args, **call_kwargs)
        return result  # for the yield case
    mutant_name = mutant_under_test.rpartition('.')[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = yield from mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = yield from mutants[mutant_name](*call_args, **call_kwargs)
    return result


def x_event_class__mutmut_orig(method):
    """A decorator that registers a class as an event class."""

    def decorate(cls):
        _event_parsers[method] = cls
        return cls

    return decorate


def x_event_class__mutmut_1(method):
    """A decorator that registers a class as an event class."""

    def decorate(cls):
        _event_parsers[method] = None
        return cls

    return decorate

x_event_class__mutmut_mutants : ClassVar[MutantDict] = {
'x_event_class__mutmut_1': x_event_class__mutmut_1
}

def event_class(*args, **kwargs):
    result = _mutmut_trampoline(x_event_class__mutmut_orig, x_event_class__mutmut_mutants, args, kwargs)
    return result 

event_class.__signature__ = _mutmut_signature(x_event_class__mutmut_orig)
x_event_class__mutmut_orig.__name__ = 'x_event_class'


def x_parse_json_event__mutmut_orig(json: T_JSON_DICT) -> Any:
    """Parse a JSON dictionary into a CDP event."""
    return _event_parsers[json["method"]].from_json(json["params"])


def x_parse_json_event__mutmut_1(json: T_JSON_DICT) -> Any:
    """Parse a JSON dictionary into a CDP event."""
    return _event_parsers[json["method"]].from_json(None)


def x_parse_json_event__mutmut_2(json: T_JSON_DICT) -> Any:
    """Parse a JSON dictionary into a CDP event."""
    return _event_parsers[json["XXmethodXX"]].from_json(json["params"])


def x_parse_json_event__mutmut_3(json: T_JSON_DICT) -> Any:
    """Parse a JSON dictionary into a CDP event."""
    return _event_parsers[json["METHOD"]].from_json(json["params"])


def x_parse_json_event__mutmut_4(json: T_JSON_DICT) -> Any:
    """Parse a JSON dictionary into a CDP event."""
    return _event_parsers[json["Method"]].from_json(json["params"])


def x_parse_json_event__mutmut_5(json: T_JSON_DICT) -> Any:
    """Parse a JSON dictionary into a CDP event."""
    return _event_parsers[json["method"]].from_json(json["XXparamsXX"])


def x_parse_json_event__mutmut_6(json: T_JSON_DICT) -> Any:
    """Parse a JSON dictionary into a CDP event."""
    return _event_parsers[json["method"]].from_json(json["PARAMS"])


def x_parse_json_event__mutmut_7(json: T_JSON_DICT) -> Any:
    """Parse a JSON dictionary into a CDP event."""
    return _event_parsers[json["method"]].from_json(json["Params"])

x_parse_json_event__mutmut_mutants : ClassVar[MutantDict] = {
'x_parse_json_event__mutmut_1': x_parse_json_event__mutmut_1, 
    'x_parse_json_event__mutmut_2': x_parse_json_event__mutmut_2, 
    'x_parse_json_event__mutmut_3': x_parse_json_event__mutmut_3, 
    'x_parse_json_event__mutmut_4': x_parse_json_event__mutmut_4, 
    'x_parse_json_event__mutmut_5': x_parse_json_event__mutmut_5, 
    'x_parse_json_event__mutmut_6': x_parse_json_event__mutmut_6, 
    'x_parse_json_event__mutmut_7': x_parse_json_event__mutmut_7
}

def parse_json_event(*args, **kwargs):
    result = _mutmut_trampoline(x_parse_json_event__mutmut_orig, x_parse_json_event__mutmut_mutants, args, kwargs)
    return result 

parse_json_event.__signature__ = _mutmut_signature(x_parse_json_event__mutmut_orig)
x_parse_json_event__mutmut_orig.__name__ = 'x_parse_json_event'
