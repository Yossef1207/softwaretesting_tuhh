# DO NOT EDIT THIS FILE!
#
# This file is generated from the CDP specification. If you need to make
# changes, edit the generator and regenerate all modules.
#
# CDP version: v0.0.1438564
# CDP domain: Browser

from __future__ import annotations

import enum
from collections.abc import Generator
from dataclasses import dataclass
from typing import Any

import streamlink.webbrowser.cdp.devtools.page as page
import streamlink.webbrowser.cdp.devtools.target as target
from streamlink.webbrowser.cdp.devtools.util import T_JSON_DICT, event_class
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):
    """Forward call to original or mutated function, depending on the environment"""
    import os
    mutant_under_test = os.environ['MUTANT_UNDER_TEST']
    if mutant_under_test == 'fail':
        from mutmut.__main__ import MutmutProgrammaticFailException
        raise MutmutProgrammaticFailException('Failed programmatically')      
    elif mutant_under_test == 'stats':
        from mutmut.__main__ import record_trampoline_hit
        record_trampoline_hit(orig.__module__ + '.' + orig.__name__)
        result = orig(*call_args, **call_kwargs)
        return result  # for the yield case
    prefix = orig.__module__ + '.' + orig.__name__ + '__mutmut_'
    if not mutant_under_test.startswith(prefix):
        result = orig(*call_args, **call_kwargs)
        return result  # for the yield case
    mutant_name = mutant_under_test.rpartition('.')[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = mutants[mutant_name](*call_args, **call_kwargs)
    return result
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_yield_from_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):
    """Forward call to original or mutated function, depending on the environment"""
    import os
    mutant_under_test = os.environ['MUTANT_UNDER_TEST']
    if mutant_under_test == 'fail':
        from mutmut.__main__ import MutmutProgrammaticFailException
        raise MutmutProgrammaticFailException('Failed programmatically')      
    elif mutant_under_test == 'stats':
        from mutmut.__main__ import record_trampoline_hit
        record_trampoline_hit(orig.__module__ + '.' + orig.__name__)
        result = yield from orig(*call_args, **call_kwargs)
        return result  # for the yield case
    prefix = orig.__module__ + '.' + orig.__name__ + '__mutmut_'
    if not mutant_under_test.startswith(prefix):
        result = yield from orig(*call_args, **call_kwargs)
        return result  # for the yield case
    mutant_name = mutant_under_test.rpartition('.')[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = yield from mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = yield from mutants[mutant_name](*call_args, **call_kwargs)
    return result


class BrowserContextID(str):
    def to_json(self) -> str:
        return self

    @classmethod
    def from_json(cls, json: str) -> BrowserContextID:
        return cls(json)

    def __repr__(self):
        return f"BrowserContextID({super().__repr__()})"


class WindowID(int):
    def to_json(self) -> int:
        return self

    @classmethod
    def from_json(cls, json: int) -> WindowID:
        return cls(json)

    def __repr__(self):
        return f"WindowID({super().__repr__()})"


class WindowState(enum.Enum):
    """
    The state of the browser window.
    """
    NORMAL = "normal"
    MINIMIZED = "minimized"
    MAXIMIZED = "maximized"
    FULLSCREEN = "fullscreen"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> WindowState:
        return cls(json)


@dataclass
class Bounds:
    """
    Browser window bounds information
    """
    #: The offset from the left edge of the screen to the window in pixels.
    left: int | None = None

    #: The offset from the top edge of the screen to the window in pixels.
    top: int | None = None

    #: The window width in pixels.
    width: int | None = None

    #: The window height in pixels.
    height: int | None = None

    #: The window state. Default to normal.
    window_state: WindowState | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        if self.left is not None:
            json["left"] = self.left
        if self.top is not None:
            json["top"] = self.top
        if self.width is not None:
            json["width"] = self.width
        if self.height is not None:
            json["height"] = self.height
        if self.window_state is not None:
            json["windowState"] = self.window_state.to_json()
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Bounds:
        return cls(
            left=int(json["left"]) if "left" in json else None,
            top=int(json["top"]) if "top" in json else None,
            width=int(json["width"]) if "width" in json else None,
            height=int(json["height"]) if "height" in json else None,
            window_state=WindowState.from_json(json["windowState"]) if "windowState" in json else None,
        )


class PermissionType(enum.Enum):
    AR = "ar"
    AUDIO_CAPTURE = "audioCapture"
    AUTOMATIC_FULLSCREEN = "automaticFullscreen"
    BACKGROUND_FETCH = "backgroundFetch"
    BACKGROUND_SYNC = "backgroundSync"
    CAMERA_PAN_TILT_ZOOM = "cameraPanTiltZoom"
    CAPTURED_SURFACE_CONTROL = "capturedSurfaceControl"
    CLIPBOARD_READ_WRITE = "clipboardReadWrite"
    CLIPBOARD_SANITIZED_WRITE = "clipboardSanitizedWrite"
    DISPLAY_CAPTURE = "displayCapture"
    DURABLE_STORAGE = "durableStorage"
    GEOLOCATION = "geolocation"
    HAND_TRACKING = "handTracking"
    IDLE_DETECTION = "idleDetection"
    KEYBOARD_LOCK = "keyboardLock"
    LOCAL_FONTS = "localFonts"
    LOCAL_NETWORK_ACCESS = "localNetworkAccess"
    MIDI = "midi"
    MIDI_SYSEX = "midiSysex"
    NFC = "nfc"
    NOTIFICATIONS = "notifications"
    PAYMENT_HANDLER = "paymentHandler"
    PERIODIC_BACKGROUND_SYNC = "periodicBackgroundSync"
    POINTER_LOCK = "pointerLock"
    PROTECTED_MEDIA_IDENTIFIER = "protectedMediaIdentifier"
    SENSORS = "sensors"
    SMART_CARD = "smartCard"
    SPEAKER_SELECTION = "speakerSelection"
    STORAGE_ACCESS = "storageAccess"
    TOP_LEVEL_STORAGE_ACCESS = "topLevelStorageAccess"
    VIDEO_CAPTURE = "videoCapture"
    VR = "vr"
    WAKE_LOCK_SCREEN = "wakeLockScreen"
    WAKE_LOCK_SYSTEM = "wakeLockSystem"
    WEB_APP_INSTALLATION = "webAppInstallation"
    WEB_PRINTING = "webPrinting"
    WINDOW_MANAGEMENT = "windowManagement"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> PermissionType:
        return cls(json)


class PermissionSetting(enum.Enum):
    GRANTED = "granted"
    DENIED = "denied"
    PROMPT = "prompt"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> PermissionSetting:
        return cls(json)


@dataclass
class PermissionDescriptor:
    """
    Definition of PermissionDescriptor defined in the Permissions API:
    https://w3c.github.io/permissions/#dom-permissiondescriptor.
    """
    #: Name of permission.
    #: See https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl for valid permission names.
    name: str

    #: For "midi" permission, may also specify sysex control.
    sysex: bool | None = None

    #: For "push" permission, may specify userVisibleOnly.
    #: Note that userVisibleOnly = true is the only currently supported type.
    user_visible_only: bool | None = None

    #: For "clipboard" permission, may specify allowWithoutSanitization.
    allow_without_sanitization: bool | None = None

    #: For "fullscreen" permission, must specify allowWithoutGesture:true.
    allow_without_gesture: bool | None = None

    #: For "camera" permission, may specify panTiltZoom.
    pan_tilt_zoom: bool | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["name"] = self.name
        if self.sysex is not None:
            json["sysex"] = self.sysex
        if self.user_visible_only is not None:
            json["userVisibleOnly"] = self.user_visible_only
        if self.allow_without_sanitization is not None:
            json["allowWithoutSanitization"] = self.allow_without_sanitization
        if self.allow_without_gesture is not None:
            json["allowWithoutGesture"] = self.allow_without_gesture
        if self.pan_tilt_zoom is not None:
            json["panTiltZoom"] = self.pan_tilt_zoom
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PermissionDescriptor:
        return cls(
            name=str(json["name"]),
            sysex=bool(json["sysex"]) if "sysex" in json else None,
            user_visible_only=bool(json["userVisibleOnly"]) if "userVisibleOnly" in json else None,
            allow_without_sanitization=bool(json["allowWithoutSanitization"]) if "allowWithoutSanitization" in json else None,
            allow_without_gesture=bool(json["allowWithoutGesture"]) if "allowWithoutGesture" in json else None,
            pan_tilt_zoom=bool(json["panTiltZoom"]) if "panTiltZoom" in json else None,
        )


class BrowserCommandId(enum.Enum):
    """
    Browser command ids used by executeBrowserCommand.
    """
    OPEN_TAB_SEARCH = "openTabSearch"
    CLOSE_TAB_SEARCH = "closeTabSearch"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> BrowserCommandId:
        return cls(json)


@dataclass
class Bucket:
    """
    Chrome histogram bucket.
    """
    #: Minimum value (inclusive).
    low: int

    #: Maximum value (exclusive).
    high: int

    #: Number of samples.
    count: int

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["low"] = self.low
        json["high"] = self.high
        json["count"] = self.count
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Bucket:
        return cls(
            low=int(json["low"]),
            high=int(json["high"]),
            count=int(json["count"]),
        )


@dataclass
class Histogram:
    """
    Chrome histogram.
    """
    #: Name.
    name: str

    #: Sum of sample values.
    sum_: int

    #: Total number of samples.
    count: int

    #: Buckets.
    buckets: list[Bucket]

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["name"] = self.name
        json["sum"] = self.sum_
        json["count"] = self.count
        json["buckets"] = [i.to_json() for i in self.buckets]
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> Histogram:
        return cls(
            name=str(json["name"]),
            sum_=int(json["sum"]),
            count=int(json["count"]),
            buckets=[Bucket.from_json(i) for i in json["buckets"]],
        )


class PrivacySandboxAPI(enum.Enum):
    BIDDING_AND_AUCTION_SERVICES = "BiddingAndAuctionServices"
    TRUSTED_KEY_VALUE = "TrustedKeyValue"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> PrivacySandboxAPI:
        return cls(json)


def x_set_permission__mutmut_orig(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_1(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = None
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_2(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = None
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_3(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["XXpermissionXX"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_4(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["PERMISSION"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_5(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["Permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_6(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = None
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_7(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["XXsettingXX"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_8(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["SETTING"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_9(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["Setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_10(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_11(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = None
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_12(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["XXoriginXX"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_13(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["ORIGIN"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_14(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["Origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_15(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_16(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_17(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["XXbrowserContextIdXX"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_18(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_19(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["BROWSERCONTEXTID"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_20(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["Browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_21(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_permission__mutmut_22(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_23(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_24(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.setPermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_25(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.setPermissionXX",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_26(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.setpermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_27(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.SETPERMISSION",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_28(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setpermission",
        "params": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_29(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_30(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_permission__mutmut_31(
    permission: PermissionDescriptor,
    setting: PermissionSetting,
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set permission settings for given origin.

    **EXPERIMENTAL**

    :param permission: Descriptor of permission to override.
    :param setting: Setting of the permission.
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permission"] = permission.to_json()
    params["setting"] = setting.to_json()
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setPermission",
        "Params": params,
    }
    yield cmd_dict

x_set_permission__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_permission__mutmut_1': x_set_permission__mutmut_1, 
    'x_set_permission__mutmut_2': x_set_permission__mutmut_2, 
    'x_set_permission__mutmut_3': x_set_permission__mutmut_3, 
    'x_set_permission__mutmut_4': x_set_permission__mutmut_4, 
    'x_set_permission__mutmut_5': x_set_permission__mutmut_5, 
    'x_set_permission__mutmut_6': x_set_permission__mutmut_6, 
    'x_set_permission__mutmut_7': x_set_permission__mutmut_7, 
    'x_set_permission__mutmut_8': x_set_permission__mutmut_8, 
    'x_set_permission__mutmut_9': x_set_permission__mutmut_9, 
    'x_set_permission__mutmut_10': x_set_permission__mutmut_10, 
    'x_set_permission__mutmut_11': x_set_permission__mutmut_11, 
    'x_set_permission__mutmut_12': x_set_permission__mutmut_12, 
    'x_set_permission__mutmut_13': x_set_permission__mutmut_13, 
    'x_set_permission__mutmut_14': x_set_permission__mutmut_14, 
    'x_set_permission__mutmut_15': x_set_permission__mutmut_15, 
    'x_set_permission__mutmut_16': x_set_permission__mutmut_16, 
    'x_set_permission__mutmut_17': x_set_permission__mutmut_17, 
    'x_set_permission__mutmut_18': x_set_permission__mutmut_18, 
    'x_set_permission__mutmut_19': x_set_permission__mutmut_19, 
    'x_set_permission__mutmut_20': x_set_permission__mutmut_20, 
    'x_set_permission__mutmut_21': x_set_permission__mutmut_21, 
    'x_set_permission__mutmut_22': x_set_permission__mutmut_22, 
    'x_set_permission__mutmut_23': x_set_permission__mutmut_23, 
    'x_set_permission__mutmut_24': x_set_permission__mutmut_24, 
    'x_set_permission__mutmut_25': x_set_permission__mutmut_25, 
    'x_set_permission__mutmut_26': x_set_permission__mutmut_26, 
    'x_set_permission__mutmut_27': x_set_permission__mutmut_27, 
    'x_set_permission__mutmut_28': x_set_permission__mutmut_28, 
    'x_set_permission__mutmut_29': x_set_permission__mutmut_29, 
    'x_set_permission__mutmut_30': x_set_permission__mutmut_30, 
    'x_set_permission__mutmut_31': x_set_permission__mutmut_31
}

def set_permission(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_permission__mutmut_orig, x_set_permission__mutmut_mutants, args, kwargs)
    return result 

set_permission.__signature__ = _mutmut_signature(x_set_permission__mutmut_orig)
x_set_permission__mutmut_orig.__name__ = 'x_set_permission'


def x_grant_permissions__mutmut_orig(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_1(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = None
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_2(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = None
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_3(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["XXpermissionsXX"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_4(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["PERMISSIONS"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_5(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["Permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_6(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_7(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = None
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_8(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["XXoriginXX"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_9(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["ORIGIN"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_10(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["Origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_11(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_12(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_13(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["XXbrowserContextIdXX"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_14(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_15(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["BROWSERCONTEXTID"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_16(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["Browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_17(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_grant_permissions__mutmut_18(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_19(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_20(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.grantPermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_21(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.grantPermissionsXX",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_22(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.grantpermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_23(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.GRANTPERMISSIONS",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_24(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantpermissions",
        "params": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_25(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_26(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "PARAMS": params,
    }
    yield cmd_dict


def x_grant_permissions__mutmut_27(
    permissions: list[PermissionType],
    origin: str | None = None,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Grant specific permissions to the given origin and reject all others.

    **EXPERIMENTAL**

    :param permissions:
    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.
    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["permissions"] = [i.to_json() for i in permissions]
    if origin is not None:
        params["origin"] = origin
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.grantPermissions",
        "Params": params,
    }
    yield cmd_dict

x_grant_permissions__mutmut_mutants : ClassVar[MutantDict] = {
'x_grant_permissions__mutmut_1': x_grant_permissions__mutmut_1, 
    'x_grant_permissions__mutmut_2': x_grant_permissions__mutmut_2, 
    'x_grant_permissions__mutmut_3': x_grant_permissions__mutmut_3, 
    'x_grant_permissions__mutmut_4': x_grant_permissions__mutmut_4, 
    'x_grant_permissions__mutmut_5': x_grant_permissions__mutmut_5, 
    'x_grant_permissions__mutmut_6': x_grant_permissions__mutmut_6, 
    'x_grant_permissions__mutmut_7': x_grant_permissions__mutmut_7, 
    'x_grant_permissions__mutmut_8': x_grant_permissions__mutmut_8, 
    'x_grant_permissions__mutmut_9': x_grant_permissions__mutmut_9, 
    'x_grant_permissions__mutmut_10': x_grant_permissions__mutmut_10, 
    'x_grant_permissions__mutmut_11': x_grant_permissions__mutmut_11, 
    'x_grant_permissions__mutmut_12': x_grant_permissions__mutmut_12, 
    'x_grant_permissions__mutmut_13': x_grant_permissions__mutmut_13, 
    'x_grant_permissions__mutmut_14': x_grant_permissions__mutmut_14, 
    'x_grant_permissions__mutmut_15': x_grant_permissions__mutmut_15, 
    'x_grant_permissions__mutmut_16': x_grant_permissions__mutmut_16, 
    'x_grant_permissions__mutmut_17': x_grant_permissions__mutmut_17, 
    'x_grant_permissions__mutmut_18': x_grant_permissions__mutmut_18, 
    'x_grant_permissions__mutmut_19': x_grant_permissions__mutmut_19, 
    'x_grant_permissions__mutmut_20': x_grant_permissions__mutmut_20, 
    'x_grant_permissions__mutmut_21': x_grant_permissions__mutmut_21, 
    'x_grant_permissions__mutmut_22': x_grant_permissions__mutmut_22, 
    'x_grant_permissions__mutmut_23': x_grant_permissions__mutmut_23, 
    'x_grant_permissions__mutmut_24': x_grant_permissions__mutmut_24, 
    'x_grant_permissions__mutmut_25': x_grant_permissions__mutmut_25, 
    'x_grant_permissions__mutmut_26': x_grant_permissions__mutmut_26, 
    'x_grant_permissions__mutmut_27': x_grant_permissions__mutmut_27
}

def grant_permissions(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_grant_permissions__mutmut_orig, x_grant_permissions__mutmut_mutants, args, kwargs)
    return result 

grant_permissions.__signature__ = _mutmut_signature(x_grant_permissions__mutmut_orig)
x_grant_permissions__mutmut_orig.__name__ = 'x_grant_permissions'


def x_reset_permissions__mutmut_orig(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_1(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = None
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_2(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_3(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_4(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["XXbrowserContextIdXX"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_5(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_6(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["BROWSERCONTEXTID"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_7(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["Browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_8(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_reset_permissions__mutmut_9(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_10(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_11(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.resetPermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_12(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.resetPermissionsXX",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_13(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.resetpermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_14(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.RESETPERMISSIONS",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_15(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetpermissions",
        "params": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_16(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_17(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "PARAMS": params,
    }
    yield cmd_dict


def x_reset_permissions__mutmut_18(
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Reset all permission management for all origins.

    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.resetPermissions",
        "Params": params,
    }
    yield cmd_dict

x_reset_permissions__mutmut_mutants : ClassVar[MutantDict] = {
'x_reset_permissions__mutmut_1': x_reset_permissions__mutmut_1, 
    'x_reset_permissions__mutmut_2': x_reset_permissions__mutmut_2, 
    'x_reset_permissions__mutmut_3': x_reset_permissions__mutmut_3, 
    'x_reset_permissions__mutmut_4': x_reset_permissions__mutmut_4, 
    'x_reset_permissions__mutmut_5': x_reset_permissions__mutmut_5, 
    'x_reset_permissions__mutmut_6': x_reset_permissions__mutmut_6, 
    'x_reset_permissions__mutmut_7': x_reset_permissions__mutmut_7, 
    'x_reset_permissions__mutmut_8': x_reset_permissions__mutmut_8, 
    'x_reset_permissions__mutmut_9': x_reset_permissions__mutmut_9, 
    'x_reset_permissions__mutmut_10': x_reset_permissions__mutmut_10, 
    'x_reset_permissions__mutmut_11': x_reset_permissions__mutmut_11, 
    'x_reset_permissions__mutmut_12': x_reset_permissions__mutmut_12, 
    'x_reset_permissions__mutmut_13': x_reset_permissions__mutmut_13, 
    'x_reset_permissions__mutmut_14': x_reset_permissions__mutmut_14, 
    'x_reset_permissions__mutmut_15': x_reset_permissions__mutmut_15, 
    'x_reset_permissions__mutmut_16': x_reset_permissions__mutmut_16, 
    'x_reset_permissions__mutmut_17': x_reset_permissions__mutmut_17, 
    'x_reset_permissions__mutmut_18': x_reset_permissions__mutmut_18
}

def reset_permissions(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_reset_permissions__mutmut_orig, x_reset_permissions__mutmut_mutants, args, kwargs)
    return result 

reset_permissions.__signature__ = _mutmut_signature(x_reset_permissions__mutmut_orig)
x_reset_permissions__mutmut_orig.__name__ = 'x_reset_permissions'


def x_set_download_behavior__mutmut_orig(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_1(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = None
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_2(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = None
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_3(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["XXbehaviorXX"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_4(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["BEHAVIOR"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_5(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["Behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_6(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_7(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = None
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_8(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["XXbrowserContextIdXX"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_9(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browsercontextid"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_10(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["BROWSERCONTEXTID"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_11(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["Browsercontextid"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_12(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_13(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = None
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_14(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["XXdownloadPathXX"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_15(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadpath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_16(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["DOWNLOADPATH"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_17(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["Downloadpath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_18(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_19(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_20(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["XXeventsEnabledXX"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_21(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsenabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_22(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["EVENTSENABLED"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_23(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["Eventsenabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_24(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_download_behavior__mutmut_25(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_26(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_27(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.setDownloadBehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_28(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.setDownloadBehaviorXX",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_29(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "browser.setdownloadbehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_30(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.SETDOWNLOADBEHAVIOR",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_31(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setdownloadbehavior",
        "params": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_32(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_33(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_download_behavior__mutmut_34(
    behavior: str,
    browser_context_id: BrowserContextID | None = None,
    download_path: str | None = None,
    events_enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set the behavior when downloading a file.

    **EXPERIMENTAL**

    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.
    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.
    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.
    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).
    """
    params: T_JSON_DICT = {}
    params["behavior"] = behavior
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    if download_path is not None:
        params["downloadPath"] = download_path
    if events_enabled is not None:
        params["eventsEnabled"] = events_enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDownloadBehavior",
        "Params": params,
    }
    yield cmd_dict

x_set_download_behavior__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_download_behavior__mutmut_1': x_set_download_behavior__mutmut_1, 
    'x_set_download_behavior__mutmut_2': x_set_download_behavior__mutmut_2, 
    'x_set_download_behavior__mutmut_3': x_set_download_behavior__mutmut_3, 
    'x_set_download_behavior__mutmut_4': x_set_download_behavior__mutmut_4, 
    'x_set_download_behavior__mutmut_5': x_set_download_behavior__mutmut_5, 
    'x_set_download_behavior__mutmut_6': x_set_download_behavior__mutmut_6, 
    'x_set_download_behavior__mutmut_7': x_set_download_behavior__mutmut_7, 
    'x_set_download_behavior__mutmut_8': x_set_download_behavior__mutmut_8, 
    'x_set_download_behavior__mutmut_9': x_set_download_behavior__mutmut_9, 
    'x_set_download_behavior__mutmut_10': x_set_download_behavior__mutmut_10, 
    'x_set_download_behavior__mutmut_11': x_set_download_behavior__mutmut_11, 
    'x_set_download_behavior__mutmut_12': x_set_download_behavior__mutmut_12, 
    'x_set_download_behavior__mutmut_13': x_set_download_behavior__mutmut_13, 
    'x_set_download_behavior__mutmut_14': x_set_download_behavior__mutmut_14, 
    'x_set_download_behavior__mutmut_15': x_set_download_behavior__mutmut_15, 
    'x_set_download_behavior__mutmut_16': x_set_download_behavior__mutmut_16, 
    'x_set_download_behavior__mutmut_17': x_set_download_behavior__mutmut_17, 
    'x_set_download_behavior__mutmut_18': x_set_download_behavior__mutmut_18, 
    'x_set_download_behavior__mutmut_19': x_set_download_behavior__mutmut_19, 
    'x_set_download_behavior__mutmut_20': x_set_download_behavior__mutmut_20, 
    'x_set_download_behavior__mutmut_21': x_set_download_behavior__mutmut_21, 
    'x_set_download_behavior__mutmut_22': x_set_download_behavior__mutmut_22, 
    'x_set_download_behavior__mutmut_23': x_set_download_behavior__mutmut_23, 
    'x_set_download_behavior__mutmut_24': x_set_download_behavior__mutmut_24, 
    'x_set_download_behavior__mutmut_25': x_set_download_behavior__mutmut_25, 
    'x_set_download_behavior__mutmut_26': x_set_download_behavior__mutmut_26, 
    'x_set_download_behavior__mutmut_27': x_set_download_behavior__mutmut_27, 
    'x_set_download_behavior__mutmut_28': x_set_download_behavior__mutmut_28, 
    'x_set_download_behavior__mutmut_29': x_set_download_behavior__mutmut_29, 
    'x_set_download_behavior__mutmut_30': x_set_download_behavior__mutmut_30, 
    'x_set_download_behavior__mutmut_31': x_set_download_behavior__mutmut_31, 
    'x_set_download_behavior__mutmut_32': x_set_download_behavior__mutmut_32, 
    'x_set_download_behavior__mutmut_33': x_set_download_behavior__mutmut_33, 
    'x_set_download_behavior__mutmut_34': x_set_download_behavior__mutmut_34
}

def set_download_behavior(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_download_behavior__mutmut_orig, x_set_download_behavior__mutmut_mutants, args, kwargs)
    return result 

set_download_behavior.__signature__ = _mutmut_signature(x_set_download_behavior__mutmut_orig)
x_set_download_behavior__mutmut_orig.__name__ = 'x_set_download_behavior'


def x_cancel_download__mutmut_orig(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_1(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = None
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_2(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = None
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_3(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["XXguidXX"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_4(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["GUID"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_5(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["Guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_6(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_7(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_8(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["XXbrowserContextIdXX"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_9(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_10(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["BROWSERCONTEXTID"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_11(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["Browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_12(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_cancel_download__mutmut_13(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_14(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_15(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.cancelDownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_16(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.cancelDownloadXX",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_17(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.canceldownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_18(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.CANCELDOWNLOAD",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_19(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.canceldownload",
        "params": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_20(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_21(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "PARAMS": params,
    }
    yield cmd_dict


def x_cancel_download__mutmut_22(
    guid: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Cancel a download if in progress

    **EXPERIMENTAL**

    :param guid: Global unique identifier of the download.
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["guid"] = guid
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.cancelDownload",
        "Params": params,
    }
    yield cmd_dict

x_cancel_download__mutmut_mutants : ClassVar[MutantDict] = {
'x_cancel_download__mutmut_1': x_cancel_download__mutmut_1, 
    'x_cancel_download__mutmut_2': x_cancel_download__mutmut_2, 
    'x_cancel_download__mutmut_3': x_cancel_download__mutmut_3, 
    'x_cancel_download__mutmut_4': x_cancel_download__mutmut_4, 
    'x_cancel_download__mutmut_5': x_cancel_download__mutmut_5, 
    'x_cancel_download__mutmut_6': x_cancel_download__mutmut_6, 
    'x_cancel_download__mutmut_7': x_cancel_download__mutmut_7, 
    'x_cancel_download__mutmut_8': x_cancel_download__mutmut_8, 
    'x_cancel_download__mutmut_9': x_cancel_download__mutmut_9, 
    'x_cancel_download__mutmut_10': x_cancel_download__mutmut_10, 
    'x_cancel_download__mutmut_11': x_cancel_download__mutmut_11, 
    'x_cancel_download__mutmut_12': x_cancel_download__mutmut_12, 
    'x_cancel_download__mutmut_13': x_cancel_download__mutmut_13, 
    'x_cancel_download__mutmut_14': x_cancel_download__mutmut_14, 
    'x_cancel_download__mutmut_15': x_cancel_download__mutmut_15, 
    'x_cancel_download__mutmut_16': x_cancel_download__mutmut_16, 
    'x_cancel_download__mutmut_17': x_cancel_download__mutmut_17, 
    'x_cancel_download__mutmut_18': x_cancel_download__mutmut_18, 
    'x_cancel_download__mutmut_19': x_cancel_download__mutmut_19, 
    'x_cancel_download__mutmut_20': x_cancel_download__mutmut_20, 
    'x_cancel_download__mutmut_21': x_cancel_download__mutmut_21, 
    'x_cancel_download__mutmut_22': x_cancel_download__mutmut_22
}

def cancel_download(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_cancel_download__mutmut_orig, x_cancel_download__mutmut_mutants, args, kwargs)
    return result 

cancel_download.__signature__ = _mutmut_signature(x_cancel_download__mutmut_orig)
x_cancel_download__mutmut_orig.__name__ = 'x_cancel_download'


def x_close__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Close browser gracefully.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.close",
    }
    yield cmd_dict


def x_close__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Close browser gracefully.
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_close__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Close browser gracefully.
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.close",
    }
    yield cmd_dict


def x_close__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Close browser gracefully.
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.close",
    }
    yield cmd_dict


def x_close__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Close browser gracefully.
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.close",
    }
    yield cmd_dict


def x_close__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Close browser gracefully.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.closeXX",
    }
    yield cmd_dict


def x_close__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Close browser gracefully.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "browser.close",
    }
    yield cmd_dict


def x_close__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Close browser gracefully.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.CLOSE",
    }
    yield cmd_dict

x_close__mutmut_mutants : ClassVar[MutantDict] = {
'x_close__mutmut_1': x_close__mutmut_1, 
    'x_close__mutmut_2': x_close__mutmut_2, 
    'x_close__mutmut_3': x_close__mutmut_3, 
    'x_close__mutmut_4': x_close__mutmut_4, 
    'x_close__mutmut_5': x_close__mutmut_5, 
    'x_close__mutmut_6': x_close__mutmut_6, 
    'x_close__mutmut_7': x_close__mutmut_7
}

def close(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_close__mutmut_orig, x_close__mutmut_mutants, args, kwargs)
    return result 

close.__signature__ = _mutmut_signature(x_close__mutmut_orig)
x_close__mutmut_orig.__name__ = 'x_close'


def x_crash__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes browser on the main thread.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.crash",
    }
    yield cmd_dict


def x_crash__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes browser on the main thread.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_crash__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes browser on the main thread.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.crash",
    }
    yield cmd_dict


def x_crash__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes browser on the main thread.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.crash",
    }
    yield cmd_dict


def x_crash__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes browser on the main thread.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.crash",
    }
    yield cmd_dict


def x_crash__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes browser on the main thread.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.crashXX",
    }
    yield cmd_dict


def x_crash__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes browser on the main thread.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "browser.crash",
    }
    yield cmd_dict


def x_crash__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes browser on the main thread.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.CRASH",
    }
    yield cmd_dict

x_crash__mutmut_mutants : ClassVar[MutantDict] = {
'x_crash__mutmut_1': x_crash__mutmut_1, 
    'x_crash__mutmut_2': x_crash__mutmut_2, 
    'x_crash__mutmut_3': x_crash__mutmut_3, 
    'x_crash__mutmut_4': x_crash__mutmut_4, 
    'x_crash__mutmut_5': x_crash__mutmut_5, 
    'x_crash__mutmut_6': x_crash__mutmut_6, 
    'x_crash__mutmut_7': x_crash__mutmut_7
}

def crash(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_crash__mutmut_orig, x_crash__mutmut_mutants, args, kwargs)
    return result 

crash.__signature__ = _mutmut_signature(x_crash__mutmut_orig)
x_crash__mutmut_orig.__name__ = 'x_crash'


def x_crash_gpu_process__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.crashGpuProcess",
    }
    yield cmd_dict


def x_crash_gpu_process__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_crash_gpu_process__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.crashGpuProcess",
    }
    yield cmd_dict


def x_crash_gpu_process__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.crashGpuProcess",
    }
    yield cmd_dict


def x_crash_gpu_process__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.crashGpuProcess",
    }
    yield cmd_dict


def x_crash_gpu_process__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.crashGpuProcessXX",
    }
    yield cmd_dict


def x_crash_gpu_process__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "browser.crashgpuprocess",
    }
    yield cmd_dict


def x_crash_gpu_process__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.CRASHGPUPROCESS",
    }
    yield cmd_dict


def x_crash_gpu_process__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Crashes GPU process.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.crashgpuprocess",
    }
    yield cmd_dict

x_crash_gpu_process__mutmut_mutants : ClassVar[MutantDict] = {
'x_crash_gpu_process__mutmut_1': x_crash_gpu_process__mutmut_1, 
    'x_crash_gpu_process__mutmut_2': x_crash_gpu_process__mutmut_2, 
    'x_crash_gpu_process__mutmut_3': x_crash_gpu_process__mutmut_3, 
    'x_crash_gpu_process__mutmut_4': x_crash_gpu_process__mutmut_4, 
    'x_crash_gpu_process__mutmut_5': x_crash_gpu_process__mutmut_5, 
    'x_crash_gpu_process__mutmut_6': x_crash_gpu_process__mutmut_6, 
    'x_crash_gpu_process__mutmut_7': x_crash_gpu_process__mutmut_7, 
    'x_crash_gpu_process__mutmut_8': x_crash_gpu_process__mutmut_8
}

def crash_gpu_process(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_crash_gpu_process__mutmut_orig, x_crash_gpu_process__mutmut_mutants, args, kwargs)
    return result 

crash_gpu_process.__signature__ = _mutmut_signature(x_crash_gpu_process__mutmut_orig)
x_crash_gpu_process__mutmut_orig.__name__ = 'x_crash_gpu_process'


def x_get_version__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.getVersionXX",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "browser.getversion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.GETVERSION",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getversion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_9() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = None
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_10() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(None),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_11() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["XXprotocolVersionXX"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_12() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolversion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_13() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["PROTOCOLVERSION"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_14() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["Protocolversion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_15() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(None),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_16() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["XXproductXX"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_17() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["PRODUCT"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_18() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["Product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_19() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(None),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_20() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["XXrevisionXX"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_21() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["REVISION"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_22() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["Revision"]),
        str(json["userAgent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_23() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(None),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_24() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["XXuserAgentXX"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_25() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["useragent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_26() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["USERAGENT"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_27() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["Useragent"]),
        str(json["jsVersion"]),
    )


def x_get_version__mutmut_28() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(None),
    )


def x_get_version__mutmut_29() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["XXjsVersionXX"]),
    )


def x_get_version__mutmut_30() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["jsversion"]),
    )


def x_get_version__mutmut_31() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["JSVERSION"]),
    )


def x_get_version__mutmut_32() -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[str, str, str, str, str]]:
    """
    Returns version information.

    :returns: A tuple with the following items:

        0. **protocolVersion** - Protocol version.
        1. **product** - Product name.
        2. **revision** - Product revision.
        3. **userAgent** - User-Agent.
        4. **jsVersion** - V8 version.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getVersion",
    }
    json = yield cmd_dict
    return (
        str(json["protocolVersion"]),
        str(json["product"]),
        str(json["revision"]),
        str(json["userAgent"]),
        str(json["Jsversion"]),
    )

x_get_version__mutmut_mutants : ClassVar[MutantDict] = {
'x_get_version__mutmut_1': x_get_version__mutmut_1, 
    'x_get_version__mutmut_2': x_get_version__mutmut_2, 
    'x_get_version__mutmut_3': x_get_version__mutmut_3, 
    'x_get_version__mutmut_4': x_get_version__mutmut_4, 
    'x_get_version__mutmut_5': x_get_version__mutmut_5, 
    'x_get_version__mutmut_6': x_get_version__mutmut_6, 
    'x_get_version__mutmut_7': x_get_version__mutmut_7, 
    'x_get_version__mutmut_8': x_get_version__mutmut_8, 
    'x_get_version__mutmut_9': x_get_version__mutmut_9, 
    'x_get_version__mutmut_10': x_get_version__mutmut_10, 
    'x_get_version__mutmut_11': x_get_version__mutmut_11, 
    'x_get_version__mutmut_12': x_get_version__mutmut_12, 
    'x_get_version__mutmut_13': x_get_version__mutmut_13, 
    'x_get_version__mutmut_14': x_get_version__mutmut_14, 
    'x_get_version__mutmut_15': x_get_version__mutmut_15, 
    'x_get_version__mutmut_16': x_get_version__mutmut_16, 
    'x_get_version__mutmut_17': x_get_version__mutmut_17, 
    'x_get_version__mutmut_18': x_get_version__mutmut_18, 
    'x_get_version__mutmut_19': x_get_version__mutmut_19, 
    'x_get_version__mutmut_20': x_get_version__mutmut_20, 
    'x_get_version__mutmut_21': x_get_version__mutmut_21, 
    'x_get_version__mutmut_22': x_get_version__mutmut_22, 
    'x_get_version__mutmut_23': x_get_version__mutmut_23, 
    'x_get_version__mutmut_24': x_get_version__mutmut_24, 
    'x_get_version__mutmut_25': x_get_version__mutmut_25, 
    'x_get_version__mutmut_26': x_get_version__mutmut_26, 
    'x_get_version__mutmut_27': x_get_version__mutmut_27, 
    'x_get_version__mutmut_28': x_get_version__mutmut_28, 
    'x_get_version__mutmut_29': x_get_version__mutmut_29, 
    'x_get_version__mutmut_30': x_get_version__mutmut_30, 
    'x_get_version__mutmut_31': x_get_version__mutmut_31, 
    'x_get_version__mutmut_32': x_get_version__mutmut_32
}

def get_version(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_get_version__mutmut_orig, x_get_version__mutmut_mutants, args, kwargs)
    return result 

get_version.__signature__ = _mutmut_signature(x_get_version__mutmut_orig)
x_get_version__mutmut_orig.__name__ = 'x_get_version'


def x_get_browser_command_line__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getBrowserCommandLine",
    }
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.getBrowserCommandLine",
    }
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.getBrowserCommandLine",
    }
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.getBrowserCommandLine",
    }
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.getBrowserCommandLineXX",
    }
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "browser.getbrowsercommandline",
    }
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.GETBROWSERCOMMANDLINE",
    }
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getbrowsercommandline",
    }
    json = yield cmd_dict
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_9() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getBrowserCommandLine",
    }
    json = None
    return [str(i) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_10() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getBrowserCommandLine",
    }
    json = yield cmd_dict
    return [str(None) for i in json["arguments"]]


def x_get_browser_command_line__mutmut_11() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getBrowserCommandLine",
    }
    json = yield cmd_dict
    return [str(i) for i in json["XXargumentsXX"]]


def x_get_browser_command_line__mutmut_12() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getBrowserCommandLine",
    }
    json = yield cmd_dict
    return [str(i) for i in json["ARGUMENTS"]]


def x_get_browser_command_line__mutmut_13() -> Generator[T_JSON_DICT, T_JSON_DICT, list[str]]:
    """
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.

    **EXPERIMENTAL**

    :returns: Commandline parameters
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getBrowserCommandLine",
    }
    json = yield cmd_dict
    return [str(i) for i in json["Arguments"]]

x_get_browser_command_line__mutmut_mutants : ClassVar[MutantDict] = {
'x_get_browser_command_line__mutmut_1': x_get_browser_command_line__mutmut_1, 
    'x_get_browser_command_line__mutmut_2': x_get_browser_command_line__mutmut_2, 
    'x_get_browser_command_line__mutmut_3': x_get_browser_command_line__mutmut_3, 
    'x_get_browser_command_line__mutmut_4': x_get_browser_command_line__mutmut_4, 
    'x_get_browser_command_line__mutmut_5': x_get_browser_command_line__mutmut_5, 
    'x_get_browser_command_line__mutmut_6': x_get_browser_command_line__mutmut_6, 
    'x_get_browser_command_line__mutmut_7': x_get_browser_command_line__mutmut_7, 
    'x_get_browser_command_line__mutmut_8': x_get_browser_command_line__mutmut_8, 
    'x_get_browser_command_line__mutmut_9': x_get_browser_command_line__mutmut_9, 
    'x_get_browser_command_line__mutmut_10': x_get_browser_command_line__mutmut_10, 
    'x_get_browser_command_line__mutmut_11': x_get_browser_command_line__mutmut_11, 
    'x_get_browser_command_line__mutmut_12': x_get_browser_command_line__mutmut_12, 
    'x_get_browser_command_line__mutmut_13': x_get_browser_command_line__mutmut_13
}

def get_browser_command_line(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_get_browser_command_line__mutmut_orig, x_get_browser_command_line__mutmut_mutants, args, kwargs)
    return result 

get_browser_command_line.__signature__ = _mutmut_signature(x_get_browser_command_line__mutmut_orig)
x_get_browser_command_line__mutmut_orig.__name__ = 'x_get_browser_command_line'


def x_get_histograms__mutmut_orig(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_1(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = None
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_2(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_3(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = None
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_4(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["XXqueryXX"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_5(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["QUERY"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_6(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["Query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_7(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_8(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_9(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["XXdeltaXX"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_10(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["DELTA"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_11(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["Delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_12(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_13(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_14(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_15(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_16(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.getHistogramsXX",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_17(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "browser.gethistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_18(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.GETHISTOGRAMS",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_19(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.gethistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_20(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "XXparamsXX": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_21(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "PARAMS": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_22(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "Params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_23(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = None
    return [Histogram.from_json(i) for i in json["histograms"]]


def x_get_histograms__mutmut_24(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(None) for i in json["histograms"]]


def x_get_histograms__mutmut_25(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["XXhistogramsXX"]]


def x_get_histograms__mutmut_26(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["HISTOGRAMS"]]


def x_get_histograms__mutmut_27(
    query: str | None = None,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, list[Histogram]]:
    """
    Get Chrome histograms.

    **EXPERIMENTAL**

    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histograms.
    """
    params: T_JSON_DICT = {}
    if query is not None:
        params["query"] = query
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistograms",
        "params": params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json["Histograms"]]

x_get_histograms__mutmut_mutants : ClassVar[MutantDict] = {
'x_get_histograms__mutmut_1': x_get_histograms__mutmut_1, 
    'x_get_histograms__mutmut_2': x_get_histograms__mutmut_2, 
    'x_get_histograms__mutmut_3': x_get_histograms__mutmut_3, 
    'x_get_histograms__mutmut_4': x_get_histograms__mutmut_4, 
    'x_get_histograms__mutmut_5': x_get_histograms__mutmut_5, 
    'x_get_histograms__mutmut_6': x_get_histograms__mutmut_6, 
    'x_get_histograms__mutmut_7': x_get_histograms__mutmut_7, 
    'x_get_histograms__mutmut_8': x_get_histograms__mutmut_8, 
    'x_get_histograms__mutmut_9': x_get_histograms__mutmut_9, 
    'x_get_histograms__mutmut_10': x_get_histograms__mutmut_10, 
    'x_get_histograms__mutmut_11': x_get_histograms__mutmut_11, 
    'x_get_histograms__mutmut_12': x_get_histograms__mutmut_12, 
    'x_get_histograms__mutmut_13': x_get_histograms__mutmut_13, 
    'x_get_histograms__mutmut_14': x_get_histograms__mutmut_14, 
    'x_get_histograms__mutmut_15': x_get_histograms__mutmut_15, 
    'x_get_histograms__mutmut_16': x_get_histograms__mutmut_16, 
    'x_get_histograms__mutmut_17': x_get_histograms__mutmut_17, 
    'x_get_histograms__mutmut_18': x_get_histograms__mutmut_18, 
    'x_get_histograms__mutmut_19': x_get_histograms__mutmut_19, 
    'x_get_histograms__mutmut_20': x_get_histograms__mutmut_20, 
    'x_get_histograms__mutmut_21': x_get_histograms__mutmut_21, 
    'x_get_histograms__mutmut_22': x_get_histograms__mutmut_22, 
    'x_get_histograms__mutmut_23': x_get_histograms__mutmut_23, 
    'x_get_histograms__mutmut_24': x_get_histograms__mutmut_24, 
    'x_get_histograms__mutmut_25': x_get_histograms__mutmut_25, 
    'x_get_histograms__mutmut_26': x_get_histograms__mutmut_26, 
    'x_get_histograms__mutmut_27': x_get_histograms__mutmut_27
}

def get_histograms(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_get_histograms__mutmut_orig, x_get_histograms__mutmut_mutants, args, kwargs)
    return result 

get_histograms.__signature__ = _mutmut_signature(x_get_histograms__mutmut_orig)
x_get_histograms__mutmut_orig.__name__ = 'x_get_histograms'


def x_get_histogram__mutmut_orig(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_1(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = None
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_2(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = None
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_3(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["XXnameXX"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_4(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["NAME"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_5(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["Name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_6(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_7(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_8(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["XXdeltaXX"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_9(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["DELTA"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_10(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["Delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_11(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_12(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_13(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_14(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_15(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.getHistogramXX",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_16(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "browser.gethistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_17(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.GETHISTOGRAM",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_18(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.gethistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_19(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "XXparamsXX": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_20(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "PARAMS": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_21(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "Params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_22(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = None
    return Histogram.from_json(json["histogram"])


def x_get_histogram__mutmut_23(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(None)


def x_get_histogram__mutmut_24(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["XXhistogramXX"])


def x_get_histogram__mutmut_25(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["HISTOGRAM"])


def x_get_histogram__mutmut_26(
    name: str,
    delta: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:
    """
    Get a Chrome histogram by name.

    **EXPERIMENTAL**

    :param name: Requested histogram name.
    :param delta: *(Optional)* If true, retrieve delta since last delta call.
    :returns: Histogram.
    """
    params: T_JSON_DICT = {}
    params["name"] = name
    if delta is not None:
        params["delta"] = delta
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getHistogram",
        "params": params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json["Histogram"])

x_get_histogram__mutmut_mutants : ClassVar[MutantDict] = {
'x_get_histogram__mutmut_1': x_get_histogram__mutmut_1, 
    'x_get_histogram__mutmut_2': x_get_histogram__mutmut_2, 
    'x_get_histogram__mutmut_3': x_get_histogram__mutmut_3, 
    'x_get_histogram__mutmut_4': x_get_histogram__mutmut_4, 
    'x_get_histogram__mutmut_5': x_get_histogram__mutmut_5, 
    'x_get_histogram__mutmut_6': x_get_histogram__mutmut_6, 
    'x_get_histogram__mutmut_7': x_get_histogram__mutmut_7, 
    'x_get_histogram__mutmut_8': x_get_histogram__mutmut_8, 
    'x_get_histogram__mutmut_9': x_get_histogram__mutmut_9, 
    'x_get_histogram__mutmut_10': x_get_histogram__mutmut_10, 
    'x_get_histogram__mutmut_11': x_get_histogram__mutmut_11, 
    'x_get_histogram__mutmut_12': x_get_histogram__mutmut_12, 
    'x_get_histogram__mutmut_13': x_get_histogram__mutmut_13, 
    'x_get_histogram__mutmut_14': x_get_histogram__mutmut_14, 
    'x_get_histogram__mutmut_15': x_get_histogram__mutmut_15, 
    'x_get_histogram__mutmut_16': x_get_histogram__mutmut_16, 
    'x_get_histogram__mutmut_17': x_get_histogram__mutmut_17, 
    'x_get_histogram__mutmut_18': x_get_histogram__mutmut_18, 
    'x_get_histogram__mutmut_19': x_get_histogram__mutmut_19, 
    'x_get_histogram__mutmut_20': x_get_histogram__mutmut_20, 
    'x_get_histogram__mutmut_21': x_get_histogram__mutmut_21, 
    'x_get_histogram__mutmut_22': x_get_histogram__mutmut_22, 
    'x_get_histogram__mutmut_23': x_get_histogram__mutmut_23, 
    'x_get_histogram__mutmut_24': x_get_histogram__mutmut_24, 
    'x_get_histogram__mutmut_25': x_get_histogram__mutmut_25, 
    'x_get_histogram__mutmut_26': x_get_histogram__mutmut_26
}

def get_histogram(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_get_histogram__mutmut_orig, x_get_histogram__mutmut_mutants, args, kwargs)
    return result 

get_histogram.__signature__ = _mutmut_signature(x_get_histogram__mutmut_orig)
x_get_histogram__mutmut_orig.__name__ = 'x_get_histogram'


def x_get_window_bounds__mutmut_orig(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_1(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = None
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_2(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_3(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["XXwindowIdXX"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_4(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowid"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_5(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["WINDOWID"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_6(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["Windowid"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_7(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_8(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_9(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_10(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_11(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.getWindowBoundsXX",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_12(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.getwindowbounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_13(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.GETWINDOWBOUNDS",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_14(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getwindowbounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_15(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "XXparamsXX": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_16(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "PARAMS": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_17(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "Params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_18(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = None
    return Bounds.from_json(json["bounds"])


def x_get_window_bounds__mutmut_19(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(None)


def x_get_window_bounds__mutmut_20(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["XXboundsXX"])


def x_get_window_bounds__mutmut_21(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["BOUNDS"])


def x_get_window_bounds__mutmut_22(
    window_id: WindowID,
) -> Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:
    """
    Get position and size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowBounds",
        "params": params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json["Bounds"])

x_get_window_bounds__mutmut_mutants : ClassVar[MutantDict] = {
'x_get_window_bounds__mutmut_1': x_get_window_bounds__mutmut_1, 
    'x_get_window_bounds__mutmut_2': x_get_window_bounds__mutmut_2, 
    'x_get_window_bounds__mutmut_3': x_get_window_bounds__mutmut_3, 
    'x_get_window_bounds__mutmut_4': x_get_window_bounds__mutmut_4, 
    'x_get_window_bounds__mutmut_5': x_get_window_bounds__mutmut_5, 
    'x_get_window_bounds__mutmut_6': x_get_window_bounds__mutmut_6, 
    'x_get_window_bounds__mutmut_7': x_get_window_bounds__mutmut_7, 
    'x_get_window_bounds__mutmut_8': x_get_window_bounds__mutmut_8, 
    'x_get_window_bounds__mutmut_9': x_get_window_bounds__mutmut_9, 
    'x_get_window_bounds__mutmut_10': x_get_window_bounds__mutmut_10, 
    'x_get_window_bounds__mutmut_11': x_get_window_bounds__mutmut_11, 
    'x_get_window_bounds__mutmut_12': x_get_window_bounds__mutmut_12, 
    'x_get_window_bounds__mutmut_13': x_get_window_bounds__mutmut_13, 
    'x_get_window_bounds__mutmut_14': x_get_window_bounds__mutmut_14, 
    'x_get_window_bounds__mutmut_15': x_get_window_bounds__mutmut_15, 
    'x_get_window_bounds__mutmut_16': x_get_window_bounds__mutmut_16, 
    'x_get_window_bounds__mutmut_17': x_get_window_bounds__mutmut_17, 
    'x_get_window_bounds__mutmut_18': x_get_window_bounds__mutmut_18, 
    'x_get_window_bounds__mutmut_19': x_get_window_bounds__mutmut_19, 
    'x_get_window_bounds__mutmut_20': x_get_window_bounds__mutmut_20, 
    'x_get_window_bounds__mutmut_21': x_get_window_bounds__mutmut_21, 
    'x_get_window_bounds__mutmut_22': x_get_window_bounds__mutmut_22
}

def get_window_bounds(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_get_window_bounds__mutmut_orig, x_get_window_bounds__mutmut_mutants, args, kwargs)
    return result 

get_window_bounds.__signature__ = _mutmut_signature(x_get_window_bounds__mutmut_orig)
x_get_window_bounds__mutmut_orig.__name__ = 'x_get_window_bounds'


def x_get_window_for_target__mutmut_orig(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_1(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = None
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_2(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_3(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_4(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["XXtargetIdXX"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_5(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetid"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_6(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["TARGETID"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_7(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["Targetid"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_8(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_9(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_10(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_11(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_12(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.getWindowForTargetXX",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_13(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.getwindowfortarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_14(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.GETWINDOWFORTARGET",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_15(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getwindowfortarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_16(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "XXparamsXX": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_17(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "PARAMS": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_18(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "Params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_19(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = None
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_20(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(None),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_21(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["XXwindowIdXX"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_22(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowid"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_23(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["WINDOWID"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_24(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["Windowid"]),
        Bounds.from_json(json["bounds"]),
    )


def x_get_window_for_target__mutmut_25(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(None),
    )


def x_get_window_for_target__mutmut_26(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["XXboundsXX"]),
    )


def x_get_window_for_target__mutmut_27(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["BOUNDS"]),
    )


def x_get_window_for_target__mutmut_28(
    target_id: target.TargetID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, tuple[WindowID, Bounds]]:
    """
    Get the browser window that contains the devtools target.

    **EXPERIMENTAL**

    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: A tuple with the following items:

        0. **windowId** - Browser window id.
        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
    """
    params: T_JSON_DICT = {}
    if target_id is not None:
        params["targetId"] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.getWindowForTarget",
        "params": params,
    }
    json = yield cmd_dict
    return (
        WindowID.from_json(json["windowId"]),
        Bounds.from_json(json["Bounds"]),
    )

x_get_window_for_target__mutmut_mutants : ClassVar[MutantDict] = {
'x_get_window_for_target__mutmut_1': x_get_window_for_target__mutmut_1, 
    'x_get_window_for_target__mutmut_2': x_get_window_for_target__mutmut_2, 
    'x_get_window_for_target__mutmut_3': x_get_window_for_target__mutmut_3, 
    'x_get_window_for_target__mutmut_4': x_get_window_for_target__mutmut_4, 
    'x_get_window_for_target__mutmut_5': x_get_window_for_target__mutmut_5, 
    'x_get_window_for_target__mutmut_6': x_get_window_for_target__mutmut_6, 
    'x_get_window_for_target__mutmut_7': x_get_window_for_target__mutmut_7, 
    'x_get_window_for_target__mutmut_8': x_get_window_for_target__mutmut_8, 
    'x_get_window_for_target__mutmut_9': x_get_window_for_target__mutmut_9, 
    'x_get_window_for_target__mutmut_10': x_get_window_for_target__mutmut_10, 
    'x_get_window_for_target__mutmut_11': x_get_window_for_target__mutmut_11, 
    'x_get_window_for_target__mutmut_12': x_get_window_for_target__mutmut_12, 
    'x_get_window_for_target__mutmut_13': x_get_window_for_target__mutmut_13, 
    'x_get_window_for_target__mutmut_14': x_get_window_for_target__mutmut_14, 
    'x_get_window_for_target__mutmut_15': x_get_window_for_target__mutmut_15, 
    'x_get_window_for_target__mutmut_16': x_get_window_for_target__mutmut_16, 
    'x_get_window_for_target__mutmut_17': x_get_window_for_target__mutmut_17, 
    'x_get_window_for_target__mutmut_18': x_get_window_for_target__mutmut_18, 
    'x_get_window_for_target__mutmut_19': x_get_window_for_target__mutmut_19, 
    'x_get_window_for_target__mutmut_20': x_get_window_for_target__mutmut_20, 
    'x_get_window_for_target__mutmut_21': x_get_window_for_target__mutmut_21, 
    'x_get_window_for_target__mutmut_22': x_get_window_for_target__mutmut_22, 
    'x_get_window_for_target__mutmut_23': x_get_window_for_target__mutmut_23, 
    'x_get_window_for_target__mutmut_24': x_get_window_for_target__mutmut_24, 
    'x_get_window_for_target__mutmut_25': x_get_window_for_target__mutmut_25, 
    'x_get_window_for_target__mutmut_26': x_get_window_for_target__mutmut_26, 
    'x_get_window_for_target__mutmut_27': x_get_window_for_target__mutmut_27, 
    'x_get_window_for_target__mutmut_28': x_get_window_for_target__mutmut_28
}

def get_window_for_target(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_get_window_for_target__mutmut_orig, x_get_window_for_target__mutmut_mutants, args, kwargs)
    return result 

get_window_for_target.__signature__ = _mutmut_signature(x_get_window_for_target__mutmut_orig)
x_get_window_for_target__mutmut_orig.__name__ = 'x_get_window_for_target'


def x_set_window_bounds__mutmut_orig(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_1(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = None
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_2(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = None
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_3(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["XXwindowIdXX"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_4(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowid"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_5(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["WINDOWID"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_6(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["Windowid"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_7(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_8(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["XXboundsXX"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_9(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["BOUNDS"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_10(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["Bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_11(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_window_bounds__mutmut_12(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_13(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_14(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.setWindowBounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_15(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.setWindowBoundsXX",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_16(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.setwindowbounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_17(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.SETWINDOWBOUNDS",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_18(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setwindowbounds",
        "params": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_19(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_20(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_window_bounds__mutmut_21(
    window_id: WindowID,
    bounds: Bounds,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set position and/or size of the browser window.

    **EXPERIMENTAL**

    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    """
    params: T_JSON_DICT = {}
    params["windowId"] = window_id.to_json()
    params["bounds"] = bounds.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setWindowBounds",
        "Params": params,
    }
    yield cmd_dict

x_set_window_bounds__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_window_bounds__mutmut_1': x_set_window_bounds__mutmut_1, 
    'x_set_window_bounds__mutmut_2': x_set_window_bounds__mutmut_2, 
    'x_set_window_bounds__mutmut_3': x_set_window_bounds__mutmut_3, 
    'x_set_window_bounds__mutmut_4': x_set_window_bounds__mutmut_4, 
    'x_set_window_bounds__mutmut_5': x_set_window_bounds__mutmut_5, 
    'x_set_window_bounds__mutmut_6': x_set_window_bounds__mutmut_6, 
    'x_set_window_bounds__mutmut_7': x_set_window_bounds__mutmut_7, 
    'x_set_window_bounds__mutmut_8': x_set_window_bounds__mutmut_8, 
    'x_set_window_bounds__mutmut_9': x_set_window_bounds__mutmut_9, 
    'x_set_window_bounds__mutmut_10': x_set_window_bounds__mutmut_10, 
    'x_set_window_bounds__mutmut_11': x_set_window_bounds__mutmut_11, 
    'x_set_window_bounds__mutmut_12': x_set_window_bounds__mutmut_12, 
    'x_set_window_bounds__mutmut_13': x_set_window_bounds__mutmut_13, 
    'x_set_window_bounds__mutmut_14': x_set_window_bounds__mutmut_14, 
    'x_set_window_bounds__mutmut_15': x_set_window_bounds__mutmut_15, 
    'x_set_window_bounds__mutmut_16': x_set_window_bounds__mutmut_16, 
    'x_set_window_bounds__mutmut_17': x_set_window_bounds__mutmut_17, 
    'x_set_window_bounds__mutmut_18': x_set_window_bounds__mutmut_18, 
    'x_set_window_bounds__mutmut_19': x_set_window_bounds__mutmut_19, 
    'x_set_window_bounds__mutmut_20': x_set_window_bounds__mutmut_20, 
    'x_set_window_bounds__mutmut_21': x_set_window_bounds__mutmut_21
}

def set_window_bounds(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_window_bounds__mutmut_orig, x_set_window_bounds__mutmut_mutants, args, kwargs)
    return result 

set_window_bounds.__signature__ = _mutmut_signature(x_set_window_bounds__mutmut_orig)
x_set_window_bounds__mutmut_orig.__name__ = 'x_set_window_bounds'


def x_set_dock_tile__mutmut_orig(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_1(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = None
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_2(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_3(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = None
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_4(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["XXbadgeLabelXX"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_5(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgelabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_6(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["BADGELABEL"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_7(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["Badgelabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_8(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_9(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_10(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["XXimageXX"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_11(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["IMAGE"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_12(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["Image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_13(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_dock_tile__mutmut_14(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_15(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_16(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.setDockTile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_17(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.setDockTileXX",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_18(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "browser.setdocktile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_19(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.SETDOCKTILE",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_20(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setdocktile",
        "params": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_21(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_22(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_dock_tile__mutmut_23(
    badge_label: str | None = None,
    image: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Set dock tile details, platform-specific.

    **EXPERIMENTAL**

    :param badge_label: *(Optional)*
    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)
    """
    params: T_JSON_DICT = {}
    if badge_label is not None:
        params["badgeLabel"] = badge_label
    if image is not None:
        params["image"] = image
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.setDockTile",
        "Params": params,
    }
    yield cmd_dict

x_set_dock_tile__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_dock_tile__mutmut_1': x_set_dock_tile__mutmut_1, 
    'x_set_dock_tile__mutmut_2': x_set_dock_tile__mutmut_2, 
    'x_set_dock_tile__mutmut_3': x_set_dock_tile__mutmut_3, 
    'x_set_dock_tile__mutmut_4': x_set_dock_tile__mutmut_4, 
    'x_set_dock_tile__mutmut_5': x_set_dock_tile__mutmut_5, 
    'x_set_dock_tile__mutmut_6': x_set_dock_tile__mutmut_6, 
    'x_set_dock_tile__mutmut_7': x_set_dock_tile__mutmut_7, 
    'x_set_dock_tile__mutmut_8': x_set_dock_tile__mutmut_8, 
    'x_set_dock_tile__mutmut_9': x_set_dock_tile__mutmut_9, 
    'x_set_dock_tile__mutmut_10': x_set_dock_tile__mutmut_10, 
    'x_set_dock_tile__mutmut_11': x_set_dock_tile__mutmut_11, 
    'x_set_dock_tile__mutmut_12': x_set_dock_tile__mutmut_12, 
    'x_set_dock_tile__mutmut_13': x_set_dock_tile__mutmut_13, 
    'x_set_dock_tile__mutmut_14': x_set_dock_tile__mutmut_14, 
    'x_set_dock_tile__mutmut_15': x_set_dock_tile__mutmut_15, 
    'x_set_dock_tile__mutmut_16': x_set_dock_tile__mutmut_16, 
    'x_set_dock_tile__mutmut_17': x_set_dock_tile__mutmut_17, 
    'x_set_dock_tile__mutmut_18': x_set_dock_tile__mutmut_18, 
    'x_set_dock_tile__mutmut_19': x_set_dock_tile__mutmut_19, 
    'x_set_dock_tile__mutmut_20': x_set_dock_tile__mutmut_20, 
    'x_set_dock_tile__mutmut_21': x_set_dock_tile__mutmut_21, 
    'x_set_dock_tile__mutmut_22': x_set_dock_tile__mutmut_22, 
    'x_set_dock_tile__mutmut_23': x_set_dock_tile__mutmut_23
}

def set_dock_tile(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_dock_tile__mutmut_orig, x_set_dock_tile__mutmut_mutants, args, kwargs)
    return result 

set_dock_tile.__signature__ = _mutmut_signature(x_set_dock_tile__mutmut_orig)
x_set_dock_tile__mutmut_orig.__name__ = 'x_set_dock_tile'


def x_execute_browser_command__mutmut_orig(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_1(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = None
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_2(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_3(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["XXcommandIdXX"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_4(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandid"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_5(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["COMMANDID"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_6(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["Commandid"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_7(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_execute_browser_command__mutmut_8(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_9(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_10(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.executeBrowserCommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_11(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.executeBrowserCommandXX",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_12(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.executebrowsercommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_13(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.EXECUTEBROWSERCOMMAND",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_14(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executebrowsercommand",
        "params": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_15(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_16(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "PARAMS": params,
    }
    yield cmd_dict


def x_execute_browser_command__mutmut_17(
    command_id: BrowserCommandId,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Invoke custom browser commands used by telemetry.

    **EXPERIMENTAL**

    :param command_id:
    """
    params: T_JSON_DICT = {}
    params["commandId"] = command_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.executeBrowserCommand",
        "Params": params,
    }
    yield cmd_dict

x_execute_browser_command__mutmut_mutants : ClassVar[MutantDict] = {
'x_execute_browser_command__mutmut_1': x_execute_browser_command__mutmut_1, 
    'x_execute_browser_command__mutmut_2': x_execute_browser_command__mutmut_2, 
    'x_execute_browser_command__mutmut_3': x_execute_browser_command__mutmut_3, 
    'x_execute_browser_command__mutmut_4': x_execute_browser_command__mutmut_4, 
    'x_execute_browser_command__mutmut_5': x_execute_browser_command__mutmut_5, 
    'x_execute_browser_command__mutmut_6': x_execute_browser_command__mutmut_6, 
    'x_execute_browser_command__mutmut_7': x_execute_browser_command__mutmut_7, 
    'x_execute_browser_command__mutmut_8': x_execute_browser_command__mutmut_8, 
    'x_execute_browser_command__mutmut_9': x_execute_browser_command__mutmut_9, 
    'x_execute_browser_command__mutmut_10': x_execute_browser_command__mutmut_10, 
    'x_execute_browser_command__mutmut_11': x_execute_browser_command__mutmut_11, 
    'x_execute_browser_command__mutmut_12': x_execute_browser_command__mutmut_12, 
    'x_execute_browser_command__mutmut_13': x_execute_browser_command__mutmut_13, 
    'x_execute_browser_command__mutmut_14': x_execute_browser_command__mutmut_14, 
    'x_execute_browser_command__mutmut_15': x_execute_browser_command__mutmut_15, 
    'x_execute_browser_command__mutmut_16': x_execute_browser_command__mutmut_16, 
    'x_execute_browser_command__mutmut_17': x_execute_browser_command__mutmut_17
}

def execute_browser_command(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_execute_browser_command__mutmut_orig, x_execute_browser_command__mutmut_mutants, args, kwargs)
    return result 

execute_browser_command.__signature__ = _mutmut_signature(x_execute_browser_command__mutmut_orig)
x_execute_browser_command__mutmut_orig.__name__ = 'x_execute_browser_command'


def x_add_privacy_sandbox_enrollment_override__mutmut_orig(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_1(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = None
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_2(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_3(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["XXurlXX"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_4(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["URL"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_5(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["Url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_6(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_7(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_8(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_9(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.addPrivacySandboxEnrollmentOverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_10(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.addPrivacySandboxEnrollmentOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_11(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "browser.addprivacysandboxenrollmentoverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_12(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.ADDPRIVACYSANDBOXENROLLMENTOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_13(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addprivacysandboxenrollmentoverride",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_14(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_15(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_enrollment_override__mutmut_16(
    url: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows a site to use privacy sandbox features that require enrollment
    without the site actually being enrolled. Only supported on page targets.

    :param url:
    """
    params: T_JSON_DICT = {}
    params["url"] = url
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxEnrollmentOverride",
        "Params": params,
    }
    yield cmd_dict

x_add_privacy_sandbox_enrollment_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_add_privacy_sandbox_enrollment_override__mutmut_1': x_add_privacy_sandbox_enrollment_override__mutmut_1, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_2': x_add_privacy_sandbox_enrollment_override__mutmut_2, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_3': x_add_privacy_sandbox_enrollment_override__mutmut_3, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_4': x_add_privacy_sandbox_enrollment_override__mutmut_4, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_5': x_add_privacy_sandbox_enrollment_override__mutmut_5, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_6': x_add_privacy_sandbox_enrollment_override__mutmut_6, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_7': x_add_privacy_sandbox_enrollment_override__mutmut_7, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_8': x_add_privacy_sandbox_enrollment_override__mutmut_8, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_9': x_add_privacy_sandbox_enrollment_override__mutmut_9, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_10': x_add_privacy_sandbox_enrollment_override__mutmut_10, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_11': x_add_privacy_sandbox_enrollment_override__mutmut_11, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_12': x_add_privacy_sandbox_enrollment_override__mutmut_12, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_13': x_add_privacy_sandbox_enrollment_override__mutmut_13, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_14': x_add_privacy_sandbox_enrollment_override__mutmut_14, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_15': x_add_privacy_sandbox_enrollment_override__mutmut_15, 
    'x_add_privacy_sandbox_enrollment_override__mutmut_16': x_add_privacy_sandbox_enrollment_override__mutmut_16
}

def add_privacy_sandbox_enrollment_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_add_privacy_sandbox_enrollment_override__mutmut_orig, x_add_privacy_sandbox_enrollment_override__mutmut_mutants, args, kwargs)
    return result 

add_privacy_sandbox_enrollment_override.__signature__ = _mutmut_signature(x_add_privacy_sandbox_enrollment_override__mutmut_orig)
x_add_privacy_sandbox_enrollment_override__mutmut_orig.__name__ = 'x_add_privacy_sandbox_enrollment_override'


def x_add_privacy_sandbox_coordinator_key_config__mutmut_orig(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_1(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = None
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_2(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = None
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_3(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["XXapiXX"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_4(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["API"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_5(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["Api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_6(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = None
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_7(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["XXcoordinatorOriginXX"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_8(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatororigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_9(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["COORDINATORORIGIN"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_10(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["Coordinatororigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_11(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = None
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_12(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["XXkeyConfigXX"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_13(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyconfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_14(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["KEYCONFIG"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_15(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["Keyconfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_16(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_17(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_18(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["XXbrowserContextIdXX"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_19(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_20(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["BROWSERCONTEXTID"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_21(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["Browsercontextid"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_22(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_23(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_24(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_25(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_26(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXBrowser.addPrivacySandboxCoordinatorKeyConfigXX",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_27(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "browser.addprivacysandboxcoordinatorkeyconfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_28(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "BROWSER.ADDPRIVACYSANDBOXCOORDINATORKEYCONFIG",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_29(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addprivacysandboxcoordinatorkeyconfig",
        "params": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_30(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_31(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "PARAMS": params,
    }
    yield cmd_dict


def x_add_privacy_sandbox_coordinator_key_config__mutmut_32(
    api: PrivacySandboxAPI,
    coordinator_origin: str,
    key_config: str,
    browser_context_id: BrowserContextID | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Configures encryption keys used with a given privacy sandbox API to talk
    to a trusted coordinator.  Since this is intended for test automation only,
    coordinatorOrigin must be a .test domain. No existing coordinator
    configuration for the origin may exist.

    :param api:
    :param coordinator_origin:
    :param key_config:
    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.
    """
    params: T_JSON_DICT = {}
    params["api"] = api.to_json()
    params["coordinatorOrigin"] = coordinator_origin
    params["keyConfig"] = key_config
    if browser_context_id is not None:
        params["browserContextId"] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Browser.addPrivacySandboxCoordinatorKeyConfig",
        "Params": params,
    }
    yield cmd_dict

x_add_privacy_sandbox_coordinator_key_config__mutmut_mutants : ClassVar[MutantDict] = {
'x_add_privacy_sandbox_coordinator_key_config__mutmut_1': x_add_privacy_sandbox_coordinator_key_config__mutmut_1, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_2': x_add_privacy_sandbox_coordinator_key_config__mutmut_2, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_3': x_add_privacy_sandbox_coordinator_key_config__mutmut_3, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_4': x_add_privacy_sandbox_coordinator_key_config__mutmut_4, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_5': x_add_privacy_sandbox_coordinator_key_config__mutmut_5, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_6': x_add_privacy_sandbox_coordinator_key_config__mutmut_6, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_7': x_add_privacy_sandbox_coordinator_key_config__mutmut_7, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_8': x_add_privacy_sandbox_coordinator_key_config__mutmut_8, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_9': x_add_privacy_sandbox_coordinator_key_config__mutmut_9, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_10': x_add_privacy_sandbox_coordinator_key_config__mutmut_10, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_11': x_add_privacy_sandbox_coordinator_key_config__mutmut_11, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_12': x_add_privacy_sandbox_coordinator_key_config__mutmut_12, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_13': x_add_privacy_sandbox_coordinator_key_config__mutmut_13, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_14': x_add_privacy_sandbox_coordinator_key_config__mutmut_14, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_15': x_add_privacy_sandbox_coordinator_key_config__mutmut_15, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_16': x_add_privacy_sandbox_coordinator_key_config__mutmut_16, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_17': x_add_privacy_sandbox_coordinator_key_config__mutmut_17, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_18': x_add_privacy_sandbox_coordinator_key_config__mutmut_18, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_19': x_add_privacy_sandbox_coordinator_key_config__mutmut_19, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_20': x_add_privacy_sandbox_coordinator_key_config__mutmut_20, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_21': x_add_privacy_sandbox_coordinator_key_config__mutmut_21, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_22': x_add_privacy_sandbox_coordinator_key_config__mutmut_22, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_23': x_add_privacy_sandbox_coordinator_key_config__mutmut_23, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_24': x_add_privacy_sandbox_coordinator_key_config__mutmut_24, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_25': x_add_privacy_sandbox_coordinator_key_config__mutmut_25, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_26': x_add_privacy_sandbox_coordinator_key_config__mutmut_26, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_27': x_add_privacy_sandbox_coordinator_key_config__mutmut_27, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_28': x_add_privacy_sandbox_coordinator_key_config__mutmut_28, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_29': x_add_privacy_sandbox_coordinator_key_config__mutmut_29, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_30': x_add_privacy_sandbox_coordinator_key_config__mutmut_30, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_31': x_add_privacy_sandbox_coordinator_key_config__mutmut_31, 
    'x_add_privacy_sandbox_coordinator_key_config__mutmut_32': x_add_privacy_sandbox_coordinator_key_config__mutmut_32
}

def add_privacy_sandbox_coordinator_key_config(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_add_privacy_sandbox_coordinator_key_config__mutmut_orig, x_add_privacy_sandbox_coordinator_key_config__mutmut_mutants, args, kwargs)
    return result 

add_privacy_sandbox_coordinator_key_config.__signature__ = _mutmut_signature(x_add_privacy_sandbox_coordinator_key_config__mutmut_orig)
x_add_privacy_sandbox_coordinator_key_config__mutmut_orig.__name__ = 'x_add_privacy_sandbox_coordinator_key_config'


@event_class("Browser.downloadWillBegin")
@dataclass
class DownloadWillBegin:
    """
    **EXPERIMENTAL**

    Fired when page is about to start a download.
    """
    #: Id of the frame that caused the download to begin.
    frame_id: page.FrameId
    #: Global unique identifier of the download.
    guid: str
    #: URL of the resource being downloaded.
    url: str
    #: Suggested file name of the resource (the actual name of the file saved on disk may differ).
    suggested_filename: str

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DownloadWillBegin:
        return cls(
            frame_id=page.FrameId.from_json(json["frameId"]),
            guid=str(json["guid"]),
            url=str(json["url"]),
            suggested_filename=str(json["suggestedFilename"]),
        )


@event_class("Browser.downloadProgress")
@dataclass
class DownloadProgress:
    """
    **EXPERIMENTAL**

    Fired when download makes progress. Last call has ``done`` == true.
    """
    #: Global unique identifier of the download.
    guid: str
    #: Total expected bytes to download.
    total_bytes: float
    #: Total bytes received.
    received_bytes: float
    #: Download status.
    state: str

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DownloadProgress:
        return cls(
            guid=str(json["guid"]),
            total_bytes=float(json["totalBytes"]),
            received_bytes=float(json["receivedBytes"]),
            state=str(json["state"]),
        )
