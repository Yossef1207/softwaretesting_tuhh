# DO NOT EDIT THIS FILE!
#
# This file is generated from the CDP specification. If you need to make
# changes, edit the generator and regenerate all modules.
#
# CDP version: v0.0.1438564
# CDP domain: Emulation

from __future__ import annotations

import enum
from collections.abc import Generator
from dataclasses import dataclass
from typing import Any

import streamlink.webbrowser.cdp.devtools.dom as dom
import streamlink.webbrowser.cdp.devtools.network as network
import streamlink.webbrowser.cdp.devtools.page as page
from streamlink.webbrowser.cdp.devtools.util import T_JSON_DICT, event_class
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):
    """Forward call to original or mutated function, depending on the environment"""
    import os
    mutant_under_test = os.environ['MUTANT_UNDER_TEST']
    if mutant_under_test == 'fail':
        from mutmut.__main__ import MutmutProgrammaticFailException
        raise MutmutProgrammaticFailException('Failed programmatically')      
    elif mutant_under_test == 'stats':
        from mutmut.__main__ import record_trampoline_hit
        record_trampoline_hit(orig.__module__ + '.' + orig.__name__)
        result = orig(*call_args, **call_kwargs)
        return result  # for the yield case
    prefix = orig.__module__ + '.' + orig.__name__ + '__mutmut_'
    if not mutant_under_test.startswith(prefix):
        result = orig(*call_args, **call_kwargs)
        return result  # for the yield case
    mutant_name = mutant_under_test.rpartition('.')[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = mutants[mutant_name](*call_args, **call_kwargs)
    return result
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_yield_from_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):
    """Forward call to original or mutated function, depending on the environment"""
    import os
    mutant_under_test = os.environ['MUTANT_UNDER_TEST']
    if mutant_under_test == 'fail':
        from mutmut.__main__ import MutmutProgrammaticFailException
        raise MutmutProgrammaticFailException('Failed programmatically')      
    elif mutant_under_test == 'stats':
        from mutmut.__main__ import record_trampoline_hit
        record_trampoline_hit(orig.__module__ + '.' + orig.__name__)
        result = yield from orig(*call_args, **call_kwargs)
        return result  # for the yield case
    prefix = orig.__module__ + '.' + orig.__name__ + '__mutmut_'
    if not mutant_under_test.startswith(prefix):
        result = yield from orig(*call_args, **call_kwargs)
        return result  # for the yield case
    mutant_name = mutant_under_test.rpartition('.')[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = yield from mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = yield from mutants[mutant_name](*call_args, **call_kwargs)
    return result


@dataclass
class SafeAreaInsets:
    #: Overrides safe-area-inset-top.
    top: int | None = None

    #: Overrides safe-area-max-inset-top.
    top_max: int | None = None

    #: Overrides safe-area-inset-left.
    left: int | None = None

    #: Overrides safe-area-max-inset-left.
    left_max: int | None = None

    #: Overrides safe-area-inset-bottom.
    bottom: int | None = None

    #: Overrides safe-area-max-inset-bottom.
    bottom_max: int | None = None

    #: Overrides safe-area-inset-right.
    right: int | None = None

    #: Overrides safe-area-max-inset-right.
    right_max: int | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        if self.top is not None:
            json["top"] = self.top
        if self.top_max is not None:
            json["topMax"] = self.top_max
        if self.left is not None:
            json["left"] = self.left
        if self.left_max is not None:
            json["leftMax"] = self.left_max
        if self.bottom is not None:
            json["bottom"] = self.bottom
        if self.bottom_max is not None:
            json["bottomMax"] = self.bottom_max
        if self.right is not None:
            json["right"] = self.right
        if self.right_max is not None:
            json["rightMax"] = self.right_max
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SafeAreaInsets:
        return cls(
            top=int(json["top"]) if "top" in json else None,
            top_max=int(json["topMax"]) if "topMax" in json else None,
            left=int(json["left"]) if "left" in json else None,
            left_max=int(json["leftMax"]) if "leftMax" in json else None,
            bottom=int(json["bottom"]) if "bottom" in json else None,
            bottom_max=int(json["bottomMax"]) if "bottomMax" in json else None,
            right=int(json["right"]) if "right" in json else None,
            right_max=int(json["rightMax"]) if "rightMax" in json else None,
        )


@dataclass
class ScreenOrientation:
    """
    Screen orientation.
    """
    #: Orientation type.
    type_: str

    #: Orientation angle.
    angle: int

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["type"] = self.type_
        json["angle"] = self.angle
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> ScreenOrientation:
        return cls(
            type_=str(json["type"]),
            angle=int(json["angle"]),
        )


@dataclass
class DisplayFeature:
    #: Orientation of a display feature in relation to screen
    orientation: str

    #: The offset from the screen origin in either the x (for vertical
    #: orientation) or y (for horizontal orientation) direction.
    offset: int

    #: A display feature may mask content such that it is not physically
    #: displayed - this length along with the offset describes this area.
    #: A display feature that only splits content will have a 0 mask_length.
    mask_length: int

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["orientation"] = self.orientation
        json["offset"] = self.offset
        json["maskLength"] = self.mask_length
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DisplayFeature:
        return cls(
            orientation=str(json["orientation"]),
            offset=int(json["offset"]),
            mask_length=int(json["maskLength"]),
        )


@dataclass
class DevicePosture:
    #: Current posture of the device
    type_: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["type"] = self.type_
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> DevicePosture:
        return cls(
            type_=str(json["type"]),
        )


@dataclass
class MediaFeature:
    name: str

    value: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["name"] = self.name
        json["value"] = self.value
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> MediaFeature:
        return cls(
            name=str(json["name"]),
            value=str(json["value"]),
        )


class VirtualTimePolicy(enum.Enum):
    """
    advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to
    allow the next delayed task (if any) to run; pause: The virtual time base may not advance;
    pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending
    resource fetches.
    """
    ADVANCE = "advance"
    PAUSE = "pause"
    PAUSE_IF_NETWORK_FETCHES_PENDING = "pauseIfNetworkFetchesPending"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> VirtualTimePolicy:
        return cls(json)


@dataclass
class UserAgentBrandVersion:
    """
    Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints
    """
    brand: str

    version: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["brand"] = self.brand
        json["version"] = self.version
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> UserAgentBrandVersion:
        return cls(
            brand=str(json["brand"]),
            version=str(json["version"]),
        )


@dataclass
class UserAgentMetadata:
    """
    Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints
    Missing optional values will be filled in by the target with what it would normally use.
    """
    platform: str

    platform_version: str

    architecture: str

    model: str

    mobile: bool

    #: Brands appearing in Sec-CH-UA.
    brands: list[UserAgentBrandVersion] | None = None

    #: Brands appearing in Sec-CH-UA-Full-Version-List.
    full_version_list: list[UserAgentBrandVersion] | None = None

    full_version: str | None = None

    bitness: str | None = None

    wow64: bool | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["platform"] = self.platform
        json["platformVersion"] = self.platform_version
        json["architecture"] = self.architecture
        json["model"] = self.model
        json["mobile"] = self.mobile
        if self.brands is not None:
            json["brands"] = [i.to_json() for i in self.brands]
        if self.full_version_list is not None:
            json["fullVersionList"] = [i.to_json() for i in self.full_version_list]
        if self.full_version is not None:
            json["fullVersion"] = self.full_version
        if self.bitness is not None:
            json["bitness"] = self.bitness
        if self.wow64 is not None:
            json["wow64"] = self.wow64
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> UserAgentMetadata:
        return cls(
            platform=str(json["platform"]),
            platform_version=str(json["platformVersion"]),
            architecture=str(json["architecture"]),
            model=str(json["model"]),
            mobile=bool(json["mobile"]),
            brands=[UserAgentBrandVersion.from_json(i) for i in json["brands"]] if "brands" in json else None,
            full_version_list=[UserAgentBrandVersion.from_json(i) for i in json["fullVersionList"]] if "fullVersionList" in json else None,
            full_version=str(json["fullVersion"]) if "fullVersion" in json else None,
            bitness=str(json["bitness"]) if "bitness" in json else None,
            wow64=bool(json["wow64"]) if "wow64" in json else None,
        )


class SensorType(enum.Enum):
    """
    Used to specify sensor types to emulate.
    See https://w3c.github.io/sensors/#automation for more information.
    """
    ABSOLUTE_ORIENTATION = "absolute-orientation"
    ACCELEROMETER = "accelerometer"
    AMBIENT_LIGHT = "ambient-light"
    GRAVITY = "gravity"
    GYROSCOPE = "gyroscope"
    LINEAR_ACCELERATION = "linear-acceleration"
    MAGNETOMETER = "magnetometer"
    RELATIVE_ORIENTATION = "relative-orientation"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> SensorType:
        return cls(json)


@dataclass
class SensorMetadata:
    available: bool | None = None

    minimum_frequency: float | None = None

    maximum_frequency: float | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        if self.available is not None:
            json["available"] = self.available
        if self.minimum_frequency is not None:
            json["minimumFrequency"] = self.minimum_frequency
        if self.maximum_frequency is not None:
            json["maximumFrequency"] = self.maximum_frequency
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorMetadata:
        return cls(
            available=bool(json["available"]) if "available" in json else None,
            minimum_frequency=float(json["minimumFrequency"]) if "minimumFrequency" in json else None,
            maximum_frequency=float(json["maximumFrequency"]) if "maximumFrequency" in json else None,
        )


@dataclass
class SensorReadingSingle:
    value: float

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["value"] = self.value
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingSingle:
        return cls(
            value=float(json["value"]),
        )


@dataclass
class SensorReadingXYZ:
    x: float

    y: float

    z: float

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["x"] = self.x
        json["y"] = self.y
        json["z"] = self.z
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingXYZ:
        return cls(
            x=float(json["x"]),
            y=float(json["y"]),
            z=float(json["z"]),
        )


@dataclass
class SensorReadingQuaternion:
    x: float

    y: float

    z: float

    w: float

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["x"] = self.x
        json["y"] = self.y
        json["z"] = self.z
        json["w"] = self.w
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReadingQuaternion:
        return cls(
            x=float(json["x"]),
            y=float(json["y"]),
            z=float(json["z"]),
            w=float(json["w"]),
        )


@dataclass
class SensorReading:
    single: SensorReadingSingle | None = None

    xyz: SensorReadingXYZ | None = None

    quaternion: SensorReadingQuaternion | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        if self.single is not None:
            json["single"] = self.single.to_json()
        if self.xyz is not None:
            json["xyz"] = self.xyz.to_json()
        if self.quaternion is not None:
            json["quaternion"] = self.quaternion.to_json()
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SensorReading:
        return cls(
            single=SensorReadingSingle.from_json(json["single"]) if "single" in json else None,
            xyz=SensorReadingXYZ.from_json(json["xyz"]) if "xyz" in json else None,
            quaternion=SensorReadingQuaternion.from_json(json["quaternion"]) if "quaternion" in json else None,
        )


class PressureSource(enum.Enum):
    CPU = "cpu"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> PressureSource:
        return cls(json)


class PressureState(enum.Enum):
    NOMINAL = "nominal"
    FAIR = "fair"
    SERIOUS = "serious"
    CRITICAL = "critical"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> PressureState:
        return cls(json)


@dataclass
class PressureMetadata:
    available: bool | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        if self.available is not None:
            json["available"] = self.available
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> PressureMetadata:
        return cls(
            available=bool(json["available"]) if "available" in json else None,
        )


class DisabledImageType(enum.Enum):
    """
    Enum of image types that can be disabled.
    """
    AVIF = "avif"
    WEBP = "webp"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> DisabledImageType:
        return cls(json)


def x_can_emulate__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.canEmulate",
    }
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.canEmulate",
    }
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.canEmulate",
    }
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.canEmulate",
    }
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.canEmulateXX",
    }
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.canemulate",
    }
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.CANEMULATE",
    }
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.canemulate",
    }
    json = yield cmd_dict
    return bool(json["result"])


def x_can_emulate__mutmut_9() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.canEmulate",
    }
    json = None
    return bool(json["result"])


def x_can_emulate__mutmut_10() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.canEmulate",
    }
    json = yield cmd_dict
    return bool(None)


def x_can_emulate__mutmut_11() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.canEmulate",
    }
    json = yield cmd_dict
    return bool(json["XXresultXX"])


def x_can_emulate__mutmut_12() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.canEmulate",
    }
    json = yield cmd_dict
    return bool(json["RESULT"])


def x_can_emulate__mutmut_13() -> Generator[T_JSON_DICT, T_JSON_DICT, bool]:
    """
    Tells whether emulation is supported.

    :returns: True if emulation is supported.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.canEmulate",
    }
    json = yield cmd_dict
    return bool(json["Result"])

x_can_emulate__mutmut_mutants : ClassVar[MutantDict] = {
'x_can_emulate__mutmut_1': x_can_emulate__mutmut_1, 
    'x_can_emulate__mutmut_2': x_can_emulate__mutmut_2, 
    'x_can_emulate__mutmut_3': x_can_emulate__mutmut_3, 
    'x_can_emulate__mutmut_4': x_can_emulate__mutmut_4, 
    'x_can_emulate__mutmut_5': x_can_emulate__mutmut_5, 
    'x_can_emulate__mutmut_6': x_can_emulate__mutmut_6, 
    'x_can_emulate__mutmut_7': x_can_emulate__mutmut_7, 
    'x_can_emulate__mutmut_8': x_can_emulate__mutmut_8, 
    'x_can_emulate__mutmut_9': x_can_emulate__mutmut_9, 
    'x_can_emulate__mutmut_10': x_can_emulate__mutmut_10, 
    'x_can_emulate__mutmut_11': x_can_emulate__mutmut_11, 
    'x_can_emulate__mutmut_12': x_can_emulate__mutmut_12, 
    'x_can_emulate__mutmut_13': x_can_emulate__mutmut_13
}

def can_emulate(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_can_emulate__mutmut_orig, x_can_emulate__mutmut_mutants, args, kwargs)
    return result 

can_emulate.__signature__ = _mutmut_signature(x_can_emulate__mutmut_orig)
x_can_emulate__mutmut_orig.__name__ = 'x_can_emulate'


def x_clear_device_metrics_override__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.clearDeviceMetricsOverride",
    }
    yield cmd_dict


def x_clear_device_metrics_override__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_clear_device_metrics_override__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.clearDeviceMetricsOverride",
    }
    yield cmd_dict


def x_clear_device_metrics_override__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.clearDeviceMetricsOverride",
    }
    yield cmd_dict


def x_clear_device_metrics_override__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.clearDeviceMetricsOverride",
    }
    yield cmd_dict


def x_clear_device_metrics_override__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.clearDeviceMetricsOverrideXX",
    }
    yield cmd_dict


def x_clear_device_metrics_override__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.cleardevicemetricsoverride",
    }
    yield cmd_dict


def x_clear_device_metrics_override__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.CLEARDEVICEMETRICSOVERRIDE",
    }
    yield cmd_dict


def x_clear_device_metrics_override__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden device metrics.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.cleardevicemetricsoverride",
    }
    yield cmd_dict

x_clear_device_metrics_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_clear_device_metrics_override__mutmut_1': x_clear_device_metrics_override__mutmut_1, 
    'x_clear_device_metrics_override__mutmut_2': x_clear_device_metrics_override__mutmut_2, 
    'x_clear_device_metrics_override__mutmut_3': x_clear_device_metrics_override__mutmut_3, 
    'x_clear_device_metrics_override__mutmut_4': x_clear_device_metrics_override__mutmut_4, 
    'x_clear_device_metrics_override__mutmut_5': x_clear_device_metrics_override__mutmut_5, 
    'x_clear_device_metrics_override__mutmut_6': x_clear_device_metrics_override__mutmut_6, 
    'x_clear_device_metrics_override__mutmut_7': x_clear_device_metrics_override__mutmut_7, 
    'x_clear_device_metrics_override__mutmut_8': x_clear_device_metrics_override__mutmut_8
}

def clear_device_metrics_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_clear_device_metrics_override__mutmut_orig, x_clear_device_metrics_override__mutmut_mutants, args, kwargs)
    return result 

clear_device_metrics_override.__signature__ = _mutmut_signature(x_clear_device_metrics_override__mutmut_orig)
x_clear_device_metrics_override__mutmut_orig.__name__ = 'x_clear_device_metrics_override'


def x_clear_geolocation_override__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.clearGeolocationOverride",
    }
    yield cmd_dict


def x_clear_geolocation_override__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_clear_geolocation_override__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.clearGeolocationOverride",
    }
    yield cmd_dict


def x_clear_geolocation_override__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.clearGeolocationOverride",
    }
    yield cmd_dict


def x_clear_geolocation_override__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.clearGeolocationOverride",
    }
    yield cmd_dict


def x_clear_geolocation_override__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.clearGeolocationOverrideXX",
    }
    yield cmd_dict


def x_clear_geolocation_override__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.cleargeolocationoverride",
    }
    yield cmd_dict


def x_clear_geolocation_override__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.CLEARGEOLOCATIONOVERRIDE",
    }
    yield cmd_dict


def x_clear_geolocation_override__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the overridden Geolocation Position and Error.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.cleargeolocationoverride",
    }
    yield cmd_dict

x_clear_geolocation_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_clear_geolocation_override__mutmut_1': x_clear_geolocation_override__mutmut_1, 
    'x_clear_geolocation_override__mutmut_2': x_clear_geolocation_override__mutmut_2, 
    'x_clear_geolocation_override__mutmut_3': x_clear_geolocation_override__mutmut_3, 
    'x_clear_geolocation_override__mutmut_4': x_clear_geolocation_override__mutmut_4, 
    'x_clear_geolocation_override__mutmut_5': x_clear_geolocation_override__mutmut_5, 
    'x_clear_geolocation_override__mutmut_6': x_clear_geolocation_override__mutmut_6, 
    'x_clear_geolocation_override__mutmut_7': x_clear_geolocation_override__mutmut_7, 
    'x_clear_geolocation_override__mutmut_8': x_clear_geolocation_override__mutmut_8
}

def clear_geolocation_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_clear_geolocation_override__mutmut_orig, x_clear_geolocation_override__mutmut_mutants, args, kwargs)
    return result 

clear_geolocation_override.__signature__ = _mutmut_signature(x_clear_geolocation_override__mutmut_orig)
x_clear_geolocation_override__mutmut_orig.__name__ = 'x_clear_geolocation_override'


def x_reset_page_scale_factor__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.resetPageScaleFactor",
    }
    yield cmd_dict


def x_reset_page_scale_factor__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_reset_page_scale_factor__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.resetPageScaleFactor",
    }
    yield cmd_dict


def x_reset_page_scale_factor__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.resetPageScaleFactor",
    }
    yield cmd_dict


def x_reset_page_scale_factor__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.resetPageScaleFactor",
    }
    yield cmd_dict


def x_reset_page_scale_factor__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.resetPageScaleFactorXX",
    }
    yield cmd_dict


def x_reset_page_scale_factor__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.resetpagescalefactor",
    }
    yield cmd_dict


def x_reset_page_scale_factor__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.RESETPAGESCALEFACTOR",
    }
    yield cmd_dict


def x_reset_page_scale_factor__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Requests that page scale factor is reset to initial values.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.resetpagescalefactor",
    }
    yield cmd_dict

x_reset_page_scale_factor__mutmut_mutants : ClassVar[MutantDict] = {
'x_reset_page_scale_factor__mutmut_1': x_reset_page_scale_factor__mutmut_1, 
    'x_reset_page_scale_factor__mutmut_2': x_reset_page_scale_factor__mutmut_2, 
    'x_reset_page_scale_factor__mutmut_3': x_reset_page_scale_factor__mutmut_3, 
    'x_reset_page_scale_factor__mutmut_4': x_reset_page_scale_factor__mutmut_4, 
    'x_reset_page_scale_factor__mutmut_5': x_reset_page_scale_factor__mutmut_5, 
    'x_reset_page_scale_factor__mutmut_6': x_reset_page_scale_factor__mutmut_6, 
    'x_reset_page_scale_factor__mutmut_7': x_reset_page_scale_factor__mutmut_7, 
    'x_reset_page_scale_factor__mutmut_8': x_reset_page_scale_factor__mutmut_8
}

def reset_page_scale_factor(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_reset_page_scale_factor__mutmut_orig, x_reset_page_scale_factor__mutmut_mutants, args, kwargs)
    return result 

reset_page_scale_factor.__signature__ = _mutmut_signature(x_reset_page_scale_factor__mutmut_orig)
x_reset_page_scale_factor__mutmut_orig.__name__ = 'x_reset_page_scale_factor'


def x_set_focus_emulation_enabled__mutmut_orig(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_1(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = None
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_2(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_3(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["XXenabledXX"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_4(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["ENABLED"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_5(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["Enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_6(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_7(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_8(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_9(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setFocusEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_10(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setFocusEmulationEnabledXX",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_11(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setfocusemulationenabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_12(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETFOCUSEMULATIONENABLED",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_13(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setfocusemulationenabled",
        "params": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_14(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_15(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_focus_emulation_enabled__mutmut_16(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables or disables simulating a focused and active page.

    **EXPERIMENTAL**

    :param enabled: Whether to enable to disable focus emulation.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setFocusEmulationEnabled",
        "Params": params,
    }
    yield cmd_dict

x_set_focus_emulation_enabled__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_focus_emulation_enabled__mutmut_1': x_set_focus_emulation_enabled__mutmut_1, 
    'x_set_focus_emulation_enabled__mutmut_2': x_set_focus_emulation_enabled__mutmut_2, 
    'x_set_focus_emulation_enabled__mutmut_3': x_set_focus_emulation_enabled__mutmut_3, 
    'x_set_focus_emulation_enabled__mutmut_4': x_set_focus_emulation_enabled__mutmut_4, 
    'x_set_focus_emulation_enabled__mutmut_5': x_set_focus_emulation_enabled__mutmut_5, 
    'x_set_focus_emulation_enabled__mutmut_6': x_set_focus_emulation_enabled__mutmut_6, 
    'x_set_focus_emulation_enabled__mutmut_7': x_set_focus_emulation_enabled__mutmut_7, 
    'x_set_focus_emulation_enabled__mutmut_8': x_set_focus_emulation_enabled__mutmut_8, 
    'x_set_focus_emulation_enabled__mutmut_9': x_set_focus_emulation_enabled__mutmut_9, 
    'x_set_focus_emulation_enabled__mutmut_10': x_set_focus_emulation_enabled__mutmut_10, 
    'x_set_focus_emulation_enabled__mutmut_11': x_set_focus_emulation_enabled__mutmut_11, 
    'x_set_focus_emulation_enabled__mutmut_12': x_set_focus_emulation_enabled__mutmut_12, 
    'x_set_focus_emulation_enabled__mutmut_13': x_set_focus_emulation_enabled__mutmut_13, 
    'x_set_focus_emulation_enabled__mutmut_14': x_set_focus_emulation_enabled__mutmut_14, 
    'x_set_focus_emulation_enabled__mutmut_15': x_set_focus_emulation_enabled__mutmut_15, 
    'x_set_focus_emulation_enabled__mutmut_16': x_set_focus_emulation_enabled__mutmut_16
}

def set_focus_emulation_enabled(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_focus_emulation_enabled__mutmut_orig, x_set_focus_emulation_enabled__mutmut_mutants, args, kwargs)
    return result 

set_focus_emulation_enabled.__signature__ = _mutmut_signature(x_set_focus_emulation_enabled__mutmut_orig)
x_set_focus_emulation_enabled__mutmut_orig.__name__ = 'x_set_focus_emulation_enabled'


def x_set_auto_dark_mode_override__mutmut_orig(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_1(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = None
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_2(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_3(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_4(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["XXenabledXX"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_5(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["ENABLED"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_6(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["Enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_7(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_8(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_9(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_10(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setAutoDarkModeOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_11(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setAutoDarkModeOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_12(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setautodarkmodeoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_13(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETAUTODARKMODEOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_14(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setautodarkmodeoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_15(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_16(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_auto_dark_mode_override__mutmut_17(
    enabled: bool | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Automatically render all web contents using a dark theme.

    **EXPERIMENTAL**

    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if enabled is not None:
        params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutoDarkModeOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_auto_dark_mode_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_auto_dark_mode_override__mutmut_1': x_set_auto_dark_mode_override__mutmut_1, 
    'x_set_auto_dark_mode_override__mutmut_2': x_set_auto_dark_mode_override__mutmut_2, 
    'x_set_auto_dark_mode_override__mutmut_3': x_set_auto_dark_mode_override__mutmut_3, 
    'x_set_auto_dark_mode_override__mutmut_4': x_set_auto_dark_mode_override__mutmut_4, 
    'x_set_auto_dark_mode_override__mutmut_5': x_set_auto_dark_mode_override__mutmut_5, 
    'x_set_auto_dark_mode_override__mutmut_6': x_set_auto_dark_mode_override__mutmut_6, 
    'x_set_auto_dark_mode_override__mutmut_7': x_set_auto_dark_mode_override__mutmut_7, 
    'x_set_auto_dark_mode_override__mutmut_8': x_set_auto_dark_mode_override__mutmut_8, 
    'x_set_auto_dark_mode_override__mutmut_9': x_set_auto_dark_mode_override__mutmut_9, 
    'x_set_auto_dark_mode_override__mutmut_10': x_set_auto_dark_mode_override__mutmut_10, 
    'x_set_auto_dark_mode_override__mutmut_11': x_set_auto_dark_mode_override__mutmut_11, 
    'x_set_auto_dark_mode_override__mutmut_12': x_set_auto_dark_mode_override__mutmut_12, 
    'x_set_auto_dark_mode_override__mutmut_13': x_set_auto_dark_mode_override__mutmut_13, 
    'x_set_auto_dark_mode_override__mutmut_14': x_set_auto_dark_mode_override__mutmut_14, 
    'x_set_auto_dark_mode_override__mutmut_15': x_set_auto_dark_mode_override__mutmut_15, 
    'x_set_auto_dark_mode_override__mutmut_16': x_set_auto_dark_mode_override__mutmut_16, 
    'x_set_auto_dark_mode_override__mutmut_17': x_set_auto_dark_mode_override__mutmut_17
}

def set_auto_dark_mode_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_auto_dark_mode_override__mutmut_orig, x_set_auto_dark_mode_override__mutmut_mutants, args, kwargs)
    return result 

set_auto_dark_mode_override.__signature__ = _mutmut_signature(x_set_auto_dark_mode_override__mutmut_orig)
x_set_auto_dark_mode_override__mutmut_orig.__name__ = 'x_set_auto_dark_mode_override'


def x_set_cpu_throttling_rate__mutmut_orig(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_1(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = None
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_2(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_3(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["XXrateXX"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_4(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["RATE"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_5(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["Rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_6(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_7(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_8(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_9(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setCPUThrottlingRate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_10(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setCPUThrottlingRateXX",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_11(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setcputhrottlingrate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_12(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETCPUTHROTTLINGRATE",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_13(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setcputhrottlingrate",
        "params": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_14(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_15(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_cpu_throttling_rate__mutmut_16(
    rate: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables CPU throttling to emulate slow CPUs.

    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """
    params: T_JSON_DICT = {}
    params["rate"] = rate
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setCPUThrottlingRate",
        "Params": params,
    }
    yield cmd_dict

x_set_cpu_throttling_rate__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_cpu_throttling_rate__mutmut_1': x_set_cpu_throttling_rate__mutmut_1, 
    'x_set_cpu_throttling_rate__mutmut_2': x_set_cpu_throttling_rate__mutmut_2, 
    'x_set_cpu_throttling_rate__mutmut_3': x_set_cpu_throttling_rate__mutmut_3, 
    'x_set_cpu_throttling_rate__mutmut_4': x_set_cpu_throttling_rate__mutmut_4, 
    'x_set_cpu_throttling_rate__mutmut_5': x_set_cpu_throttling_rate__mutmut_5, 
    'x_set_cpu_throttling_rate__mutmut_6': x_set_cpu_throttling_rate__mutmut_6, 
    'x_set_cpu_throttling_rate__mutmut_7': x_set_cpu_throttling_rate__mutmut_7, 
    'x_set_cpu_throttling_rate__mutmut_8': x_set_cpu_throttling_rate__mutmut_8, 
    'x_set_cpu_throttling_rate__mutmut_9': x_set_cpu_throttling_rate__mutmut_9, 
    'x_set_cpu_throttling_rate__mutmut_10': x_set_cpu_throttling_rate__mutmut_10, 
    'x_set_cpu_throttling_rate__mutmut_11': x_set_cpu_throttling_rate__mutmut_11, 
    'x_set_cpu_throttling_rate__mutmut_12': x_set_cpu_throttling_rate__mutmut_12, 
    'x_set_cpu_throttling_rate__mutmut_13': x_set_cpu_throttling_rate__mutmut_13, 
    'x_set_cpu_throttling_rate__mutmut_14': x_set_cpu_throttling_rate__mutmut_14, 
    'x_set_cpu_throttling_rate__mutmut_15': x_set_cpu_throttling_rate__mutmut_15, 
    'x_set_cpu_throttling_rate__mutmut_16': x_set_cpu_throttling_rate__mutmut_16
}

def set_cpu_throttling_rate(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_cpu_throttling_rate__mutmut_orig, x_set_cpu_throttling_rate__mutmut_mutants, args, kwargs)
    return result 

set_cpu_throttling_rate.__signature__ = _mutmut_signature(x_set_cpu_throttling_rate__mutmut_orig)
x_set_cpu_throttling_rate__mutmut_orig.__name__ = 'x_set_cpu_throttling_rate'


def x_set_default_background_color_override__mutmut_orig(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_1(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = None
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_2(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_3(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_4(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["XXcolorXX"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_5(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["COLOR"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_6(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["Color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_7(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_default_background_color_override__mutmut_8(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_9(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_10(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setDefaultBackgroundColorOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_11(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setDefaultBackgroundColorOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_12(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setdefaultbackgroundcoloroverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_13(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETDEFAULTBACKGROUNDCOLOROVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_14(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setdefaultbackgroundcoloroverride",
        "params": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_15(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_16(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_default_background_color_override__mutmut_17(
    color: dom.RGBA | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.

    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.
    """
    params: T_JSON_DICT = {}
    if color is not None:
        params["color"] = color.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDefaultBackgroundColorOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_default_background_color_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_default_background_color_override__mutmut_1': x_set_default_background_color_override__mutmut_1, 
    'x_set_default_background_color_override__mutmut_2': x_set_default_background_color_override__mutmut_2, 
    'x_set_default_background_color_override__mutmut_3': x_set_default_background_color_override__mutmut_3, 
    'x_set_default_background_color_override__mutmut_4': x_set_default_background_color_override__mutmut_4, 
    'x_set_default_background_color_override__mutmut_5': x_set_default_background_color_override__mutmut_5, 
    'x_set_default_background_color_override__mutmut_6': x_set_default_background_color_override__mutmut_6, 
    'x_set_default_background_color_override__mutmut_7': x_set_default_background_color_override__mutmut_7, 
    'x_set_default_background_color_override__mutmut_8': x_set_default_background_color_override__mutmut_8, 
    'x_set_default_background_color_override__mutmut_9': x_set_default_background_color_override__mutmut_9, 
    'x_set_default_background_color_override__mutmut_10': x_set_default_background_color_override__mutmut_10, 
    'x_set_default_background_color_override__mutmut_11': x_set_default_background_color_override__mutmut_11, 
    'x_set_default_background_color_override__mutmut_12': x_set_default_background_color_override__mutmut_12, 
    'x_set_default_background_color_override__mutmut_13': x_set_default_background_color_override__mutmut_13, 
    'x_set_default_background_color_override__mutmut_14': x_set_default_background_color_override__mutmut_14, 
    'x_set_default_background_color_override__mutmut_15': x_set_default_background_color_override__mutmut_15, 
    'x_set_default_background_color_override__mutmut_16': x_set_default_background_color_override__mutmut_16, 
    'x_set_default_background_color_override__mutmut_17': x_set_default_background_color_override__mutmut_17
}

def set_default_background_color_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_default_background_color_override__mutmut_orig, x_set_default_background_color_override__mutmut_mutants, args, kwargs)
    return result 

set_default_background_color_override.__signature__ = _mutmut_signature(x_set_default_background_color_override__mutmut_orig)
x_set_default_background_color_override__mutmut_orig.__name__ = 'x_set_default_background_color_override'


def x_set_safe_area_insets_override__mutmut_orig(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_1(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = None
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_2(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_3(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["XXinsetsXX"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_4(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["INSETS"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_5(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["Insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_6(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_7(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_8(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_9(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setSafeAreaInsetsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_10(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setSafeAreaInsetsOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_11(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setsafeareainsetsoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_12(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETSAFEAREAINSETSOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_13(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setsafeareainsetsoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_14(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_15(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_safe_area_insets_override__mutmut_16(
    insets: SafeAreaInsets,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values for env(safe-area-inset-*) and env(safe-area-max-inset-*). Unset values will cause the
    respective variables to be undefined, even if previously overridden.

    **EXPERIMENTAL**

    :param insets:
    """
    params: T_JSON_DICT = {}
    params["insets"] = insets.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSafeAreaInsetsOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_safe_area_insets_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_safe_area_insets_override__mutmut_1': x_set_safe_area_insets_override__mutmut_1, 
    'x_set_safe_area_insets_override__mutmut_2': x_set_safe_area_insets_override__mutmut_2, 
    'x_set_safe_area_insets_override__mutmut_3': x_set_safe_area_insets_override__mutmut_3, 
    'x_set_safe_area_insets_override__mutmut_4': x_set_safe_area_insets_override__mutmut_4, 
    'x_set_safe_area_insets_override__mutmut_5': x_set_safe_area_insets_override__mutmut_5, 
    'x_set_safe_area_insets_override__mutmut_6': x_set_safe_area_insets_override__mutmut_6, 
    'x_set_safe_area_insets_override__mutmut_7': x_set_safe_area_insets_override__mutmut_7, 
    'x_set_safe_area_insets_override__mutmut_8': x_set_safe_area_insets_override__mutmut_8, 
    'x_set_safe_area_insets_override__mutmut_9': x_set_safe_area_insets_override__mutmut_9, 
    'x_set_safe_area_insets_override__mutmut_10': x_set_safe_area_insets_override__mutmut_10, 
    'x_set_safe_area_insets_override__mutmut_11': x_set_safe_area_insets_override__mutmut_11, 
    'x_set_safe_area_insets_override__mutmut_12': x_set_safe_area_insets_override__mutmut_12, 
    'x_set_safe_area_insets_override__mutmut_13': x_set_safe_area_insets_override__mutmut_13, 
    'x_set_safe_area_insets_override__mutmut_14': x_set_safe_area_insets_override__mutmut_14, 
    'x_set_safe_area_insets_override__mutmut_15': x_set_safe_area_insets_override__mutmut_15, 
    'x_set_safe_area_insets_override__mutmut_16': x_set_safe_area_insets_override__mutmut_16
}

def set_safe_area_insets_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_safe_area_insets_override__mutmut_orig, x_set_safe_area_insets_override__mutmut_mutants, args, kwargs)
    return result 

set_safe_area_insets_override.__signature__ = _mutmut_signature(x_set_safe_area_insets_override__mutmut_orig)
x_set_safe_area_insets_override__mutmut_orig.__name__ = 'x_set_safe_area_insets_override'


def x_set_device_metrics_override__mutmut_orig(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_1(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = None
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_2(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = None
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_3(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["XXwidthXX"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_4(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["WIDTH"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_5(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["Width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_6(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = None
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_7(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["XXheightXX"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_8(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["HEIGHT"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_9(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["Height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_10(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = None
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_11(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["XXdeviceScaleFactorXX"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_12(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["devicescalefactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_13(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["DEVICESCALEFACTOR"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_14(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["Devicescalefactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_15(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = None
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_16(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["XXmobileXX"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_17(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["MOBILE"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_18(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["Mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_19(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_20(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = None
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_21(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["XXscaleXX"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_22(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["SCALE"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_23(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["Scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_24(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_25(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = None
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_26(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["XXscreenWidthXX"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_27(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenwidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_28(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["SCREENWIDTH"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_29(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["Screenwidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_30(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_31(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = None
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_32(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["XXscreenHeightXX"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_33(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenheight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_34(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["SCREENHEIGHT"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_35(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["Screenheight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_36(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_37(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = None
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_38(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["XXpositionXXX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_39(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionx"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_40(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["POSITIONX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_41(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["Positionx"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_42(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_43(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = None
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_44(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["XXpositionYXX"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_45(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positiony"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_46(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["POSITIONY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_47(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["Positiony"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_48(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_49(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = None
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_50(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["XXdontSetVisibleSizeXX"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_51(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontsetvisiblesize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_52(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["DONTSETVISIBLESIZE"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_53(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["Dontsetvisiblesize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_54(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_55(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = None
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_56(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["XXscreenOrientationXX"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_57(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenorientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_58(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["SCREENORIENTATION"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_59(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["Screenorientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_60(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_61(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = None
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_62(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["XXviewportXX"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_63(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["VIEWPORT"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_64(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["Viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_65(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_66(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = None
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_67(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["XXdisplayFeatureXX"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_68(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayfeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_69(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["DISPLAYFEATURE"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_70(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["Displayfeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_71(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_72(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_73(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["XXdevicePostureXX"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_74(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["deviceposture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_75(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["DEVICEPOSTURE"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_76(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["Deviceposture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_77(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_device_metrics_override__mutmut_78(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_79(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_80(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setDeviceMetricsOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_81(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setDeviceMetricsOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_82(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setdevicemetricsoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_83(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETDEVICEMETRICSOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_84(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setdevicemetricsoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_85(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_86(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_device_metrics_override__mutmut_87(
    width: int,
    height: int,
    device_scale_factor: float,
    mobile: bool,
    scale: float | None = None,
    screen_width: int | None = None,
    screen_height: int | None = None,
    position_x: int | None = None,
    position_y: int | None = None,
    dont_set_visible_size: bool | None = None,
    screen_orientation: ScreenOrientation | None = None,
    viewport: page.Viewport | None = None,
    display_feature: DisplayFeature | None = None,
    device_posture: DevicePosture | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).

    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.
    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.
    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).
    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).
    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.
    :param screen_orientation: *(Optional)* Screen orientation override.
    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.
    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off. Deprecated, use Emulation.setDisplayFeaturesOverride.
    :param device_posture: **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    params["deviceScaleFactor"] = device_scale_factor
    params["mobile"] = mobile
    if scale is not None:
        params["scale"] = scale
    if screen_width is not None:
        params["screenWidth"] = screen_width
    if screen_height is not None:
        params["screenHeight"] = screen_height
    if position_x is not None:
        params["positionX"] = position_x
    if position_y is not None:
        params["positionY"] = position_y
    if dont_set_visible_size is not None:
        params["dontSetVisibleSize"] = dont_set_visible_size
    if screen_orientation is not None:
        params["screenOrientation"] = screen_orientation.to_json()
    if viewport is not None:
        params["viewport"] = viewport.to_json()
    if display_feature is not None:
        params["displayFeature"] = display_feature.to_json()
    if device_posture is not None:
        params["devicePosture"] = device_posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDeviceMetricsOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_device_metrics_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_device_metrics_override__mutmut_1': x_set_device_metrics_override__mutmut_1, 
    'x_set_device_metrics_override__mutmut_2': x_set_device_metrics_override__mutmut_2, 
    'x_set_device_metrics_override__mutmut_3': x_set_device_metrics_override__mutmut_3, 
    'x_set_device_metrics_override__mutmut_4': x_set_device_metrics_override__mutmut_4, 
    'x_set_device_metrics_override__mutmut_5': x_set_device_metrics_override__mutmut_5, 
    'x_set_device_metrics_override__mutmut_6': x_set_device_metrics_override__mutmut_6, 
    'x_set_device_metrics_override__mutmut_7': x_set_device_metrics_override__mutmut_7, 
    'x_set_device_metrics_override__mutmut_8': x_set_device_metrics_override__mutmut_8, 
    'x_set_device_metrics_override__mutmut_9': x_set_device_metrics_override__mutmut_9, 
    'x_set_device_metrics_override__mutmut_10': x_set_device_metrics_override__mutmut_10, 
    'x_set_device_metrics_override__mutmut_11': x_set_device_metrics_override__mutmut_11, 
    'x_set_device_metrics_override__mutmut_12': x_set_device_metrics_override__mutmut_12, 
    'x_set_device_metrics_override__mutmut_13': x_set_device_metrics_override__mutmut_13, 
    'x_set_device_metrics_override__mutmut_14': x_set_device_metrics_override__mutmut_14, 
    'x_set_device_metrics_override__mutmut_15': x_set_device_metrics_override__mutmut_15, 
    'x_set_device_metrics_override__mutmut_16': x_set_device_metrics_override__mutmut_16, 
    'x_set_device_metrics_override__mutmut_17': x_set_device_metrics_override__mutmut_17, 
    'x_set_device_metrics_override__mutmut_18': x_set_device_metrics_override__mutmut_18, 
    'x_set_device_metrics_override__mutmut_19': x_set_device_metrics_override__mutmut_19, 
    'x_set_device_metrics_override__mutmut_20': x_set_device_metrics_override__mutmut_20, 
    'x_set_device_metrics_override__mutmut_21': x_set_device_metrics_override__mutmut_21, 
    'x_set_device_metrics_override__mutmut_22': x_set_device_metrics_override__mutmut_22, 
    'x_set_device_metrics_override__mutmut_23': x_set_device_metrics_override__mutmut_23, 
    'x_set_device_metrics_override__mutmut_24': x_set_device_metrics_override__mutmut_24, 
    'x_set_device_metrics_override__mutmut_25': x_set_device_metrics_override__mutmut_25, 
    'x_set_device_metrics_override__mutmut_26': x_set_device_metrics_override__mutmut_26, 
    'x_set_device_metrics_override__mutmut_27': x_set_device_metrics_override__mutmut_27, 
    'x_set_device_metrics_override__mutmut_28': x_set_device_metrics_override__mutmut_28, 
    'x_set_device_metrics_override__mutmut_29': x_set_device_metrics_override__mutmut_29, 
    'x_set_device_metrics_override__mutmut_30': x_set_device_metrics_override__mutmut_30, 
    'x_set_device_metrics_override__mutmut_31': x_set_device_metrics_override__mutmut_31, 
    'x_set_device_metrics_override__mutmut_32': x_set_device_metrics_override__mutmut_32, 
    'x_set_device_metrics_override__mutmut_33': x_set_device_metrics_override__mutmut_33, 
    'x_set_device_metrics_override__mutmut_34': x_set_device_metrics_override__mutmut_34, 
    'x_set_device_metrics_override__mutmut_35': x_set_device_metrics_override__mutmut_35, 
    'x_set_device_metrics_override__mutmut_36': x_set_device_metrics_override__mutmut_36, 
    'x_set_device_metrics_override__mutmut_37': x_set_device_metrics_override__mutmut_37, 
    'x_set_device_metrics_override__mutmut_38': x_set_device_metrics_override__mutmut_38, 
    'x_set_device_metrics_override__mutmut_39': x_set_device_metrics_override__mutmut_39, 
    'x_set_device_metrics_override__mutmut_40': x_set_device_metrics_override__mutmut_40, 
    'x_set_device_metrics_override__mutmut_41': x_set_device_metrics_override__mutmut_41, 
    'x_set_device_metrics_override__mutmut_42': x_set_device_metrics_override__mutmut_42, 
    'x_set_device_metrics_override__mutmut_43': x_set_device_metrics_override__mutmut_43, 
    'x_set_device_metrics_override__mutmut_44': x_set_device_metrics_override__mutmut_44, 
    'x_set_device_metrics_override__mutmut_45': x_set_device_metrics_override__mutmut_45, 
    'x_set_device_metrics_override__mutmut_46': x_set_device_metrics_override__mutmut_46, 
    'x_set_device_metrics_override__mutmut_47': x_set_device_metrics_override__mutmut_47, 
    'x_set_device_metrics_override__mutmut_48': x_set_device_metrics_override__mutmut_48, 
    'x_set_device_metrics_override__mutmut_49': x_set_device_metrics_override__mutmut_49, 
    'x_set_device_metrics_override__mutmut_50': x_set_device_metrics_override__mutmut_50, 
    'x_set_device_metrics_override__mutmut_51': x_set_device_metrics_override__mutmut_51, 
    'x_set_device_metrics_override__mutmut_52': x_set_device_metrics_override__mutmut_52, 
    'x_set_device_metrics_override__mutmut_53': x_set_device_metrics_override__mutmut_53, 
    'x_set_device_metrics_override__mutmut_54': x_set_device_metrics_override__mutmut_54, 
    'x_set_device_metrics_override__mutmut_55': x_set_device_metrics_override__mutmut_55, 
    'x_set_device_metrics_override__mutmut_56': x_set_device_metrics_override__mutmut_56, 
    'x_set_device_metrics_override__mutmut_57': x_set_device_metrics_override__mutmut_57, 
    'x_set_device_metrics_override__mutmut_58': x_set_device_metrics_override__mutmut_58, 
    'x_set_device_metrics_override__mutmut_59': x_set_device_metrics_override__mutmut_59, 
    'x_set_device_metrics_override__mutmut_60': x_set_device_metrics_override__mutmut_60, 
    'x_set_device_metrics_override__mutmut_61': x_set_device_metrics_override__mutmut_61, 
    'x_set_device_metrics_override__mutmut_62': x_set_device_metrics_override__mutmut_62, 
    'x_set_device_metrics_override__mutmut_63': x_set_device_metrics_override__mutmut_63, 
    'x_set_device_metrics_override__mutmut_64': x_set_device_metrics_override__mutmut_64, 
    'x_set_device_metrics_override__mutmut_65': x_set_device_metrics_override__mutmut_65, 
    'x_set_device_metrics_override__mutmut_66': x_set_device_metrics_override__mutmut_66, 
    'x_set_device_metrics_override__mutmut_67': x_set_device_metrics_override__mutmut_67, 
    'x_set_device_metrics_override__mutmut_68': x_set_device_metrics_override__mutmut_68, 
    'x_set_device_metrics_override__mutmut_69': x_set_device_metrics_override__mutmut_69, 
    'x_set_device_metrics_override__mutmut_70': x_set_device_metrics_override__mutmut_70, 
    'x_set_device_metrics_override__mutmut_71': x_set_device_metrics_override__mutmut_71, 
    'x_set_device_metrics_override__mutmut_72': x_set_device_metrics_override__mutmut_72, 
    'x_set_device_metrics_override__mutmut_73': x_set_device_metrics_override__mutmut_73, 
    'x_set_device_metrics_override__mutmut_74': x_set_device_metrics_override__mutmut_74, 
    'x_set_device_metrics_override__mutmut_75': x_set_device_metrics_override__mutmut_75, 
    'x_set_device_metrics_override__mutmut_76': x_set_device_metrics_override__mutmut_76, 
    'x_set_device_metrics_override__mutmut_77': x_set_device_metrics_override__mutmut_77, 
    'x_set_device_metrics_override__mutmut_78': x_set_device_metrics_override__mutmut_78, 
    'x_set_device_metrics_override__mutmut_79': x_set_device_metrics_override__mutmut_79, 
    'x_set_device_metrics_override__mutmut_80': x_set_device_metrics_override__mutmut_80, 
    'x_set_device_metrics_override__mutmut_81': x_set_device_metrics_override__mutmut_81, 
    'x_set_device_metrics_override__mutmut_82': x_set_device_metrics_override__mutmut_82, 
    'x_set_device_metrics_override__mutmut_83': x_set_device_metrics_override__mutmut_83, 
    'x_set_device_metrics_override__mutmut_84': x_set_device_metrics_override__mutmut_84, 
    'x_set_device_metrics_override__mutmut_85': x_set_device_metrics_override__mutmut_85, 
    'x_set_device_metrics_override__mutmut_86': x_set_device_metrics_override__mutmut_86, 
    'x_set_device_metrics_override__mutmut_87': x_set_device_metrics_override__mutmut_87
}

def set_device_metrics_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_device_metrics_override__mutmut_orig, x_set_device_metrics_override__mutmut_mutants, args, kwargs)
    return result 

set_device_metrics_override.__signature__ = _mutmut_signature(x_set_device_metrics_override__mutmut_orig)
x_set_device_metrics_override__mutmut_orig.__name__ = 'x_set_device_metrics_override'


def x_set_device_posture_override__mutmut_orig(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_1(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = None
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_2(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_3(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["XXpostureXX"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_4(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["POSTURE"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_5(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["Posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_6(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_device_posture_override__mutmut_7(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_8(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_9(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setDevicePostureOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_10(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setDevicePostureOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_11(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setdevicepostureoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_12(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETDEVICEPOSTUREOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_13(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setdevicepostureoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_14(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_15(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_device_posture_override__mutmut_16(
    posture: DevicePosture,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param posture:
    """
    params: T_JSON_DICT = {}
    params["posture"] = posture.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDevicePostureOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_device_posture_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_device_posture_override__mutmut_1': x_set_device_posture_override__mutmut_1, 
    'x_set_device_posture_override__mutmut_2': x_set_device_posture_override__mutmut_2, 
    'x_set_device_posture_override__mutmut_3': x_set_device_posture_override__mutmut_3, 
    'x_set_device_posture_override__mutmut_4': x_set_device_posture_override__mutmut_4, 
    'x_set_device_posture_override__mutmut_5': x_set_device_posture_override__mutmut_5, 
    'x_set_device_posture_override__mutmut_6': x_set_device_posture_override__mutmut_6, 
    'x_set_device_posture_override__mutmut_7': x_set_device_posture_override__mutmut_7, 
    'x_set_device_posture_override__mutmut_8': x_set_device_posture_override__mutmut_8, 
    'x_set_device_posture_override__mutmut_9': x_set_device_posture_override__mutmut_9, 
    'x_set_device_posture_override__mutmut_10': x_set_device_posture_override__mutmut_10, 
    'x_set_device_posture_override__mutmut_11': x_set_device_posture_override__mutmut_11, 
    'x_set_device_posture_override__mutmut_12': x_set_device_posture_override__mutmut_12, 
    'x_set_device_posture_override__mutmut_13': x_set_device_posture_override__mutmut_13, 
    'x_set_device_posture_override__mutmut_14': x_set_device_posture_override__mutmut_14, 
    'x_set_device_posture_override__mutmut_15': x_set_device_posture_override__mutmut_15, 
    'x_set_device_posture_override__mutmut_16': x_set_device_posture_override__mutmut_16
}

def set_device_posture_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_device_posture_override__mutmut_orig, x_set_device_posture_override__mutmut_mutants, args, kwargs)
    return result 

set_device_posture_override.__signature__ = _mutmut_signature(x_set_device_posture_override__mutmut_orig)
x_set_device_posture_override__mutmut_orig.__name__ = 'x_set_device_posture_override'


def x_clear_device_posture_override__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.clearDevicePostureOverride",
    }
    yield cmd_dict


def x_clear_device_posture_override__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_clear_device_posture_override__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.clearDevicePostureOverride",
    }
    yield cmd_dict


def x_clear_device_posture_override__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.clearDevicePostureOverride",
    }
    yield cmd_dict


def x_clear_device_posture_override__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.clearDevicePostureOverride",
    }
    yield cmd_dict


def x_clear_device_posture_override__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.clearDevicePostureOverrideXX",
    }
    yield cmd_dict


def x_clear_device_posture_override__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.cleardevicepostureoverride",
    }
    yield cmd_dict


def x_clear_device_posture_override__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.CLEARDEVICEPOSTUREOVERRIDE",
    }
    yield cmd_dict


def x_clear_device_posture_override__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.cleardevicepostureoverride",
    }
    yield cmd_dict

x_clear_device_posture_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_clear_device_posture_override__mutmut_1': x_clear_device_posture_override__mutmut_1, 
    'x_clear_device_posture_override__mutmut_2': x_clear_device_posture_override__mutmut_2, 
    'x_clear_device_posture_override__mutmut_3': x_clear_device_posture_override__mutmut_3, 
    'x_clear_device_posture_override__mutmut_4': x_clear_device_posture_override__mutmut_4, 
    'x_clear_device_posture_override__mutmut_5': x_clear_device_posture_override__mutmut_5, 
    'x_clear_device_posture_override__mutmut_6': x_clear_device_posture_override__mutmut_6, 
    'x_clear_device_posture_override__mutmut_7': x_clear_device_posture_override__mutmut_7, 
    'x_clear_device_posture_override__mutmut_8': x_clear_device_posture_override__mutmut_8
}

def clear_device_posture_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_clear_device_posture_override__mutmut_orig, x_clear_device_posture_override__mutmut_mutants, args, kwargs)
    return result 

clear_device_posture_override.__signature__ = _mutmut_signature(x_clear_device_posture_override__mutmut_orig)
x_clear_device_posture_override__mutmut_orig.__name__ = 'x_clear_device_posture_override'


def x_set_display_features_override__mutmut_orig(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_1(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = None
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_2(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_3(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["XXfeaturesXX"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_4(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["FEATURES"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_5(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["Features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_6(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_display_features_override__mutmut_7(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_8(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_9(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setDisplayFeaturesOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_10(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setDisplayFeaturesOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_11(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setdisplayfeaturesoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_12(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETDISPLAYFEATURESOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_13(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setdisplayfeaturesoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_14(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_15(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_display_features_override__mutmut_16(
    features: list[DisplayFeature],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Start using the given display features to pupulate the Viewport Segments API.
    This override can also be set in setDeviceMetricsOverride().

    **EXPERIMENTAL**

    :param features:
    """
    params: T_JSON_DICT = {}
    params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisplayFeaturesOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_display_features_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_display_features_override__mutmut_1': x_set_display_features_override__mutmut_1, 
    'x_set_display_features_override__mutmut_2': x_set_display_features_override__mutmut_2, 
    'x_set_display_features_override__mutmut_3': x_set_display_features_override__mutmut_3, 
    'x_set_display_features_override__mutmut_4': x_set_display_features_override__mutmut_4, 
    'x_set_display_features_override__mutmut_5': x_set_display_features_override__mutmut_5, 
    'x_set_display_features_override__mutmut_6': x_set_display_features_override__mutmut_6, 
    'x_set_display_features_override__mutmut_7': x_set_display_features_override__mutmut_7, 
    'x_set_display_features_override__mutmut_8': x_set_display_features_override__mutmut_8, 
    'x_set_display_features_override__mutmut_9': x_set_display_features_override__mutmut_9, 
    'x_set_display_features_override__mutmut_10': x_set_display_features_override__mutmut_10, 
    'x_set_display_features_override__mutmut_11': x_set_display_features_override__mutmut_11, 
    'x_set_display_features_override__mutmut_12': x_set_display_features_override__mutmut_12, 
    'x_set_display_features_override__mutmut_13': x_set_display_features_override__mutmut_13, 
    'x_set_display_features_override__mutmut_14': x_set_display_features_override__mutmut_14, 
    'x_set_display_features_override__mutmut_15': x_set_display_features_override__mutmut_15, 
    'x_set_display_features_override__mutmut_16': x_set_display_features_override__mutmut_16
}

def set_display_features_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_display_features_override__mutmut_orig, x_set_display_features_override__mutmut_mutants, args, kwargs)
    return result 

set_display_features_override.__signature__ = _mutmut_signature(x_set_display_features_override__mutmut_orig)
x_set_display_features_override__mutmut_orig.__name__ = 'x_set_display_features_override'


def x_clear_display_features_override__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.clearDisplayFeaturesOverride",
    }
    yield cmd_dict


def x_clear_display_features_override__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_clear_display_features_override__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.clearDisplayFeaturesOverride",
    }
    yield cmd_dict


def x_clear_display_features_override__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.clearDisplayFeaturesOverride",
    }
    yield cmd_dict


def x_clear_display_features_override__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.clearDisplayFeaturesOverride",
    }
    yield cmd_dict


def x_clear_display_features_override__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.clearDisplayFeaturesOverrideXX",
    }
    yield cmd_dict


def x_clear_display_features_override__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.cleardisplayfeaturesoverride",
    }
    yield cmd_dict


def x_clear_display_features_override__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.CLEARDISPLAYFEATURESOVERRIDE",
    }
    yield cmd_dict


def x_clear_display_features_override__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears the display features override set with either setDeviceMetricsOverride()
    or setDisplayFeaturesOverride() and starts using display features from the
    platform again.
    Does nothing if no override is set.

    **EXPERIMENTAL**
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.cleardisplayfeaturesoverride",
    }
    yield cmd_dict

x_clear_display_features_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_clear_display_features_override__mutmut_1': x_clear_display_features_override__mutmut_1, 
    'x_clear_display_features_override__mutmut_2': x_clear_display_features_override__mutmut_2, 
    'x_clear_display_features_override__mutmut_3': x_clear_display_features_override__mutmut_3, 
    'x_clear_display_features_override__mutmut_4': x_clear_display_features_override__mutmut_4, 
    'x_clear_display_features_override__mutmut_5': x_clear_display_features_override__mutmut_5, 
    'x_clear_display_features_override__mutmut_6': x_clear_display_features_override__mutmut_6, 
    'x_clear_display_features_override__mutmut_7': x_clear_display_features_override__mutmut_7, 
    'x_clear_display_features_override__mutmut_8': x_clear_display_features_override__mutmut_8
}

def clear_display_features_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_clear_display_features_override__mutmut_orig, x_clear_display_features_override__mutmut_mutants, args, kwargs)
    return result 

clear_display_features_override.__signature__ = _mutmut_signature(x_clear_display_features_override__mutmut_orig)
x_clear_display_features_override__mutmut_orig.__name__ = 'x_clear_display_features_override'


def x_set_scrollbars_hidden__mutmut_orig(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_1(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = None
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_2(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_3(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["XXhiddenXX"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_4(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["HIDDEN"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_5(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["Hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_6(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_7(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_8(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_9(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setScrollbarsHidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_10(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setScrollbarsHiddenXX",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_11(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setscrollbarshidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_12(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETSCROLLBARSHIDDEN",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_13(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setscrollbarshidden",
        "params": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_14(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_15(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_scrollbars_hidden__mutmut_16(
    hidden: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hidden: Whether scrollbars should be always hidden.
    """
    params: T_JSON_DICT = {}
    params["hidden"] = hidden
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScrollbarsHidden",
        "Params": params,
    }
    yield cmd_dict

x_set_scrollbars_hidden__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_scrollbars_hidden__mutmut_1': x_set_scrollbars_hidden__mutmut_1, 
    'x_set_scrollbars_hidden__mutmut_2': x_set_scrollbars_hidden__mutmut_2, 
    'x_set_scrollbars_hidden__mutmut_3': x_set_scrollbars_hidden__mutmut_3, 
    'x_set_scrollbars_hidden__mutmut_4': x_set_scrollbars_hidden__mutmut_4, 
    'x_set_scrollbars_hidden__mutmut_5': x_set_scrollbars_hidden__mutmut_5, 
    'x_set_scrollbars_hidden__mutmut_6': x_set_scrollbars_hidden__mutmut_6, 
    'x_set_scrollbars_hidden__mutmut_7': x_set_scrollbars_hidden__mutmut_7, 
    'x_set_scrollbars_hidden__mutmut_8': x_set_scrollbars_hidden__mutmut_8, 
    'x_set_scrollbars_hidden__mutmut_9': x_set_scrollbars_hidden__mutmut_9, 
    'x_set_scrollbars_hidden__mutmut_10': x_set_scrollbars_hidden__mutmut_10, 
    'x_set_scrollbars_hidden__mutmut_11': x_set_scrollbars_hidden__mutmut_11, 
    'x_set_scrollbars_hidden__mutmut_12': x_set_scrollbars_hidden__mutmut_12, 
    'x_set_scrollbars_hidden__mutmut_13': x_set_scrollbars_hidden__mutmut_13, 
    'x_set_scrollbars_hidden__mutmut_14': x_set_scrollbars_hidden__mutmut_14, 
    'x_set_scrollbars_hidden__mutmut_15': x_set_scrollbars_hidden__mutmut_15, 
    'x_set_scrollbars_hidden__mutmut_16': x_set_scrollbars_hidden__mutmut_16
}

def set_scrollbars_hidden(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_scrollbars_hidden__mutmut_orig, x_set_scrollbars_hidden__mutmut_mutants, args, kwargs)
    return result 

set_scrollbars_hidden.__signature__ = _mutmut_signature(x_set_scrollbars_hidden__mutmut_orig)
x_set_scrollbars_hidden__mutmut_orig.__name__ = 'x_set_scrollbars_hidden'


def x_set_document_cookie_disabled__mutmut_orig(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_1(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = None
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_2(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_3(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["XXdisabledXX"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_4(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["DISABLED"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_5(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["Disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_6(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_7(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_8(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_9(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setDocumentCookieDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_10(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setDocumentCookieDisabledXX",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_11(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setdocumentcookiedisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_12(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETDOCUMENTCOOKIEDISABLED",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_13(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setdocumentcookiedisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_14(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_15(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_document_cookie_disabled__mutmut_16(
    disabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param disabled: Whether document.coookie API should be disabled.
    """
    params: T_JSON_DICT = {}
    params["disabled"] = disabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDocumentCookieDisabled",
        "Params": params,
    }
    yield cmd_dict

x_set_document_cookie_disabled__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_document_cookie_disabled__mutmut_1': x_set_document_cookie_disabled__mutmut_1, 
    'x_set_document_cookie_disabled__mutmut_2': x_set_document_cookie_disabled__mutmut_2, 
    'x_set_document_cookie_disabled__mutmut_3': x_set_document_cookie_disabled__mutmut_3, 
    'x_set_document_cookie_disabled__mutmut_4': x_set_document_cookie_disabled__mutmut_4, 
    'x_set_document_cookie_disabled__mutmut_5': x_set_document_cookie_disabled__mutmut_5, 
    'x_set_document_cookie_disabled__mutmut_6': x_set_document_cookie_disabled__mutmut_6, 
    'x_set_document_cookie_disabled__mutmut_7': x_set_document_cookie_disabled__mutmut_7, 
    'x_set_document_cookie_disabled__mutmut_8': x_set_document_cookie_disabled__mutmut_8, 
    'x_set_document_cookie_disabled__mutmut_9': x_set_document_cookie_disabled__mutmut_9, 
    'x_set_document_cookie_disabled__mutmut_10': x_set_document_cookie_disabled__mutmut_10, 
    'x_set_document_cookie_disabled__mutmut_11': x_set_document_cookie_disabled__mutmut_11, 
    'x_set_document_cookie_disabled__mutmut_12': x_set_document_cookie_disabled__mutmut_12, 
    'x_set_document_cookie_disabled__mutmut_13': x_set_document_cookie_disabled__mutmut_13, 
    'x_set_document_cookie_disabled__mutmut_14': x_set_document_cookie_disabled__mutmut_14, 
    'x_set_document_cookie_disabled__mutmut_15': x_set_document_cookie_disabled__mutmut_15, 
    'x_set_document_cookie_disabled__mutmut_16': x_set_document_cookie_disabled__mutmut_16
}

def set_document_cookie_disabled(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_document_cookie_disabled__mutmut_orig, x_set_document_cookie_disabled__mutmut_mutants, args, kwargs)
    return result 

set_document_cookie_disabled.__signature__ = _mutmut_signature(x_set_document_cookie_disabled__mutmut_orig)
x_set_document_cookie_disabled__mutmut_orig.__name__ = 'x_set_document_cookie_disabled'


def x_set_emit_touch_events_for_mouse__mutmut_orig(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_1(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = None
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_2(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = None
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_3(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["XXenabledXX"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_4(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["ENABLED"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_5(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["Enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_6(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_7(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_8(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["XXconfigurationXX"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_9(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["CONFIGURATION"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_10(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["Configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_11(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_12(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_13(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_14(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setEmitTouchEventsForMouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_15(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setEmitTouchEventsForMouseXX",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_16(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setemittoucheventsformouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_17(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETEMITTOUCHEVENTSFORMOUSE",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_18(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setemittoucheventsformouse",
        "params": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_19(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_20(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_emit_touch_events_for_mouse__mutmut_21(
    enabled: bool,
    configuration: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param enabled: Whether touch emulation based on mouse input should be enabled.
    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if configuration is not None:
        params["configuration"] = configuration
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmitTouchEventsForMouse",
        "Params": params,
    }
    yield cmd_dict

x_set_emit_touch_events_for_mouse__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_emit_touch_events_for_mouse__mutmut_1': x_set_emit_touch_events_for_mouse__mutmut_1, 
    'x_set_emit_touch_events_for_mouse__mutmut_2': x_set_emit_touch_events_for_mouse__mutmut_2, 
    'x_set_emit_touch_events_for_mouse__mutmut_3': x_set_emit_touch_events_for_mouse__mutmut_3, 
    'x_set_emit_touch_events_for_mouse__mutmut_4': x_set_emit_touch_events_for_mouse__mutmut_4, 
    'x_set_emit_touch_events_for_mouse__mutmut_5': x_set_emit_touch_events_for_mouse__mutmut_5, 
    'x_set_emit_touch_events_for_mouse__mutmut_6': x_set_emit_touch_events_for_mouse__mutmut_6, 
    'x_set_emit_touch_events_for_mouse__mutmut_7': x_set_emit_touch_events_for_mouse__mutmut_7, 
    'x_set_emit_touch_events_for_mouse__mutmut_8': x_set_emit_touch_events_for_mouse__mutmut_8, 
    'x_set_emit_touch_events_for_mouse__mutmut_9': x_set_emit_touch_events_for_mouse__mutmut_9, 
    'x_set_emit_touch_events_for_mouse__mutmut_10': x_set_emit_touch_events_for_mouse__mutmut_10, 
    'x_set_emit_touch_events_for_mouse__mutmut_11': x_set_emit_touch_events_for_mouse__mutmut_11, 
    'x_set_emit_touch_events_for_mouse__mutmut_12': x_set_emit_touch_events_for_mouse__mutmut_12, 
    'x_set_emit_touch_events_for_mouse__mutmut_13': x_set_emit_touch_events_for_mouse__mutmut_13, 
    'x_set_emit_touch_events_for_mouse__mutmut_14': x_set_emit_touch_events_for_mouse__mutmut_14, 
    'x_set_emit_touch_events_for_mouse__mutmut_15': x_set_emit_touch_events_for_mouse__mutmut_15, 
    'x_set_emit_touch_events_for_mouse__mutmut_16': x_set_emit_touch_events_for_mouse__mutmut_16, 
    'x_set_emit_touch_events_for_mouse__mutmut_17': x_set_emit_touch_events_for_mouse__mutmut_17, 
    'x_set_emit_touch_events_for_mouse__mutmut_18': x_set_emit_touch_events_for_mouse__mutmut_18, 
    'x_set_emit_touch_events_for_mouse__mutmut_19': x_set_emit_touch_events_for_mouse__mutmut_19, 
    'x_set_emit_touch_events_for_mouse__mutmut_20': x_set_emit_touch_events_for_mouse__mutmut_20, 
    'x_set_emit_touch_events_for_mouse__mutmut_21': x_set_emit_touch_events_for_mouse__mutmut_21
}

def set_emit_touch_events_for_mouse(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_emit_touch_events_for_mouse__mutmut_orig, x_set_emit_touch_events_for_mouse__mutmut_mutants, args, kwargs)
    return result 

set_emit_touch_events_for_mouse.__signature__ = _mutmut_signature(x_set_emit_touch_events_for_mouse__mutmut_orig)
x_set_emit_touch_events_for_mouse__mutmut_orig.__name__ = 'x_set_emit_touch_events_for_mouse'


def x_set_emulated_media__mutmut_orig(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_1(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = None
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_2(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_3(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = None
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_4(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["XXmediaXX"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_5(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["MEDIA"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_6(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["Media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_7(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_8(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_9(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["XXfeaturesXX"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_10(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["FEATURES"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_11(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["Features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_12(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_emulated_media__mutmut_13(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_14(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_15(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setEmulatedMedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_16(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setEmulatedMediaXX",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_17(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setemulatedmedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_18(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETEMULATEDMEDIA",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_19(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setemulatedmedia",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_20(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_21(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_emulated_media__mutmut_22(
    media: str | None = None,
    features: list[MediaFeature] | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given media type or media feature for CSS media queries.

    :param media: *(Optional)* Media type to emulate. Empty string disables the override.
    :param features: *(Optional)* Media features to emulate.
    """
    params: T_JSON_DICT = {}
    if media is not None:
        params["media"] = media
    if features is not None:
        params["features"] = [i.to_json() for i in features]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedMedia",
        "Params": params,
    }
    yield cmd_dict

x_set_emulated_media__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_emulated_media__mutmut_1': x_set_emulated_media__mutmut_1, 
    'x_set_emulated_media__mutmut_2': x_set_emulated_media__mutmut_2, 
    'x_set_emulated_media__mutmut_3': x_set_emulated_media__mutmut_3, 
    'x_set_emulated_media__mutmut_4': x_set_emulated_media__mutmut_4, 
    'x_set_emulated_media__mutmut_5': x_set_emulated_media__mutmut_5, 
    'x_set_emulated_media__mutmut_6': x_set_emulated_media__mutmut_6, 
    'x_set_emulated_media__mutmut_7': x_set_emulated_media__mutmut_7, 
    'x_set_emulated_media__mutmut_8': x_set_emulated_media__mutmut_8, 
    'x_set_emulated_media__mutmut_9': x_set_emulated_media__mutmut_9, 
    'x_set_emulated_media__mutmut_10': x_set_emulated_media__mutmut_10, 
    'x_set_emulated_media__mutmut_11': x_set_emulated_media__mutmut_11, 
    'x_set_emulated_media__mutmut_12': x_set_emulated_media__mutmut_12, 
    'x_set_emulated_media__mutmut_13': x_set_emulated_media__mutmut_13, 
    'x_set_emulated_media__mutmut_14': x_set_emulated_media__mutmut_14, 
    'x_set_emulated_media__mutmut_15': x_set_emulated_media__mutmut_15, 
    'x_set_emulated_media__mutmut_16': x_set_emulated_media__mutmut_16, 
    'x_set_emulated_media__mutmut_17': x_set_emulated_media__mutmut_17, 
    'x_set_emulated_media__mutmut_18': x_set_emulated_media__mutmut_18, 
    'x_set_emulated_media__mutmut_19': x_set_emulated_media__mutmut_19, 
    'x_set_emulated_media__mutmut_20': x_set_emulated_media__mutmut_20, 
    'x_set_emulated_media__mutmut_21': x_set_emulated_media__mutmut_21, 
    'x_set_emulated_media__mutmut_22': x_set_emulated_media__mutmut_22
}

def set_emulated_media(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_emulated_media__mutmut_orig, x_set_emulated_media__mutmut_mutants, args, kwargs)
    return result 

set_emulated_media.__signature__ = _mutmut_signature(x_set_emulated_media__mutmut_orig)
x_set_emulated_media__mutmut_orig.__name__ = 'x_set_emulated_media'


def x_set_emulated_vision_deficiency__mutmut_orig(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_1(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = None
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_2(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_3(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["XXtypeXX"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_4(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["TYPE"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_5(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["Type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_6(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_7(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_8(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_9(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setEmulatedVisionDeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_10(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setEmulatedVisionDeficiencyXX",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_11(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setemulatedvisiondeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_12(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETEMULATEDVISIONDEFICIENCY",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_13(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setemulatedvisiondeficiency",
        "params": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_14(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_15(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_emulated_vision_deficiency__mutmut_16(
    type_: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Emulates the given vision deficiency.

    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.
    """
    params: T_JSON_DICT = {}
    params["type"] = type_
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setEmulatedVisionDeficiency",
        "Params": params,
    }
    yield cmd_dict

x_set_emulated_vision_deficiency__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_emulated_vision_deficiency__mutmut_1': x_set_emulated_vision_deficiency__mutmut_1, 
    'x_set_emulated_vision_deficiency__mutmut_2': x_set_emulated_vision_deficiency__mutmut_2, 
    'x_set_emulated_vision_deficiency__mutmut_3': x_set_emulated_vision_deficiency__mutmut_3, 
    'x_set_emulated_vision_deficiency__mutmut_4': x_set_emulated_vision_deficiency__mutmut_4, 
    'x_set_emulated_vision_deficiency__mutmut_5': x_set_emulated_vision_deficiency__mutmut_5, 
    'x_set_emulated_vision_deficiency__mutmut_6': x_set_emulated_vision_deficiency__mutmut_6, 
    'x_set_emulated_vision_deficiency__mutmut_7': x_set_emulated_vision_deficiency__mutmut_7, 
    'x_set_emulated_vision_deficiency__mutmut_8': x_set_emulated_vision_deficiency__mutmut_8, 
    'x_set_emulated_vision_deficiency__mutmut_9': x_set_emulated_vision_deficiency__mutmut_9, 
    'x_set_emulated_vision_deficiency__mutmut_10': x_set_emulated_vision_deficiency__mutmut_10, 
    'x_set_emulated_vision_deficiency__mutmut_11': x_set_emulated_vision_deficiency__mutmut_11, 
    'x_set_emulated_vision_deficiency__mutmut_12': x_set_emulated_vision_deficiency__mutmut_12, 
    'x_set_emulated_vision_deficiency__mutmut_13': x_set_emulated_vision_deficiency__mutmut_13, 
    'x_set_emulated_vision_deficiency__mutmut_14': x_set_emulated_vision_deficiency__mutmut_14, 
    'x_set_emulated_vision_deficiency__mutmut_15': x_set_emulated_vision_deficiency__mutmut_15, 
    'x_set_emulated_vision_deficiency__mutmut_16': x_set_emulated_vision_deficiency__mutmut_16
}

def set_emulated_vision_deficiency(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_emulated_vision_deficiency__mutmut_orig, x_set_emulated_vision_deficiency__mutmut_mutants, args, kwargs)
    return result 

set_emulated_vision_deficiency.__signature__ = _mutmut_signature(x_set_emulated_vision_deficiency__mutmut_orig)
x_set_emulated_vision_deficiency__mutmut_orig.__name__ = 'x_set_emulated_vision_deficiency'


def x_set_geolocation_override__mutmut_orig(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_1(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = None
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_2(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_3(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = None
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_4(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["XXlatitudeXX"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_5(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["LATITUDE"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_6(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["Latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_7(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_8(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = None
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_9(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["XXlongitudeXX"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_10(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["LONGITUDE"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_11(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["Longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_12(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_13(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_14(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["XXaccuracyXX"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_15(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["ACCURACY"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_16(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["Accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_17(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_geolocation_override__mutmut_18(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_19(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_20(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setGeolocationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_21(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setGeolocationOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_22(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setgeolocationoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_23(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETGEOLOCATIONOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_24(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setgeolocationoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_25(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_26(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_geolocation_override__mutmut_27(
    latitude: float | None = None,
    longitude: float | None = None,
    accuracy: float | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.

    :param latitude: *(Optional)* Mock latitude
    :param longitude: *(Optional)* Mock longitude
    :param accuracy: *(Optional)* Mock accuracy
    """
    params: T_JSON_DICT = {}
    if latitude is not None:
        params["latitude"] = latitude
    if longitude is not None:
        params["longitude"] = longitude
    if accuracy is not None:
        params["accuracy"] = accuracy
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setGeolocationOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_geolocation_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_geolocation_override__mutmut_1': x_set_geolocation_override__mutmut_1, 
    'x_set_geolocation_override__mutmut_2': x_set_geolocation_override__mutmut_2, 
    'x_set_geolocation_override__mutmut_3': x_set_geolocation_override__mutmut_3, 
    'x_set_geolocation_override__mutmut_4': x_set_geolocation_override__mutmut_4, 
    'x_set_geolocation_override__mutmut_5': x_set_geolocation_override__mutmut_5, 
    'x_set_geolocation_override__mutmut_6': x_set_geolocation_override__mutmut_6, 
    'x_set_geolocation_override__mutmut_7': x_set_geolocation_override__mutmut_7, 
    'x_set_geolocation_override__mutmut_8': x_set_geolocation_override__mutmut_8, 
    'x_set_geolocation_override__mutmut_9': x_set_geolocation_override__mutmut_9, 
    'x_set_geolocation_override__mutmut_10': x_set_geolocation_override__mutmut_10, 
    'x_set_geolocation_override__mutmut_11': x_set_geolocation_override__mutmut_11, 
    'x_set_geolocation_override__mutmut_12': x_set_geolocation_override__mutmut_12, 
    'x_set_geolocation_override__mutmut_13': x_set_geolocation_override__mutmut_13, 
    'x_set_geolocation_override__mutmut_14': x_set_geolocation_override__mutmut_14, 
    'x_set_geolocation_override__mutmut_15': x_set_geolocation_override__mutmut_15, 
    'x_set_geolocation_override__mutmut_16': x_set_geolocation_override__mutmut_16, 
    'x_set_geolocation_override__mutmut_17': x_set_geolocation_override__mutmut_17, 
    'x_set_geolocation_override__mutmut_18': x_set_geolocation_override__mutmut_18, 
    'x_set_geolocation_override__mutmut_19': x_set_geolocation_override__mutmut_19, 
    'x_set_geolocation_override__mutmut_20': x_set_geolocation_override__mutmut_20, 
    'x_set_geolocation_override__mutmut_21': x_set_geolocation_override__mutmut_21, 
    'x_set_geolocation_override__mutmut_22': x_set_geolocation_override__mutmut_22, 
    'x_set_geolocation_override__mutmut_23': x_set_geolocation_override__mutmut_23, 
    'x_set_geolocation_override__mutmut_24': x_set_geolocation_override__mutmut_24, 
    'x_set_geolocation_override__mutmut_25': x_set_geolocation_override__mutmut_25, 
    'x_set_geolocation_override__mutmut_26': x_set_geolocation_override__mutmut_26, 
    'x_set_geolocation_override__mutmut_27': x_set_geolocation_override__mutmut_27
}

def set_geolocation_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_geolocation_override__mutmut_orig, x_set_geolocation_override__mutmut_mutants, args, kwargs)
    return result 

set_geolocation_override.__signature__ = _mutmut_signature(x_set_geolocation_override__mutmut_orig)
x_set_geolocation_override__mutmut_orig.__name__ = 'x_set_geolocation_override'


def x_get_overridden_sensor_information__mutmut_orig(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_1(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = None
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_2(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_3(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["XXtypeXX"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_4(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["TYPE"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_5(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["Type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_6(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_7(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_8(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_9(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_10(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.getOverriddenSensorInformationXX",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_11(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.getoverriddensensorinformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_12(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.GETOVERRIDDENSENSORINFORMATION",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_13(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getoverriddensensorinformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_14(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "XXparamsXX": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_15(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "PARAMS": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_16(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "Params": params,
    }
    json = yield cmd_dict
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_17(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = None
    return float(json["requestedSamplingFrequency"])


def x_get_overridden_sensor_information__mutmut_18(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(None)


def x_get_overridden_sensor_information__mutmut_19(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["XXrequestedSamplingFrequencyXX"])


def x_get_overridden_sensor_information__mutmut_20(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["requestedsamplingfrequency"])


def x_get_overridden_sensor_information__mutmut_21(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["REQUESTEDSAMPLINGFREQUENCY"])


def x_get_overridden_sensor_information__mutmut_22(
    type_: SensorType,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """


    **EXPERIMENTAL**

    :param type_:
    :returns:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.getOverriddenSensorInformation",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["Requestedsamplingfrequency"])

x_get_overridden_sensor_information__mutmut_mutants : ClassVar[MutantDict] = {
'x_get_overridden_sensor_information__mutmut_1': x_get_overridden_sensor_information__mutmut_1, 
    'x_get_overridden_sensor_information__mutmut_2': x_get_overridden_sensor_information__mutmut_2, 
    'x_get_overridden_sensor_information__mutmut_3': x_get_overridden_sensor_information__mutmut_3, 
    'x_get_overridden_sensor_information__mutmut_4': x_get_overridden_sensor_information__mutmut_4, 
    'x_get_overridden_sensor_information__mutmut_5': x_get_overridden_sensor_information__mutmut_5, 
    'x_get_overridden_sensor_information__mutmut_6': x_get_overridden_sensor_information__mutmut_6, 
    'x_get_overridden_sensor_information__mutmut_7': x_get_overridden_sensor_information__mutmut_7, 
    'x_get_overridden_sensor_information__mutmut_8': x_get_overridden_sensor_information__mutmut_8, 
    'x_get_overridden_sensor_information__mutmut_9': x_get_overridden_sensor_information__mutmut_9, 
    'x_get_overridden_sensor_information__mutmut_10': x_get_overridden_sensor_information__mutmut_10, 
    'x_get_overridden_sensor_information__mutmut_11': x_get_overridden_sensor_information__mutmut_11, 
    'x_get_overridden_sensor_information__mutmut_12': x_get_overridden_sensor_information__mutmut_12, 
    'x_get_overridden_sensor_information__mutmut_13': x_get_overridden_sensor_information__mutmut_13, 
    'x_get_overridden_sensor_information__mutmut_14': x_get_overridden_sensor_information__mutmut_14, 
    'x_get_overridden_sensor_information__mutmut_15': x_get_overridden_sensor_information__mutmut_15, 
    'x_get_overridden_sensor_information__mutmut_16': x_get_overridden_sensor_information__mutmut_16, 
    'x_get_overridden_sensor_information__mutmut_17': x_get_overridden_sensor_information__mutmut_17, 
    'x_get_overridden_sensor_information__mutmut_18': x_get_overridden_sensor_information__mutmut_18, 
    'x_get_overridden_sensor_information__mutmut_19': x_get_overridden_sensor_information__mutmut_19, 
    'x_get_overridden_sensor_information__mutmut_20': x_get_overridden_sensor_information__mutmut_20, 
    'x_get_overridden_sensor_information__mutmut_21': x_get_overridden_sensor_information__mutmut_21, 
    'x_get_overridden_sensor_information__mutmut_22': x_get_overridden_sensor_information__mutmut_22
}

def get_overridden_sensor_information(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_get_overridden_sensor_information__mutmut_orig, x_get_overridden_sensor_information__mutmut_mutants, args, kwargs)
    return result 

get_overridden_sensor_information.__signature__ = _mutmut_signature(x_get_overridden_sensor_information__mutmut_orig)
x_get_overridden_sensor_information__mutmut_orig.__name__ = 'x_get_overridden_sensor_information'


def x_set_sensor_override_enabled__mutmut_orig(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_1(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = None
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_2(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = None
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_3(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["XXenabledXX"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_4(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["ENABLED"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_5(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["Enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_6(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = None
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_7(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["XXtypeXX"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_8(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["TYPE"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_9(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["Type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_10(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_11(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_12(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["XXmetadataXX"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_13(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["METADATA"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_14(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["Metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_15(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_16(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_17(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_18(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setSensorOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_19(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setSensorOverrideEnabledXX",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_20(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setsensoroverrideenabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_21(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETSENSOROVERRIDEENABLED",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_22(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setsensoroverrideenabled",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_23(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_24(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_sensor_override_enabled__mutmut_25(
    enabled: bool,
    type_: SensorType,
    metadata: SensorMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.

    **EXPERIMENTAL**

    :param enabled:
    :param type_:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["type"] = type_.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideEnabled",
        "Params": params,
    }
    yield cmd_dict

x_set_sensor_override_enabled__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_sensor_override_enabled__mutmut_1': x_set_sensor_override_enabled__mutmut_1, 
    'x_set_sensor_override_enabled__mutmut_2': x_set_sensor_override_enabled__mutmut_2, 
    'x_set_sensor_override_enabled__mutmut_3': x_set_sensor_override_enabled__mutmut_3, 
    'x_set_sensor_override_enabled__mutmut_4': x_set_sensor_override_enabled__mutmut_4, 
    'x_set_sensor_override_enabled__mutmut_5': x_set_sensor_override_enabled__mutmut_5, 
    'x_set_sensor_override_enabled__mutmut_6': x_set_sensor_override_enabled__mutmut_6, 
    'x_set_sensor_override_enabled__mutmut_7': x_set_sensor_override_enabled__mutmut_7, 
    'x_set_sensor_override_enabled__mutmut_8': x_set_sensor_override_enabled__mutmut_8, 
    'x_set_sensor_override_enabled__mutmut_9': x_set_sensor_override_enabled__mutmut_9, 
    'x_set_sensor_override_enabled__mutmut_10': x_set_sensor_override_enabled__mutmut_10, 
    'x_set_sensor_override_enabled__mutmut_11': x_set_sensor_override_enabled__mutmut_11, 
    'x_set_sensor_override_enabled__mutmut_12': x_set_sensor_override_enabled__mutmut_12, 
    'x_set_sensor_override_enabled__mutmut_13': x_set_sensor_override_enabled__mutmut_13, 
    'x_set_sensor_override_enabled__mutmut_14': x_set_sensor_override_enabled__mutmut_14, 
    'x_set_sensor_override_enabled__mutmut_15': x_set_sensor_override_enabled__mutmut_15, 
    'x_set_sensor_override_enabled__mutmut_16': x_set_sensor_override_enabled__mutmut_16, 
    'x_set_sensor_override_enabled__mutmut_17': x_set_sensor_override_enabled__mutmut_17, 
    'x_set_sensor_override_enabled__mutmut_18': x_set_sensor_override_enabled__mutmut_18, 
    'x_set_sensor_override_enabled__mutmut_19': x_set_sensor_override_enabled__mutmut_19, 
    'x_set_sensor_override_enabled__mutmut_20': x_set_sensor_override_enabled__mutmut_20, 
    'x_set_sensor_override_enabled__mutmut_21': x_set_sensor_override_enabled__mutmut_21, 
    'x_set_sensor_override_enabled__mutmut_22': x_set_sensor_override_enabled__mutmut_22, 
    'x_set_sensor_override_enabled__mutmut_23': x_set_sensor_override_enabled__mutmut_23, 
    'x_set_sensor_override_enabled__mutmut_24': x_set_sensor_override_enabled__mutmut_24, 
    'x_set_sensor_override_enabled__mutmut_25': x_set_sensor_override_enabled__mutmut_25
}

def set_sensor_override_enabled(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_sensor_override_enabled__mutmut_orig, x_set_sensor_override_enabled__mutmut_mutants, args, kwargs)
    return result 

set_sensor_override_enabled.__signature__ = _mutmut_signature(x_set_sensor_override_enabled__mutmut_orig)
x_set_sensor_override_enabled__mutmut_orig.__name__ = 'x_set_sensor_override_enabled'


def x_set_sensor_override_readings__mutmut_orig(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_1(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = None
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_2(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = None
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_3(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["XXtypeXX"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_4(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["TYPE"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_5(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["Type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_6(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_7(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["XXreadingXX"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_8(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["READING"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_9(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["Reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_10(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_11(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_12(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_13(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setSensorOverrideReadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_14(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setSensorOverrideReadingsXX",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_15(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setsensoroverridereadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_16(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETSENSOROVERRIDEREADINGS",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_17(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setsensoroverridereadings",
        "params": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_18(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_19(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_sensor_override_readings__mutmut_20(
    type_: SensorType,
    reading: SensorReading,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.

    **EXPERIMENTAL**

    :param type_:
    :param reading:
    """
    params: T_JSON_DICT = {}
    params["type"] = type_.to_json()
    params["reading"] = reading.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setSensorOverrideReadings",
        "Params": params,
    }
    yield cmd_dict

x_set_sensor_override_readings__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_sensor_override_readings__mutmut_1': x_set_sensor_override_readings__mutmut_1, 
    'x_set_sensor_override_readings__mutmut_2': x_set_sensor_override_readings__mutmut_2, 
    'x_set_sensor_override_readings__mutmut_3': x_set_sensor_override_readings__mutmut_3, 
    'x_set_sensor_override_readings__mutmut_4': x_set_sensor_override_readings__mutmut_4, 
    'x_set_sensor_override_readings__mutmut_5': x_set_sensor_override_readings__mutmut_5, 
    'x_set_sensor_override_readings__mutmut_6': x_set_sensor_override_readings__mutmut_6, 
    'x_set_sensor_override_readings__mutmut_7': x_set_sensor_override_readings__mutmut_7, 
    'x_set_sensor_override_readings__mutmut_8': x_set_sensor_override_readings__mutmut_8, 
    'x_set_sensor_override_readings__mutmut_9': x_set_sensor_override_readings__mutmut_9, 
    'x_set_sensor_override_readings__mutmut_10': x_set_sensor_override_readings__mutmut_10, 
    'x_set_sensor_override_readings__mutmut_11': x_set_sensor_override_readings__mutmut_11, 
    'x_set_sensor_override_readings__mutmut_12': x_set_sensor_override_readings__mutmut_12, 
    'x_set_sensor_override_readings__mutmut_13': x_set_sensor_override_readings__mutmut_13, 
    'x_set_sensor_override_readings__mutmut_14': x_set_sensor_override_readings__mutmut_14, 
    'x_set_sensor_override_readings__mutmut_15': x_set_sensor_override_readings__mutmut_15, 
    'x_set_sensor_override_readings__mutmut_16': x_set_sensor_override_readings__mutmut_16, 
    'x_set_sensor_override_readings__mutmut_17': x_set_sensor_override_readings__mutmut_17, 
    'x_set_sensor_override_readings__mutmut_18': x_set_sensor_override_readings__mutmut_18, 
    'x_set_sensor_override_readings__mutmut_19': x_set_sensor_override_readings__mutmut_19, 
    'x_set_sensor_override_readings__mutmut_20': x_set_sensor_override_readings__mutmut_20
}

def set_sensor_override_readings(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_sensor_override_readings__mutmut_orig, x_set_sensor_override_readings__mutmut_mutants, args, kwargs)
    return result 

set_sensor_override_readings.__signature__ = _mutmut_signature(x_set_sensor_override_readings__mutmut_orig)
x_set_sensor_override_readings__mutmut_orig.__name__ = 'x_set_sensor_override_readings'


def x_set_pressure_source_override_enabled__mutmut_orig(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_1(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = None
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_2(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = None
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_3(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["XXenabledXX"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_4(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["ENABLED"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_5(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["Enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_6(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = None
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_7(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["XXsourceXX"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_8(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["SOURCE"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_9(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["Source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_10(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_11(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_12(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["XXmetadataXX"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_13(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["METADATA"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_14(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["Metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_15(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_16(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_17(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_18(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setPressureSourceOverrideEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_19(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setPressureSourceOverrideEnabledXX",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_20(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setpressuresourceoverrideenabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_21(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETPRESSURESOURCEOVERRIDEENABLED",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_22(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setpressuresourceoverrideenabled",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_23(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_24(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_pressure_source_override_enabled__mutmut_25(
    enabled: bool,
    source: PressureSource,
    metadata: PressureMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides a pressure source of a given type, as used by the Compute
    Pressure API, so that updates to PressureObserver.observe() are provided
    via setPressureStateOverride instead of being retrieved from
    platform-provided telemetry data.

    **EXPERIMENTAL**

    :param enabled:
    :param source:
    :param metadata: *(Optional)*
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    params["source"] = source.to_json()
    if metadata is not None:
        params["metadata"] = metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureSourceOverrideEnabled",
        "Params": params,
    }
    yield cmd_dict

x_set_pressure_source_override_enabled__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_pressure_source_override_enabled__mutmut_1': x_set_pressure_source_override_enabled__mutmut_1, 
    'x_set_pressure_source_override_enabled__mutmut_2': x_set_pressure_source_override_enabled__mutmut_2, 
    'x_set_pressure_source_override_enabled__mutmut_3': x_set_pressure_source_override_enabled__mutmut_3, 
    'x_set_pressure_source_override_enabled__mutmut_4': x_set_pressure_source_override_enabled__mutmut_4, 
    'x_set_pressure_source_override_enabled__mutmut_5': x_set_pressure_source_override_enabled__mutmut_5, 
    'x_set_pressure_source_override_enabled__mutmut_6': x_set_pressure_source_override_enabled__mutmut_6, 
    'x_set_pressure_source_override_enabled__mutmut_7': x_set_pressure_source_override_enabled__mutmut_7, 
    'x_set_pressure_source_override_enabled__mutmut_8': x_set_pressure_source_override_enabled__mutmut_8, 
    'x_set_pressure_source_override_enabled__mutmut_9': x_set_pressure_source_override_enabled__mutmut_9, 
    'x_set_pressure_source_override_enabled__mutmut_10': x_set_pressure_source_override_enabled__mutmut_10, 
    'x_set_pressure_source_override_enabled__mutmut_11': x_set_pressure_source_override_enabled__mutmut_11, 
    'x_set_pressure_source_override_enabled__mutmut_12': x_set_pressure_source_override_enabled__mutmut_12, 
    'x_set_pressure_source_override_enabled__mutmut_13': x_set_pressure_source_override_enabled__mutmut_13, 
    'x_set_pressure_source_override_enabled__mutmut_14': x_set_pressure_source_override_enabled__mutmut_14, 
    'x_set_pressure_source_override_enabled__mutmut_15': x_set_pressure_source_override_enabled__mutmut_15, 
    'x_set_pressure_source_override_enabled__mutmut_16': x_set_pressure_source_override_enabled__mutmut_16, 
    'x_set_pressure_source_override_enabled__mutmut_17': x_set_pressure_source_override_enabled__mutmut_17, 
    'x_set_pressure_source_override_enabled__mutmut_18': x_set_pressure_source_override_enabled__mutmut_18, 
    'x_set_pressure_source_override_enabled__mutmut_19': x_set_pressure_source_override_enabled__mutmut_19, 
    'x_set_pressure_source_override_enabled__mutmut_20': x_set_pressure_source_override_enabled__mutmut_20, 
    'x_set_pressure_source_override_enabled__mutmut_21': x_set_pressure_source_override_enabled__mutmut_21, 
    'x_set_pressure_source_override_enabled__mutmut_22': x_set_pressure_source_override_enabled__mutmut_22, 
    'x_set_pressure_source_override_enabled__mutmut_23': x_set_pressure_source_override_enabled__mutmut_23, 
    'x_set_pressure_source_override_enabled__mutmut_24': x_set_pressure_source_override_enabled__mutmut_24, 
    'x_set_pressure_source_override_enabled__mutmut_25': x_set_pressure_source_override_enabled__mutmut_25
}

def set_pressure_source_override_enabled(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_pressure_source_override_enabled__mutmut_orig, x_set_pressure_source_override_enabled__mutmut_mutants, args, kwargs)
    return result 

set_pressure_source_override_enabled.__signature__ = _mutmut_signature(x_set_pressure_source_override_enabled__mutmut_orig)
x_set_pressure_source_override_enabled__mutmut_orig.__name__ = 'x_set_pressure_source_override_enabled'


def x_set_pressure_state_override__mutmut_orig(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_1(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = None
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_2(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = None
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_3(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["XXsourceXX"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_4(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["SOURCE"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_5(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["Source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_6(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_7(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["XXstateXX"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_8(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["STATE"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_9(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["State"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_10(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_pressure_state_override__mutmut_11(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_12(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_13(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setPressureStateOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_14(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setPressureStateOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_15(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setpressurestateoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_16(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETPRESSURESTATEOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_17(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setpressurestateoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_18(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_19(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_pressure_state_override__mutmut_20(
    source: PressureSource,
    state: PressureState,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Provides a given pressure state that will be processed and eventually be
    delivered to PressureObserver users. ``source`` must have been previously
    overridden by setPressureSourceOverrideEnabled.

    **EXPERIMENTAL**

    :param source:
    :param state:
    """
    params: T_JSON_DICT = {}
    params["source"] = source.to_json()
    params["state"] = state.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPressureStateOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_pressure_state_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_pressure_state_override__mutmut_1': x_set_pressure_state_override__mutmut_1, 
    'x_set_pressure_state_override__mutmut_2': x_set_pressure_state_override__mutmut_2, 
    'x_set_pressure_state_override__mutmut_3': x_set_pressure_state_override__mutmut_3, 
    'x_set_pressure_state_override__mutmut_4': x_set_pressure_state_override__mutmut_4, 
    'x_set_pressure_state_override__mutmut_5': x_set_pressure_state_override__mutmut_5, 
    'x_set_pressure_state_override__mutmut_6': x_set_pressure_state_override__mutmut_6, 
    'x_set_pressure_state_override__mutmut_7': x_set_pressure_state_override__mutmut_7, 
    'x_set_pressure_state_override__mutmut_8': x_set_pressure_state_override__mutmut_8, 
    'x_set_pressure_state_override__mutmut_9': x_set_pressure_state_override__mutmut_9, 
    'x_set_pressure_state_override__mutmut_10': x_set_pressure_state_override__mutmut_10, 
    'x_set_pressure_state_override__mutmut_11': x_set_pressure_state_override__mutmut_11, 
    'x_set_pressure_state_override__mutmut_12': x_set_pressure_state_override__mutmut_12, 
    'x_set_pressure_state_override__mutmut_13': x_set_pressure_state_override__mutmut_13, 
    'x_set_pressure_state_override__mutmut_14': x_set_pressure_state_override__mutmut_14, 
    'x_set_pressure_state_override__mutmut_15': x_set_pressure_state_override__mutmut_15, 
    'x_set_pressure_state_override__mutmut_16': x_set_pressure_state_override__mutmut_16, 
    'x_set_pressure_state_override__mutmut_17': x_set_pressure_state_override__mutmut_17, 
    'x_set_pressure_state_override__mutmut_18': x_set_pressure_state_override__mutmut_18, 
    'x_set_pressure_state_override__mutmut_19': x_set_pressure_state_override__mutmut_19, 
    'x_set_pressure_state_override__mutmut_20': x_set_pressure_state_override__mutmut_20
}

def set_pressure_state_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_pressure_state_override__mutmut_orig, x_set_pressure_state_override__mutmut_mutants, args, kwargs)
    return result 

set_pressure_state_override.__signature__ = _mutmut_signature(x_set_pressure_state_override__mutmut_orig)
x_set_pressure_state_override__mutmut_orig.__name__ = 'x_set_pressure_state_override'


def x_set_idle_override__mutmut_orig(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_1(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = None
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_2(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = None
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_3(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["XXisUserActiveXX"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_4(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isuseractive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_5(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["ISUSERACTIVE"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_6(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["Isuseractive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_7(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_8(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["XXisScreenUnlockedXX"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_9(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isscreenunlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_10(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["ISSCREENUNLOCKED"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_11(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["Isscreenunlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_12(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_idle_override__mutmut_13(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_14(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_15(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setIdleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_16(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setIdleOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_17(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setidleoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_18(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETIDLEOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_19(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setidleoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_20(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_21(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_idle_override__mutmut_22(
    is_user_active: bool,
    is_screen_unlocked: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides the Idle state.

    :param is_user_active: Mock isUserActive
    :param is_screen_unlocked: Mock isScreenUnlocked
    """
    params: T_JSON_DICT = {}
    params["isUserActive"] = is_user_active
    params["isScreenUnlocked"] = is_screen_unlocked
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setIdleOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_idle_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_idle_override__mutmut_1': x_set_idle_override__mutmut_1, 
    'x_set_idle_override__mutmut_2': x_set_idle_override__mutmut_2, 
    'x_set_idle_override__mutmut_3': x_set_idle_override__mutmut_3, 
    'x_set_idle_override__mutmut_4': x_set_idle_override__mutmut_4, 
    'x_set_idle_override__mutmut_5': x_set_idle_override__mutmut_5, 
    'x_set_idle_override__mutmut_6': x_set_idle_override__mutmut_6, 
    'x_set_idle_override__mutmut_7': x_set_idle_override__mutmut_7, 
    'x_set_idle_override__mutmut_8': x_set_idle_override__mutmut_8, 
    'x_set_idle_override__mutmut_9': x_set_idle_override__mutmut_9, 
    'x_set_idle_override__mutmut_10': x_set_idle_override__mutmut_10, 
    'x_set_idle_override__mutmut_11': x_set_idle_override__mutmut_11, 
    'x_set_idle_override__mutmut_12': x_set_idle_override__mutmut_12, 
    'x_set_idle_override__mutmut_13': x_set_idle_override__mutmut_13, 
    'x_set_idle_override__mutmut_14': x_set_idle_override__mutmut_14, 
    'x_set_idle_override__mutmut_15': x_set_idle_override__mutmut_15, 
    'x_set_idle_override__mutmut_16': x_set_idle_override__mutmut_16, 
    'x_set_idle_override__mutmut_17': x_set_idle_override__mutmut_17, 
    'x_set_idle_override__mutmut_18': x_set_idle_override__mutmut_18, 
    'x_set_idle_override__mutmut_19': x_set_idle_override__mutmut_19, 
    'x_set_idle_override__mutmut_20': x_set_idle_override__mutmut_20, 
    'x_set_idle_override__mutmut_21': x_set_idle_override__mutmut_21, 
    'x_set_idle_override__mutmut_22': x_set_idle_override__mutmut_22
}

def set_idle_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_idle_override__mutmut_orig, x_set_idle_override__mutmut_mutants, args, kwargs)
    return result 

set_idle_override.__signature__ = _mutmut_signature(x_set_idle_override__mutmut_orig)
x_set_idle_override__mutmut_orig.__name__ = 'x_set_idle_override'


def x_clear_idle_override__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.clearIdleOverride",
    }
    yield cmd_dict


def x_clear_idle_override__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_clear_idle_override__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.clearIdleOverride",
    }
    yield cmd_dict


def x_clear_idle_override__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.clearIdleOverride",
    }
    yield cmd_dict


def x_clear_idle_override__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.clearIdleOverride",
    }
    yield cmd_dict


def x_clear_idle_override__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.clearIdleOverrideXX",
    }
    yield cmd_dict


def x_clear_idle_override__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.clearidleoverride",
    }
    yield cmd_dict


def x_clear_idle_override__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.CLEARIDLEOVERRIDE",
    }
    yield cmd_dict


def x_clear_idle_override__mutmut_8() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Clears Idle state overrides.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.clearidleoverride",
    }
    yield cmd_dict

x_clear_idle_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_clear_idle_override__mutmut_1': x_clear_idle_override__mutmut_1, 
    'x_clear_idle_override__mutmut_2': x_clear_idle_override__mutmut_2, 
    'x_clear_idle_override__mutmut_3': x_clear_idle_override__mutmut_3, 
    'x_clear_idle_override__mutmut_4': x_clear_idle_override__mutmut_4, 
    'x_clear_idle_override__mutmut_5': x_clear_idle_override__mutmut_5, 
    'x_clear_idle_override__mutmut_6': x_clear_idle_override__mutmut_6, 
    'x_clear_idle_override__mutmut_7': x_clear_idle_override__mutmut_7, 
    'x_clear_idle_override__mutmut_8': x_clear_idle_override__mutmut_8
}

def clear_idle_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_clear_idle_override__mutmut_orig, x_clear_idle_override__mutmut_mutants, args, kwargs)
    return result 

clear_idle_override.__signature__ = _mutmut_signature(x_clear_idle_override__mutmut_orig)
x_clear_idle_override__mutmut_orig.__name__ = 'x_clear_idle_override'


def x_set_navigator_overrides__mutmut_orig(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_1(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = None
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_2(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_3(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["XXplatformXX"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_4(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["PLATFORM"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_5(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["Platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_6(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_navigator_overrides__mutmut_7(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_8(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_9(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setNavigatorOverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_10(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setNavigatorOverridesXX",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_11(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setnavigatoroverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_12(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETNAVIGATOROVERRIDES",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_13(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setnavigatoroverrides",
        "params": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_14(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_15(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_navigator_overrides__mutmut_16(
    platform: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides value returned by the javascript navigator object.

    **EXPERIMENTAL**

    :param platform: The platform navigator.platform should return.
    """
    params: T_JSON_DICT = {}
    params["platform"] = platform
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setNavigatorOverrides",
        "Params": params,
    }
    yield cmd_dict

x_set_navigator_overrides__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_navigator_overrides__mutmut_1': x_set_navigator_overrides__mutmut_1, 
    'x_set_navigator_overrides__mutmut_2': x_set_navigator_overrides__mutmut_2, 
    'x_set_navigator_overrides__mutmut_3': x_set_navigator_overrides__mutmut_3, 
    'x_set_navigator_overrides__mutmut_4': x_set_navigator_overrides__mutmut_4, 
    'x_set_navigator_overrides__mutmut_5': x_set_navigator_overrides__mutmut_5, 
    'x_set_navigator_overrides__mutmut_6': x_set_navigator_overrides__mutmut_6, 
    'x_set_navigator_overrides__mutmut_7': x_set_navigator_overrides__mutmut_7, 
    'x_set_navigator_overrides__mutmut_8': x_set_navigator_overrides__mutmut_8, 
    'x_set_navigator_overrides__mutmut_9': x_set_navigator_overrides__mutmut_9, 
    'x_set_navigator_overrides__mutmut_10': x_set_navigator_overrides__mutmut_10, 
    'x_set_navigator_overrides__mutmut_11': x_set_navigator_overrides__mutmut_11, 
    'x_set_navigator_overrides__mutmut_12': x_set_navigator_overrides__mutmut_12, 
    'x_set_navigator_overrides__mutmut_13': x_set_navigator_overrides__mutmut_13, 
    'x_set_navigator_overrides__mutmut_14': x_set_navigator_overrides__mutmut_14, 
    'x_set_navigator_overrides__mutmut_15': x_set_navigator_overrides__mutmut_15, 
    'x_set_navigator_overrides__mutmut_16': x_set_navigator_overrides__mutmut_16
}

def set_navigator_overrides(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_navigator_overrides__mutmut_orig, x_set_navigator_overrides__mutmut_mutants, args, kwargs)
    return result 

set_navigator_overrides.__signature__ = _mutmut_signature(x_set_navigator_overrides__mutmut_orig)
x_set_navigator_overrides__mutmut_orig.__name__ = 'x_set_navigator_overrides'


def x_set_page_scale_factor__mutmut_orig(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_1(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = None
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_2(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_3(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["XXpageScaleFactorXX"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_4(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pagescalefactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_5(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["PAGESCALEFACTOR"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_6(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["Pagescalefactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_7(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_page_scale_factor__mutmut_8(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_9(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_10(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setPageScaleFactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_11(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setPageScaleFactorXX",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_12(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setpagescalefactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_13(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETPAGESCALEFACTOR",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_14(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setpagescalefactor",
        "params": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_15(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_16(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_page_scale_factor__mutmut_17(
    page_scale_factor: float,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Sets a specified page scale factor.

    **EXPERIMENTAL**

    :param page_scale_factor: Page scale factor.
    """
    params: T_JSON_DICT = {}
    params["pageScaleFactor"] = page_scale_factor
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setPageScaleFactor",
        "Params": params,
    }
    yield cmd_dict

x_set_page_scale_factor__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_page_scale_factor__mutmut_1': x_set_page_scale_factor__mutmut_1, 
    'x_set_page_scale_factor__mutmut_2': x_set_page_scale_factor__mutmut_2, 
    'x_set_page_scale_factor__mutmut_3': x_set_page_scale_factor__mutmut_3, 
    'x_set_page_scale_factor__mutmut_4': x_set_page_scale_factor__mutmut_4, 
    'x_set_page_scale_factor__mutmut_5': x_set_page_scale_factor__mutmut_5, 
    'x_set_page_scale_factor__mutmut_6': x_set_page_scale_factor__mutmut_6, 
    'x_set_page_scale_factor__mutmut_7': x_set_page_scale_factor__mutmut_7, 
    'x_set_page_scale_factor__mutmut_8': x_set_page_scale_factor__mutmut_8, 
    'x_set_page_scale_factor__mutmut_9': x_set_page_scale_factor__mutmut_9, 
    'x_set_page_scale_factor__mutmut_10': x_set_page_scale_factor__mutmut_10, 
    'x_set_page_scale_factor__mutmut_11': x_set_page_scale_factor__mutmut_11, 
    'x_set_page_scale_factor__mutmut_12': x_set_page_scale_factor__mutmut_12, 
    'x_set_page_scale_factor__mutmut_13': x_set_page_scale_factor__mutmut_13, 
    'x_set_page_scale_factor__mutmut_14': x_set_page_scale_factor__mutmut_14, 
    'x_set_page_scale_factor__mutmut_15': x_set_page_scale_factor__mutmut_15, 
    'x_set_page_scale_factor__mutmut_16': x_set_page_scale_factor__mutmut_16, 
    'x_set_page_scale_factor__mutmut_17': x_set_page_scale_factor__mutmut_17
}

def set_page_scale_factor(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_page_scale_factor__mutmut_orig, x_set_page_scale_factor__mutmut_mutants, args, kwargs)
    return result 

set_page_scale_factor.__signature__ = _mutmut_signature(x_set_page_scale_factor__mutmut_orig)
x_set_page_scale_factor__mutmut_orig.__name__ = 'x_set_page_scale_factor'


def x_set_script_execution_disabled__mutmut_orig(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_1(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = None
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_2(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_3(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["XXvalueXX"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_4(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["VALUE"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_5(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["Value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_6(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_7(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_8(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_9(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setScriptExecutionDisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_10(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setScriptExecutionDisabledXX",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_11(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setscriptexecutiondisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_12(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETSCRIPTEXECUTIONDISABLED",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_13(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setscriptexecutiondisabled",
        "params": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_14(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_15(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_script_execution_disabled__mutmut_16(
    value: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Switches script execution in the page.

    :param value: Whether script execution should be disabled in the page.
    """
    params: T_JSON_DICT = {}
    params["value"] = value
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setScriptExecutionDisabled",
        "Params": params,
    }
    yield cmd_dict

x_set_script_execution_disabled__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_script_execution_disabled__mutmut_1': x_set_script_execution_disabled__mutmut_1, 
    'x_set_script_execution_disabled__mutmut_2': x_set_script_execution_disabled__mutmut_2, 
    'x_set_script_execution_disabled__mutmut_3': x_set_script_execution_disabled__mutmut_3, 
    'x_set_script_execution_disabled__mutmut_4': x_set_script_execution_disabled__mutmut_4, 
    'x_set_script_execution_disabled__mutmut_5': x_set_script_execution_disabled__mutmut_5, 
    'x_set_script_execution_disabled__mutmut_6': x_set_script_execution_disabled__mutmut_6, 
    'x_set_script_execution_disabled__mutmut_7': x_set_script_execution_disabled__mutmut_7, 
    'x_set_script_execution_disabled__mutmut_8': x_set_script_execution_disabled__mutmut_8, 
    'x_set_script_execution_disabled__mutmut_9': x_set_script_execution_disabled__mutmut_9, 
    'x_set_script_execution_disabled__mutmut_10': x_set_script_execution_disabled__mutmut_10, 
    'x_set_script_execution_disabled__mutmut_11': x_set_script_execution_disabled__mutmut_11, 
    'x_set_script_execution_disabled__mutmut_12': x_set_script_execution_disabled__mutmut_12, 
    'x_set_script_execution_disabled__mutmut_13': x_set_script_execution_disabled__mutmut_13, 
    'x_set_script_execution_disabled__mutmut_14': x_set_script_execution_disabled__mutmut_14, 
    'x_set_script_execution_disabled__mutmut_15': x_set_script_execution_disabled__mutmut_15, 
    'x_set_script_execution_disabled__mutmut_16': x_set_script_execution_disabled__mutmut_16
}

def set_script_execution_disabled(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_script_execution_disabled__mutmut_orig, x_set_script_execution_disabled__mutmut_mutants, args, kwargs)
    return result 

set_script_execution_disabled.__signature__ = _mutmut_signature(x_set_script_execution_disabled__mutmut_orig)
x_set_script_execution_disabled__mutmut_orig.__name__ = 'x_set_script_execution_disabled'


def x_set_touch_emulation_enabled__mutmut_orig(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_1(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = None
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_2(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = None
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_3(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["XXenabledXX"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_4(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["ENABLED"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_5(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["Enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_6(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_7(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_8(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["XXmaxTouchPointsXX"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_9(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxtouchpoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_10(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["MAXTOUCHPOINTS"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_11(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["Maxtouchpoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_12(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_13(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_14(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_15(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setTouchEmulationEnabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_16(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setTouchEmulationEnabledXX",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_17(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.settouchemulationenabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_18(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETTOUCHEMULATIONENABLED",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_19(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.settouchemulationenabled",
        "params": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_20(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_21(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_touch_emulation_enabled__mutmut_22(
    enabled: bool,
    max_touch_points: int | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables touch on platforms which do not support them.

    :param enabled: Whether the touch event emulation should be enabled.
    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    if max_touch_points is not None:
        params["maxTouchPoints"] = max_touch_points
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTouchEmulationEnabled",
        "Params": params,
    }
    yield cmd_dict

x_set_touch_emulation_enabled__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_touch_emulation_enabled__mutmut_1': x_set_touch_emulation_enabled__mutmut_1, 
    'x_set_touch_emulation_enabled__mutmut_2': x_set_touch_emulation_enabled__mutmut_2, 
    'x_set_touch_emulation_enabled__mutmut_3': x_set_touch_emulation_enabled__mutmut_3, 
    'x_set_touch_emulation_enabled__mutmut_4': x_set_touch_emulation_enabled__mutmut_4, 
    'x_set_touch_emulation_enabled__mutmut_5': x_set_touch_emulation_enabled__mutmut_5, 
    'x_set_touch_emulation_enabled__mutmut_6': x_set_touch_emulation_enabled__mutmut_6, 
    'x_set_touch_emulation_enabled__mutmut_7': x_set_touch_emulation_enabled__mutmut_7, 
    'x_set_touch_emulation_enabled__mutmut_8': x_set_touch_emulation_enabled__mutmut_8, 
    'x_set_touch_emulation_enabled__mutmut_9': x_set_touch_emulation_enabled__mutmut_9, 
    'x_set_touch_emulation_enabled__mutmut_10': x_set_touch_emulation_enabled__mutmut_10, 
    'x_set_touch_emulation_enabled__mutmut_11': x_set_touch_emulation_enabled__mutmut_11, 
    'x_set_touch_emulation_enabled__mutmut_12': x_set_touch_emulation_enabled__mutmut_12, 
    'x_set_touch_emulation_enabled__mutmut_13': x_set_touch_emulation_enabled__mutmut_13, 
    'x_set_touch_emulation_enabled__mutmut_14': x_set_touch_emulation_enabled__mutmut_14, 
    'x_set_touch_emulation_enabled__mutmut_15': x_set_touch_emulation_enabled__mutmut_15, 
    'x_set_touch_emulation_enabled__mutmut_16': x_set_touch_emulation_enabled__mutmut_16, 
    'x_set_touch_emulation_enabled__mutmut_17': x_set_touch_emulation_enabled__mutmut_17, 
    'x_set_touch_emulation_enabled__mutmut_18': x_set_touch_emulation_enabled__mutmut_18, 
    'x_set_touch_emulation_enabled__mutmut_19': x_set_touch_emulation_enabled__mutmut_19, 
    'x_set_touch_emulation_enabled__mutmut_20': x_set_touch_emulation_enabled__mutmut_20, 
    'x_set_touch_emulation_enabled__mutmut_21': x_set_touch_emulation_enabled__mutmut_21, 
    'x_set_touch_emulation_enabled__mutmut_22': x_set_touch_emulation_enabled__mutmut_22
}

def set_touch_emulation_enabled(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_touch_emulation_enabled__mutmut_orig, x_set_touch_emulation_enabled__mutmut_mutants, args, kwargs)
    return result 

set_touch_emulation_enabled.__signature__ = _mutmut_signature(x_set_touch_emulation_enabled__mutmut_orig)
x_set_touch_emulation_enabled__mutmut_orig.__name__ = 'x_set_touch_emulation_enabled'


def x_set_virtual_time_policy__mutmut_orig(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_1(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = None
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_2(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = None
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_3(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["XXpolicyXX"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_4(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["POLICY"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_5(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["Policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_6(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_7(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = None
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_8(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["XXbudgetXX"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_9(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["BUDGET"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_10(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["Budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_11(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_12(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = None
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_13(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["XXmaxVirtualTimeTaskStarvationCountXX"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_14(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxvirtualtimetaskstarvationcount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_15(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["MAXVIRTUALTIMETASKSTARVATIONCOUNT"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_16(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["Maxvirtualtimetaskstarvationcount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_17(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_18(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_19(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["XXinitialVirtualTimeXX"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_20(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialvirtualtime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_21(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["INITIALVIRTUALTIME"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_22(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["Initialvirtualtime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_23(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = None
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_24(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_25(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_26(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_27(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setVirtualTimePolicyXX",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_28(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setvirtualtimepolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_29(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETVIRTUALTIMEPOLICY",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_30(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setvirtualtimepolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_31(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "XXparamsXX": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_32(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "PARAMS": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_33(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "Params": params,
    }
    json = yield cmd_dict
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_34(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = None
    return float(json["virtualTimeTicksBase"])


def x_set_virtual_time_policy__mutmut_35(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(None)


def x_set_virtual_time_policy__mutmut_36(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["XXvirtualTimeTicksBaseXX"])


def x_set_virtual_time_policy__mutmut_37(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["virtualtimeticksbase"])


def x_set_virtual_time_policy__mutmut_38(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["VIRTUALTIMETICKSBASE"])


def x_set_virtual_time_policy__mutmut_39(
    policy: VirtualTimePolicy,
    budget: float | None = None,
    max_virtual_time_task_starvation_count: int | None = None,
    initial_virtual_time: network.TimeSinceEpoch | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, float]:
    """
    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.

    **EXPERIMENTAL**

    :param policy:
    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.
    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
    """
    params: T_JSON_DICT = {}
    params["policy"] = policy.to_json()
    if budget is not None:
        params["budget"] = budget
    if max_virtual_time_task_starvation_count is not None:
        params["maxVirtualTimeTaskStarvationCount"] = max_virtual_time_task_starvation_count
    if initial_virtual_time is not None:
        params["initialVirtualTime"] = initial_virtual_time.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVirtualTimePolicy",
        "params": params,
    }
    json = yield cmd_dict
    return float(json["Virtualtimeticksbase"])

x_set_virtual_time_policy__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_virtual_time_policy__mutmut_1': x_set_virtual_time_policy__mutmut_1, 
    'x_set_virtual_time_policy__mutmut_2': x_set_virtual_time_policy__mutmut_2, 
    'x_set_virtual_time_policy__mutmut_3': x_set_virtual_time_policy__mutmut_3, 
    'x_set_virtual_time_policy__mutmut_4': x_set_virtual_time_policy__mutmut_4, 
    'x_set_virtual_time_policy__mutmut_5': x_set_virtual_time_policy__mutmut_5, 
    'x_set_virtual_time_policy__mutmut_6': x_set_virtual_time_policy__mutmut_6, 
    'x_set_virtual_time_policy__mutmut_7': x_set_virtual_time_policy__mutmut_7, 
    'x_set_virtual_time_policy__mutmut_8': x_set_virtual_time_policy__mutmut_8, 
    'x_set_virtual_time_policy__mutmut_9': x_set_virtual_time_policy__mutmut_9, 
    'x_set_virtual_time_policy__mutmut_10': x_set_virtual_time_policy__mutmut_10, 
    'x_set_virtual_time_policy__mutmut_11': x_set_virtual_time_policy__mutmut_11, 
    'x_set_virtual_time_policy__mutmut_12': x_set_virtual_time_policy__mutmut_12, 
    'x_set_virtual_time_policy__mutmut_13': x_set_virtual_time_policy__mutmut_13, 
    'x_set_virtual_time_policy__mutmut_14': x_set_virtual_time_policy__mutmut_14, 
    'x_set_virtual_time_policy__mutmut_15': x_set_virtual_time_policy__mutmut_15, 
    'x_set_virtual_time_policy__mutmut_16': x_set_virtual_time_policy__mutmut_16, 
    'x_set_virtual_time_policy__mutmut_17': x_set_virtual_time_policy__mutmut_17, 
    'x_set_virtual_time_policy__mutmut_18': x_set_virtual_time_policy__mutmut_18, 
    'x_set_virtual_time_policy__mutmut_19': x_set_virtual_time_policy__mutmut_19, 
    'x_set_virtual_time_policy__mutmut_20': x_set_virtual_time_policy__mutmut_20, 
    'x_set_virtual_time_policy__mutmut_21': x_set_virtual_time_policy__mutmut_21, 
    'x_set_virtual_time_policy__mutmut_22': x_set_virtual_time_policy__mutmut_22, 
    'x_set_virtual_time_policy__mutmut_23': x_set_virtual_time_policy__mutmut_23, 
    'x_set_virtual_time_policy__mutmut_24': x_set_virtual_time_policy__mutmut_24, 
    'x_set_virtual_time_policy__mutmut_25': x_set_virtual_time_policy__mutmut_25, 
    'x_set_virtual_time_policy__mutmut_26': x_set_virtual_time_policy__mutmut_26, 
    'x_set_virtual_time_policy__mutmut_27': x_set_virtual_time_policy__mutmut_27, 
    'x_set_virtual_time_policy__mutmut_28': x_set_virtual_time_policy__mutmut_28, 
    'x_set_virtual_time_policy__mutmut_29': x_set_virtual_time_policy__mutmut_29, 
    'x_set_virtual_time_policy__mutmut_30': x_set_virtual_time_policy__mutmut_30, 
    'x_set_virtual_time_policy__mutmut_31': x_set_virtual_time_policy__mutmut_31, 
    'x_set_virtual_time_policy__mutmut_32': x_set_virtual_time_policy__mutmut_32, 
    'x_set_virtual_time_policy__mutmut_33': x_set_virtual_time_policy__mutmut_33, 
    'x_set_virtual_time_policy__mutmut_34': x_set_virtual_time_policy__mutmut_34, 
    'x_set_virtual_time_policy__mutmut_35': x_set_virtual_time_policy__mutmut_35, 
    'x_set_virtual_time_policy__mutmut_36': x_set_virtual_time_policy__mutmut_36, 
    'x_set_virtual_time_policy__mutmut_37': x_set_virtual_time_policy__mutmut_37, 
    'x_set_virtual_time_policy__mutmut_38': x_set_virtual_time_policy__mutmut_38, 
    'x_set_virtual_time_policy__mutmut_39': x_set_virtual_time_policy__mutmut_39
}

def set_virtual_time_policy(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_virtual_time_policy__mutmut_orig, x_set_virtual_time_policy__mutmut_mutants, args, kwargs)
    return result 

set_virtual_time_policy.__signature__ = _mutmut_signature(x_set_virtual_time_policy__mutmut_orig)
x_set_virtual_time_policy__mutmut_orig.__name__ = 'x_set_virtual_time_policy'


def x_set_locale_override__mutmut_orig(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_1(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = None
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_2(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_3(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_4(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["XXlocaleXX"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_5(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["LOCALE"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_6(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["Locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_7(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_locale_override__mutmut_8(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_9(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_10(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setLocaleOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_11(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setLocaleOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_12(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setlocaleoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_13(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETLOCALEOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_14(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setlocaleoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_15(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_16(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_locale_override__mutmut_17(
    locale: str | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system locale with the specified one.

    **EXPERIMENTAL**

    :param locale: *(Optional)* ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and restores default host system locale.
    """
    params: T_JSON_DICT = {}
    if locale is not None:
        params["locale"] = locale
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setLocaleOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_locale_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_locale_override__mutmut_1': x_set_locale_override__mutmut_1, 
    'x_set_locale_override__mutmut_2': x_set_locale_override__mutmut_2, 
    'x_set_locale_override__mutmut_3': x_set_locale_override__mutmut_3, 
    'x_set_locale_override__mutmut_4': x_set_locale_override__mutmut_4, 
    'x_set_locale_override__mutmut_5': x_set_locale_override__mutmut_5, 
    'x_set_locale_override__mutmut_6': x_set_locale_override__mutmut_6, 
    'x_set_locale_override__mutmut_7': x_set_locale_override__mutmut_7, 
    'x_set_locale_override__mutmut_8': x_set_locale_override__mutmut_8, 
    'x_set_locale_override__mutmut_9': x_set_locale_override__mutmut_9, 
    'x_set_locale_override__mutmut_10': x_set_locale_override__mutmut_10, 
    'x_set_locale_override__mutmut_11': x_set_locale_override__mutmut_11, 
    'x_set_locale_override__mutmut_12': x_set_locale_override__mutmut_12, 
    'x_set_locale_override__mutmut_13': x_set_locale_override__mutmut_13, 
    'x_set_locale_override__mutmut_14': x_set_locale_override__mutmut_14, 
    'x_set_locale_override__mutmut_15': x_set_locale_override__mutmut_15, 
    'x_set_locale_override__mutmut_16': x_set_locale_override__mutmut_16, 
    'x_set_locale_override__mutmut_17': x_set_locale_override__mutmut_17
}

def set_locale_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_locale_override__mutmut_orig, x_set_locale_override__mutmut_mutants, args, kwargs)
    return result 

set_locale_override.__signature__ = _mutmut_signature(x_set_locale_override__mutmut_orig)
x_set_locale_override__mutmut_orig.__name__ = 'x_set_locale_override'


def x_set_timezone_override__mutmut_orig(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_1(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = None
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_2(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_3(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["XXtimezoneIdXX"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_4(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneid"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_5(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["TIMEZONEID"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_6(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["Timezoneid"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_7(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_timezone_override__mutmut_8(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_9(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_10(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setTimezoneOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_11(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setTimezoneOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_12(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.settimezoneoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_13(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETTIMEZONEOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_14(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.settimezoneoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_15(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_16(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_timezone_override__mutmut_17(
    timezone_id: str,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Overrides default host system timezone with the specified one.

    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.
    """
    params: T_JSON_DICT = {}
    params["timezoneId"] = timezone_id
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setTimezoneOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_timezone_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_timezone_override__mutmut_1': x_set_timezone_override__mutmut_1, 
    'x_set_timezone_override__mutmut_2': x_set_timezone_override__mutmut_2, 
    'x_set_timezone_override__mutmut_3': x_set_timezone_override__mutmut_3, 
    'x_set_timezone_override__mutmut_4': x_set_timezone_override__mutmut_4, 
    'x_set_timezone_override__mutmut_5': x_set_timezone_override__mutmut_5, 
    'x_set_timezone_override__mutmut_6': x_set_timezone_override__mutmut_6, 
    'x_set_timezone_override__mutmut_7': x_set_timezone_override__mutmut_7, 
    'x_set_timezone_override__mutmut_8': x_set_timezone_override__mutmut_8, 
    'x_set_timezone_override__mutmut_9': x_set_timezone_override__mutmut_9, 
    'x_set_timezone_override__mutmut_10': x_set_timezone_override__mutmut_10, 
    'x_set_timezone_override__mutmut_11': x_set_timezone_override__mutmut_11, 
    'x_set_timezone_override__mutmut_12': x_set_timezone_override__mutmut_12, 
    'x_set_timezone_override__mutmut_13': x_set_timezone_override__mutmut_13, 
    'x_set_timezone_override__mutmut_14': x_set_timezone_override__mutmut_14, 
    'x_set_timezone_override__mutmut_15': x_set_timezone_override__mutmut_15, 
    'x_set_timezone_override__mutmut_16': x_set_timezone_override__mutmut_16, 
    'x_set_timezone_override__mutmut_17': x_set_timezone_override__mutmut_17
}

def set_timezone_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_timezone_override__mutmut_orig, x_set_timezone_override__mutmut_mutants, args, kwargs)
    return result 

set_timezone_override.__signature__ = _mutmut_signature(x_set_timezone_override__mutmut_orig)
x_set_timezone_override__mutmut_orig.__name__ = 'x_set_timezone_override'


def x_set_visible_size__mutmut_orig(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_1(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = None
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_2(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = None
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_3(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["XXwidthXX"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_4(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["WIDTH"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_5(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["Width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_6(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_7(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["XXheightXX"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_8(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["HEIGHT"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_9(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["Height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_10(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_visible_size__mutmut_11(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_12(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_13(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setVisibleSize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_14(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setVisibleSizeXX",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_15(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setvisiblesize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_16(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETVISIBLESIZE",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_17(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setvisiblesize",
        "params": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_18(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_19(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_visible_size__mutmut_20(
    width: int,
    height: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.

    **EXPERIMENTAL**

    :param width: Frame width (DIP).
    :param height: Frame height (DIP).
    """
    params: T_JSON_DICT = {}
    params["width"] = width
    params["height"] = height
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setVisibleSize",
        "Params": params,
    }
    yield cmd_dict

x_set_visible_size__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_visible_size__mutmut_1': x_set_visible_size__mutmut_1, 
    'x_set_visible_size__mutmut_2': x_set_visible_size__mutmut_2, 
    'x_set_visible_size__mutmut_3': x_set_visible_size__mutmut_3, 
    'x_set_visible_size__mutmut_4': x_set_visible_size__mutmut_4, 
    'x_set_visible_size__mutmut_5': x_set_visible_size__mutmut_5, 
    'x_set_visible_size__mutmut_6': x_set_visible_size__mutmut_6, 
    'x_set_visible_size__mutmut_7': x_set_visible_size__mutmut_7, 
    'x_set_visible_size__mutmut_8': x_set_visible_size__mutmut_8, 
    'x_set_visible_size__mutmut_9': x_set_visible_size__mutmut_9, 
    'x_set_visible_size__mutmut_10': x_set_visible_size__mutmut_10, 
    'x_set_visible_size__mutmut_11': x_set_visible_size__mutmut_11, 
    'x_set_visible_size__mutmut_12': x_set_visible_size__mutmut_12, 
    'x_set_visible_size__mutmut_13': x_set_visible_size__mutmut_13, 
    'x_set_visible_size__mutmut_14': x_set_visible_size__mutmut_14, 
    'x_set_visible_size__mutmut_15': x_set_visible_size__mutmut_15, 
    'x_set_visible_size__mutmut_16': x_set_visible_size__mutmut_16, 
    'x_set_visible_size__mutmut_17': x_set_visible_size__mutmut_17, 
    'x_set_visible_size__mutmut_18': x_set_visible_size__mutmut_18, 
    'x_set_visible_size__mutmut_19': x_set_visible_size__mutmut_19, 
    'x_set_visible_size__mutmut_20': x_set_visible_size__mutmut_20
}

def set_visible_size(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_visible_size__mutmut_orig, x_set_visible_size__mutmut_mutants, args, kwargs)
    return result 

set_visible_size.__signature__ = _mutmut_signature(x_set_visible_size__mutmut_orig)
x_set_visible_size__mutmut_orig.__name__ = 'x_set_visible_size'


def x_set_disabled_image_types__mutmut_orig(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_1(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = None
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_2(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_3(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["XXimageTypesXX"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_4(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imagetypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_5(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["IMAGETYPES"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_6(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["Imagetypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_7(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_disabled_image_types__mutmut_8(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_9(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_10(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setDisabledImageTypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_11(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setDisabledImageTypesXX",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_12(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setdisabledimagetypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_13(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETDISABLEDIMAGETYPES",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_14(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setdisabledimagetypes",
        "params": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_15(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_16(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_disabled_image_types__mutmut_17(
    image_types: list[DisabledImageType],
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param image_types: Image types to disable.
    """
    params: T_JSON_DICT = {}
    params["imageTypes"] = [i.to_json() for i in image_types]
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setDisabledImageTypes",
        "Params": params,
    }
    yield cmd_dict

x_set_disabled_image_types__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_disabled_image_types__mutmut_1': x_set_disabled_image_types__mutmut_1, 
    'x_set_disabled_image_types__mutmut_2': x_set_disabled_image_types__mutmut_2, 
    'x_set_disabled_image_types__mutmut_3': x_set_disabled_image_types__mutmut_3, 
    'x_set_disabled_image_types__mutmut_4': x_set_disabled_image_types__mutmut_4, 
    'x_set_disabled_image_types__mutmut_5': x_set_disabled_image_types__mutmut_5, 
    'x_set_disabled_image_types__mutmut_6': x_set_disabled_image_types__mutmut_6, 
    'x_set_disabled_image_types__mutmut_7': x_set_disabled_image_types__mutmut_7, 
    'x_set_disabled_image_types__mutmut_8': x_set_disabled_image_types__mutmut_8, 
    'x_set_disabled_image_types__mutmut_9': x_set_disabled_image_types__mutmut_9, 
    'x_set_disabled_image_types__mutmut_10': x_set_disabled_image_types__mutmut_10, 
    'x_set_disabled_image_types__mutmut_11': x_set_disabled_image_types__mutmut_11, 
    'x_set_disabled_image_types__mutmut_12': x_set_disabled_image_types__mutmut_12, 
    'x_set_disabled_image_types__mutmut_13': x_set_disabled_image_types__mutmut_13, 
    'x_set_disabled_image_types__mutmut_14': x_set_disabled_image_types__mutmut_14, 
    'x_set_disabled_image_types__mutmut_15': x_set_disabled_image_types__mutmut_15, 
    'x_set_disabled_image_types__mutmut_16': x_set_disabled_image_types__mutmut_16, 
    'x_set_disabled_image_types__mutmut_17': x_set_disabled_image_types__mutmut_17
}

def set_disabled_image_types(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_disabled_image_types__mutmut_orig, x_set_disabled_image_types__mutmut_mutants, args, kwargs)
    return result 

set_disabled_image_types.__signature__ = _mutmut_signature(x_set_disabled_image_types__mutmut_orig)
x_set_disabled_image_types__mutmut_orig.__name__ = 'x_set_disabled_image_types'


def x_set_hardware_concurrency_override__mutmut_orig(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_1(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = None
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_2(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_3(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["XXhardwareConcurrencyXX"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_4(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareconcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_5(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["HARDWARECONCURRENCY"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_6(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["Hardwareconcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_7(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_8(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_9(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_10(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setHardwareConcurrencyOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_11(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setHardwareConcurrencyOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_12(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.sethardwareconcurrencyoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_13(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETHARDWARECONCURRENCYOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_14(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.sethardwareconcurrencyoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_15(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_16(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_hardware_concurrency_override__mutmut_17(
    hardware_concurrency: int,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """


    **EXPERIMENTAL**

    :param hardware_concurrency: Hardware concurrency to report
    """
    params: T_JSON_DICT = {}
    params["hardwareConcurrency"] = hardware_concurrency
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setHardwareConcurrencyOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_hardware_concurrency_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_hardware_concurrency_override__mutmut_1': x_set_hardware_concurrency_override__mutmut_1, 
    'x_set_hardware_concurrency_override__mutmut_2': x_set_hardware_concurrency_override__mutmut_2, 
    'x_set_hardware_concurrency_override__mutmut_3': x_set_hardware_concurrency_override__mutmut_3, 
    'x_set_hardware_concurrency_override__mutmut_4': x_set_hardware_concurrency_override__mutmut_4, 
    'x_set_hardware_concurrency_override__mutmut_5': x_set_hardware_concurrency_override__mutmut_5, 
    'x_set_hardware_concurrency_override__mutmut_6': x_set_hardware_concurrency_override__mutmut_6, 
    'x_set_hardware_concurrency_override__mutmut_7': x_set_hardware_concurrency_override__mutmut_7, 
    'x_set_hardware_concurrency_override__mutmut_8': x_set_hardware_concurrency_override__mutmut_8, 
    'x_set_hardware_concurrency_override__mutmut_9': x_set_hardware_concurrency_override__mutmut_9, 
    'x_set_hardware_concurrency_override__mutmut_10': x_set_hardware_concurrency_override__mutmut_10, 
    'x_set_hardware_concurrency_override__mutmut_11': x_set_hardware_concurrency_override__mutmut_11, 
    'x_set_hardware_concurrency_override__mutmut_12': x_set_hardware_concurrency_override__mutmut_12, 
    'x_set_hardware_concurrency_override__mutmut_13': x_set_hardware_concurrency_override__mutmut_13, 
    'x_set_hardware_concurrency_override__mutmut_14': x_set_hardware_concurrency_override__mutmut_14, 
    'x_set_hardware_concurrency_override__mutmut_15': x_set_hardware_concurrency_override__mutmut_15, 
    'x_set_hardware_concurrency_override__mutmut_16': x_set_hardware_concurrency_override__mutmut_16, 
    'x_set_hardware_concurrency_override__mutmut_17': x_set_hardware_concurrency_override__mutmut_17
}

def set_hardware_concurrency_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_hardware_concurrency_override__mutmut_orig, x_set_hardware_concurrency_override__mutmut_mutants, args, kwargs)
    return result 

set_hardware_concurrency_override.__signature__ = _mutmut_signature(x_set_hardware_concurrency_override__mutmut_orig)
x_set_hardware_concurrency_override__mutmut_orig.__name__ = 'x_set_hardware_concurrency_override'


def x_set_user_agent_override__mutmut_orig(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_1(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = None
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_2(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = None
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_3(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["XXuserAgentXX"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_4(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["useragent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_5(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["USERAGENT"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_6(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["Useragent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_7(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_8(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = None
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_9(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["XXacceptLanguageXX"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_10(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptlanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_11(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["ACCEPTLANGUAGE"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_12(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["Acceptlanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_13(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_14(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = None
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_15(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["XXplatformXX"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_16(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["PLATFORM"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_17(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["Platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_18(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_19(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_20(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["XXuserAgentMetadataXX"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_21(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["useragentmetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_22(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["USERAGENTMETADATA"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_23(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["Useragentmetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_24(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_user_agent_override__mutmut_25(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_26(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_27(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setUserAgentOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_28(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setUserAgentOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_29(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setuseragentoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_30(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETUSERAGENTOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_31(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setuseragentoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_32(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_33(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_user_agent_override__mutmut_34(
    user_agent: str,
    accept_language: str | None = None,
    platform: str | None = None,
    user_agent_metadata: UserAgentMetadata | None = None,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding user agent with the given string.
    ``userAgentMetadata`` must be set for Client Hint headers to be sent.

    :param user_agent: User agent to use.
    :param accept_language: *(Optional)* Browser language to emulate.
    :param platform: *(Optional)* The platform navigator.platform should return.
    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """
    params: T_JSON_DICT = {}
    params["userAgent"] = user_agent
    if accept_language is not None:
        params["acceptLanguage"] = accept_language
    if platform is not None:
        params["platform"] = platform
    if user_agent_metadata is not None:
        params["userAgentMetadata"] = user_agent_metadata.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setUserAgentOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_user_agent_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_user_agent_override__mutmut_1': x_set_user_agent_override__mutmut_1, 
    'x_set_user_agent_override__mutmut_2': x_set_user_agent_override__mutmut_2, 
    'x_set_user_agent_override__mutmut_3': x_set_user_agent_override__mutmut_3, 
    'x_set_user_agent_override__mutmut_4': x_set_user_agent_override__mutmut_4, 
    'x_set_user_agent_override__mutmut_5': x_set_user_agent_override__mutmut_5, 
    'x_set_user_agent_override__mutmut_6': x_set_user_agent_override__mutmut_6, 
    'x_set_user_agent_override__mutmut_7': x_set_user_agent_override__mutmut_7, 
    'x_set_user_agent_override__mutmut_8': x_set_user_agent_override__mutmut_8, 
    'x_set_user_agent_override__mutmut_9': x_set_user_agent_override__mutmut_9, 
    'x_set_user_agent_override__mutmut_10': x_set_user_agent_override__mutmut_10, 
    'x_set_user_agent_override__mutmut_11': x_set_user_agent_override__mutmut_11, 
    'x_set_user_agent_override__mutmut_12': x_set_user_agent_override__mutmut_12, 
    'x_set_user_agent_override__mutmut_13': x_set_user_agent_override__mutmut_13, 
    'x_set_user_agent_override__mutmut_14': x_set_user_agent_override__mutmut_14, 
    'x_set_user_agent_override__mutmut_15': x_set_user_agent_override__mutmut_15, 
    'x_set_user_agent_override__mutmut_16': x_set_user_agent_override__mutmut_16, 
    'x_set_user_agent_override__mutmut_17': x_set_user_agent_override__mutmut_17, 
    'x_set_user_agent_override__mutmut_18': x_set_user_agent_override__mutmut_18, 
    'x_set_user_agent_override__mutmut_19': x_set_user_agent_override__mutmut_19, 
    'x_set_user_agent_override__mutmut_20': x_set_user_agent_override__mutmut_20, 
    'x_set_user_agent_override__mutmut_21': x_set_user_agent_override__mutmut_21, 
    'x_set_user_agent_override__mutmut_22': x_set_user_agent_override__mutmut_22, 
    'x_set_user_agent_override__mutmut_23': x_set_user_agent_override__mutmut_23, 
    'x_set_user_agent_override__mutmut_24': x_set_user_agent_override__mutmut_24, 
    'x_set_user_agent_override__mutmut_25': x_set_user_agent_override__mutmut_25, 
    'x_set_user_agent_override__mutmut_26': x_set_user_agent_override__mutmut_26, 
    'x_set_user_agent_override__mutmut_27': x_set_user_agent_override__mutmut_27, 
    'x_set_user_agent_override__mutmut_28': x_set_user_agent_override__mutmut_28, 
    'x_set_user_agent_override__mutmut_29': x_set_user_agent_override__mutmut_29, 
    'x_set_user_agent_override__mutmut_30': x_set_user_agent_override__mutmut_30, 
    'x_set_user_agent_override__mutmut_31': x_set_user_agent_override__mutmut_31, 
    'x_set_user_agent_override__mutmut_32': x_set_user_agent_override__mutmut_32, 
    'x_set_user_agent_override__mutmut_33': x_set_user_agent_override__mutmut_33, 
    'x_set_user_agent_override__mutmut_34': x_set_user_agent_override__mutmut_34
}

def set_user_agent_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_user_agent_override__mutmut_orig, x_set_user_agent_override__mutmut_mutants, args, kwargs)
    return result 

set_user_agent_override.__signature__ = _mutmut_signature(x_set_user_agent_override__mutmut_orig)
x_set_user_agent_override__mutmut_orig.__name__ = 'x_set_user_agent_override'


def x_set_automation_override__mutmut_orig(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_1(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = None
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_2(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_3(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["XXenabledXX"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_4(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["ENABLED"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_5(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["Enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_6(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_automation_override__mutmut_7(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_8(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_9(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "Method": "Emulation.setAutomationOverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_10(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "XXEmulation.setAutomationOverrideXX",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_11(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "emulation.setautomationoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_12(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "EMULATION.SETAUTOMATIONOVERRIDE",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_13(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setautomationoverride",
        "params": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_14(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_15(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_automation_override__mutmut_16(
    enabled: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Allows overriding the automation flag.

    **EXPERIMENTAL**

    :param enabled: Whether the override should be enabled.
    """
    params: T_JSON_DICT = {}
    params["enabled"] = enabled
    cmd_dict: T_JSON_DICT = {
        "method": "Emulation.setAutomationOverride",
        "Params": params,
    }
    yield cmd_dict

x_set_automation_override__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_automation_override__mutmut_1': x_set_automation_override__mutmut_1, 
    'x_set_automation_override__mutmut_2': x_set_automation_override__mutmut_2, 
    'x_set_automation_override__mutmut_3': x_set_automation_override__mutmut_3, 
    'x_set_automation_override__mutmut_4': x_set_automation_override__mutmut_4, 
    'x_set_automation_override__mutmut_5': x_set_automation_override__mutmut_5, 
    'x_set_automation_override__mutmut_6': x_set_automation_override__mutmut_6, 
    'x_set_automation_override__mutmut_7': x_set_automation_override__mutmut_7, 
    'x_set_automation_override__mutmut_8': x_set_automation_override__mutmut_8, 
    'x_set_automation_override__mutmut_9': x_set_automation_override__mutmut_9, 
    'x_set_automation_override__mutmut_10': x_set_automation_override__mutmut_10, 
    'x_set_automation_override__mutmut_11': x_set_automation_override__mutmut_11, 
    'x_set_automation_override__mutmut_12': x_set_automation_override__mutmut_12, 
    'x_set_automation_override__mutmut_13': x_set_automation_override__mutmut_13, 
    'x_set_automation_override__mutmut_14': x_set_automation_override__mutmut_14, 
    'x_set_automation_override__mutmut_15': x_set_automation_override__mutmut_15, 
    'x_set_automation_override__mutmut_16': x_set_automation_override__mutmut_16
}

def set_automation_override(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_automation_override__mutmut_orig, x_set_automation_override__mutmut_mutants, args, kwargs)
    return result 

set_automation_override.__signature__ = _mutmut_signature(x_set_automation_override__mutmut_orig)
x_set_automation_override__mutmut_orig.__name__ = 'x_set_automation_override'


@event_class("Emulation.virtualTimeBudgetExpired")
@dataclass
class VirtualTimeBudgetExpired:
    """
    **EXPERIMENTAL**

    Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.
    """


    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VirtualTimeBudgetExpired:
        return cls(

        )
