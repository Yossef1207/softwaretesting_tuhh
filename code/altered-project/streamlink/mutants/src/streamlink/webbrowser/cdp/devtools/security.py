# DO NOT EDIT THIS FILE!
#
# This file is generated from the CDP specification. If you need to make
# changes, edit the generator and regenerate all modules.
#
# CDP version: v0.0.1438564
# CDP domain: Security

from __future__ import annotations

import enum
from collections.abc import Generator
from dataclasses import dataclass
from typing import Any

import streamlink.webbrowser.cdp.devtools.network as network
from streamlink.webbrowser.cdp.devtools.util import T_JSON_DICT, event_class
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):
    """Forward call to original or mutated function, depending on the environment"""
    import os
    mutant_under_test = os.environ['MUTANT_UNDER_TEST']
    if mutant_under_test == 'fail':
        from mutmut.__main__ import MutmutProgrammaticFailException
        raise MutmutProgrammaticFailException('Failed programmatically')      
    elif mutant_under_test == 'stats':
        from mutmut.__main__ import record_trampoline_hit
        record_trampoline_hit(orig.__module__ + '.' + orig.__name__)
        result = orig(*call_args, **call_kwargs)
        return result  # for the yield case
    prefix = orig.__module__ + '.' + orig.__name__ + '__mutmut_'
    if not mutant_under_test.startswith(prefix):
        result = orig(*call_args, **call_kwargs)
        return result  # for the yield case
    mutant_name = mutant_under_test.rpartition('.')[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = mutants[mutant_name](*call_args, **call_kwargs)
    return result
from inspect import signature as _mutmut_signature
from typing import Annotated
from typing import Callable
from typing import ClassVar


MutantDict = Annotated[dict[str, Callable], "Mutant"]


def _mutmut_yield_from_trampoline(orig, mutants, call_args, call_kwargs, self_arg = None):
    """Forward call to original or mutated function, depending on the environment"""
    import os
    mutant_under_test = os.environ['MUTANT_UNDER_TEST']
    if mutant_under_test == 'fail':
        from mutmut.__main__ import MutmutProgrammaticFailException
        raise MutmutProgrammaticFailException('Failed programmatically')      
    elif mutant_under_test == 'stats':
        from mutmut.__main__ import record_trampoline_hit
        record_trampoline_hit(orig.__module__ + '.' + orig.__name__)
        result = yield from orig(*call_args, **call_kwargs)
        return result  # for the yield case
    prefix = orig.__module__ + '.' + orig.__name__ + '__mutmut_'
    if not mutant_under_test.startswith(prefix):
        result = yield from orig(*call_args, **call_kwargs)
        return result  # for the yield case
    mutant_name = mutant_under_test.rpartition('.')[-1]
    if self_arg:
        # call to a class method where self is not bound
        result = yield from mutants[mutant_name](self_arg, *call_args, **call_kwargs)
    else:
        result = yield from mutants[mutant_name](*call_args, **call_kwargs)
    return result


class CertificateId(int):
    """
    An internal certificate ID value.
    """
    def to_json(self) -> int:
        return self

    @classmethod
    def from_json(cls, json: int) -> CertificateId:
        return cls(json)

    def __repr__(self):
        return f"CertificateId({super().__repr__()})"


class MixedContentType(enum.Enum):
    """
    A description of mixed content (HTTP resources on HTTPS pages), as defined by
    https://www.w3.org/TR/mixed-content/#categories
    """
    BLOCKABLE = "blockable"
    OPTIONALLY_BLOCKABLE = "optionally-blockable"
    NONE = "none"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> MixedContentType:
        return cls(json)


class SecurityState(enum.Enum):
    """
    The security level of a page or resource.
    """
    UNKNOWN = "unknown"
    NEUTRAL = "neutral"
    INSECURE = "insecure"
    SECURE = "secure"
    INFO = "info"
    INSECURE_BROKEN = "insecure-broken"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> SecurityState:
        return cls(json)


@dataclass
class CertificateSecurityState:
    """
    Details about the security state of the page certificate.
    """
    #: Protocol name (e.g. "TLS 1.2" or "QUIC").
    protocol: str

    #: Key Exchange used by the connection, or the empty string if not applicable.
    key_exchange: str

    #: Cipher name.
    cipher: str

    #: Page certificate.
    certificate: list[str]

    #: Certificate subject name.
    subject_name: str

    #: Name of the issuing CA.
    issuer: str

    #: Certificate valid from date.
    valid_from: network.TimeSinceEpoch

    #: Certificate valid to (expiration) date
    valid_to: network.TimeSinceEpoch

    #: True if the certificate uses a weak signature algorithm.
    certificate_has_weak_signature: bool

    #: True if the certificate has a SHA1 signature in the chain.
    certificate_has_sha1_signature: bool

    #: True if modern SSL
    modern_ssl: bool

    #: True if the connection is using an obsolete SSL protocol.
    obsolete_ssl_protocol: bool

    #: True if the connection is using an obsolete SSL key exchange.
    obsolete_ssl_key_exchange: bool

    #: True if the connection is using an obsolete SSL cipher.
    obsolete_ssl_cipher: bool

    #: True if the connection is using an obsolete SSL signature.
    obsolete_ssl_signature: bool

    #: (EC)DH group used by the connection, if applicable.
    key_exchange_group: str | None = None

    #: TLS MAC. Note that AEAD ciphers do not have separate MACs.
    mac: str | None = None

    #: The highest priority network error code, if the certificate has an error.
    certificate_network_error: str | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["protocol"] = self.protocol
        json["keyExchange"] = self.key_exchange
        json["cipher"] = self.cipher
        json["certificate"] = list(self.certificate)
        json["subjectName"] = self.subject_name
        json["issuer"] = self.issuer
        json["validFrom"] = self.valid_from.to_json()
        json["validTo"] = self.valid_to.to_json()
        json["certificateHasWeakSignature"] = self.certificate_has_weak_signature
        json["certificateHasSha1Signature"] = self.certificate_has_sha1_signature
        json["modernSSL"] = self.modern_ssl
        json["obsoleteSslProtocol"] = self.obsolete_ssl_protocol
        json["obsoleteSslKeyExchange"] = self.obsolete_ssl_key_exchange
        json["obsoleteSslCipher"] = self.obsolete_ssl_cipher
        json["obsoleteSslSignature"] = self.obsolete_ssl_signature
        if self.key_exchange_group is not None:
            json["keyExchangeGroup"] = self.key_exchange_group
        if self.mac is not None:
            json["mac"] = self.mac
        if self.certificate_network_error is not None:
            json["certificateNetworkError"] = self.certificate_network_error
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CertificateSecurityState:
        return cls(
            protocol=str(json["protocol"]),
            key_exchange=str(json["keyExchange"]),
            cipher=str(json["cipher"]),
            certificate=[str(i) for i in json["certificate"]],
            subject_name=str(json["subjectName"]),
            issuer=str(json["issuer"]),
            valid_from=network.TimeSinceEpoch.from_json(json["validFrom"]),
            valid_to=network.TimeSinceEpoch.from_json(json["validTo"]),
            certificate_has_weak_signature=bool(json["certificateHasWeakSignature"]),
            certificate_has_sha1_signature=bool(json["certificateHasSha1Signature"]),
            modern_ssl=bool(json["modernSSL"]),
            obsolete_ssl_protocol=bool(json["obsoleteSslProtocol"]),
            obsolete_ssl_key_exchange=bool(json["obsoleteSslKeyExchange"]),
            obsolete_ssl_cipher=bool(json["obsoleteSslCipher"]),
            obsolete_ssl_signature=bool(json["obsoleteSslSignature"]),
            key_exchange_group=str(json["keyExchangeGroup"]) if "keyExchangeGroup" in json else None,
            mac=str(json["mac"]) if "mac" in json else None,
            certificate_network_error=str(json["certificateNetworkError"]) if "certificateNetworkError" in json else None,
        )


class SafetyTipStatus(enum.Enum):
    BAD_REPUTATION = "badReputation"
    LOOKALIKE = "lookalike"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> SafetyTipStatus:
        return cls(json)


@dataclass
class SafetyTipInfo:
    #: Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.
    safety_tip_status: SafetyTipStatus

    #: The URL the safety tip suggested ("Did you mean?"). Only filled in for lookalike matches.
    safe_url: str | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["safetyTipStatus"] = self.safety_tip_status.to_json()
        if self.safe_url is not None:
            json["safeUrl"] = self.safe_url
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SafetyTipInfo:
        return cls(
            safety_tip_status=SafetyTipStatus.from_json(json["safetyTipStatus"]),
            safe_url=str(json["safeUrl"]) if "safeUrl" in json else None,
        )


@dataclass
class VisibleSecurityState:
    """
    Security state information about the page.
    """
    #: The security level of the page.
    security_state: SecurityState

    #: Array of security state issues ids.
    security_state_issue_ids: list[str]

    #: Security state details about the page certificate.
    certificate_security_state: CertificateSecurityState | None = None

    #: The type of Safety Tip triggered on the page. Note that this field will be set even if the Safety Tip UI was not actually shown.
    safety_tip_info: SafetyTipInfo | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["securityState"] = self.security_state.to_json()
        json["securityStateIssueIds"] = list(self.security_state_issue_ids)
        if self.certificate_security_state is not None:
            json["certificateSecurityState"] = self.certificate_security_state.to_json()
        if self.safety_tip_info is not None:
            json["safetyTipInfo"] = self.safety_tip_info.to_json()
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VisibleSecurityState:
        return cls(
            security_state=SecurityState.from_json(json["securityState"]),
            security_state_issue_ids=[str(i) for i in json["securityStateIssueIds"]],
            certificate_security_state=CertificateSecurityState.from_json(json["certificateSecurityState"]) if "certificateSecurityState" in json else None,
            safety_tip_info=SafetyTipInfo.from_json(json["safetyTipInfo"]) if "safetyTipInfo" in json else None,
        )


@dataclass
class SecurityStateExplanation:
    """
    An explanation of an factor contributing to the security state.
    """
    #: Security state representing the severity of the factor being explained.
    security_state: SecurityState

    #: Title describing the type of factor.
    title: str

    #: Short phrase describing the type of factor.
    summary: str

    #: Full text explanation of the factor.
    description: str

    #: The type of mixed content described by the explanation.
    mixed_content_type: MixedContentType

    #: Page certificate.
    certificate: list[str]

    #: Recommendations to fix any issues.
    recommendations: list[str] | None = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["securityState"] = self.security_state.to_json()
        json["title"] = self.title
        json["summary"] = self.summary
        json["description"] = self.description
        json["mixedContentType"] = self.mixed_content_type.to_json()
        json["certificate"] = list(self.certificate)
        if self.recommendations is not None:
            json["recommendations"] = list(self.recommendations)
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SecurityStateExplanation:
        return cls(
            security_state=SecurityState.from_json(json["securityState"]),
            title=str(json["title"]),
            summary=str(json["summary"]),
            description=str(json["description"]),
            mixed_content_type=MixedContentType.from_json(json["mixedContentType"]),
            certificate=[str(i) for i in json["certificate"]],
            recommendations=[str(i) for i in json["recommendations"]] if "recommendations" in json else None,
        )


@dataclass
class InsecureContentStatus:
    """
    Information about insecure content on the page.
    """
    #: Always false.
    ran_mixed_content: bool

    #: Always false.
    displayed_mixed_content: bool

    #: Always false.
    contained_mixed_form: bool

    #: Always false.
    ran_content_with_cert_errors: bool

    #: Always false.
    displayed_content_with_cert_errors: bool

    #: Always set to unknown.
    ran_insecure_content_style: SecurityState

    #: Always set to unknown.
    displayed_insecure_content_style: SecurityState

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {}
        json["ranMixedContent"] = self.ran_mixed_content
        json["displayedMixedContent"] = self.displayed_mixed_content
        json["containedMixedForm"] = self.contained_mixed_form
        json["ranContentWithCertErrors"] = self.ran_content_with_cert_errors
        json["displayedContentWithCertErrors"] = self.displayed_content_with_cert_errors
        json["ranInsecureContentStyle"] = self.ran_insecure_content_style.to_json()
        json["displayedInsecureContentStyle"] = self.displayed_insecure_content_style.to_json()
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> InsecureContentStatus:
        return cls(
            ran_mixed_content=bool(json["ranMixedContent"]),
            displayed_mixed_content=bool(json["displayedMixedContent"]),
            contained_mixed_form=bool(json["containedMixedForm"]),
            ran_content_with_cert_errors=bool(json["ranContentWithCertErrors"]),
            displayed_content_with_cert_errors=bool(json["displayedContentWithCertErrors"]),
            ran_insecure_content_style=SecurityState.from_json(json["ranInsecureContentStyle"]),
            displayed_insecure_content_style=SecurityState.from_json(json["displayedInsecureContentStyle"]),
        )


class CertificateErrorAction(enum.Enum):
    """
    The action to take when a certificate error occurs. continue will continue processing the
    request and cancel will cancel the request.
    """
    CONTINUE = "continue"
    CANCEL = "cancel"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> CertificateErrorAction:
        return cls(json)


def x_disable__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Disables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Security.disable",
    }
    yield cmd_dict


def x_disable__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Disables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_disable__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Disables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Security.disable",
    }
    yield cmd_dict


def x_disable__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Disables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Security.disable",
    }
    yield cmd_dict


def x_disable__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Disables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Security.disable",
    }
    yield cmd_dict


def x_disable__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Disables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXSecurity.disableXX",
    }
    yield cmd_dict


def x_disable__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Disables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "security.disable",
    }
    yield cmd_dict


def x_disable__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Disables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "SECURITY.DISABLE",
    }
    yield cmd_dict

x_disable__mutmut_mutants : ClassVar[MutantDict] = {
'x_disable__mutmut_1': x_disable__mutmut_1, 
    'x_disable__mutmut_2': x_disable__mutmut_2, 
    'x_disable__mutmut_3': x_disable__mutmut_3, 
    'x_disable__mutmut_4': x_disable__mutmut_4, 
    'x_disable__mutmut_5': x_disable__mutmut_5, 
    'x_disable__mutmut_6': x_disable__mutmut_6, 
    'x_disable__mutmut_7': x_disable__mutmut_7
}

def disable(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_disable__mutmut_orig, x_disable__mutmut_mutants, args, kwargs)
    return result 

disable.__signature__ = _mutmut_signature(x_disable__mutmut_orig)
x_disable__mutmut_orig.__name__ = 'x_disable'


def x_enable__mutmut_orig() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "Security.enable",
    }
    yield cmd_dict


def x_enable__mutmut_1() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_enable__mutmut_2() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Security.enable",
    }
    yield cmd_dict


def x_enable__mutmut_3() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Security.enable",
    }
    yield cmd_dict


def x_enable__mutmut_4() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "Method": "Security.enable",
    }
    yield cmd_dict


def x_enable__mutmut_5() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "XXSecurity.enableXX",
    }
    yield cmd_dict


def x_enable__mutmut_6() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "security.enable",
    }
    yield cmd_dict


def x_enable__mutmut_7() -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enables tracking security state changes.
    """
    cmd_dict: T_JSON_DICT = {
        "method": "SECURITY.ENABLE",
    }
    yield cmd_dict

x_enable__mutmut_mutants : ClassVar[MutantDict] = {
'x_enable__mutmut_1': x_enable__mutmut_1, 
    'x_enable__mutmut_2': x_enable__mutmut_2, 
    'x_enable__mutmut_3': x_enable__mutmut_3, 
    'x_enable__mutmut_4': x_enable__mutmut_4, 
    'x_enable__mutmut_5': x_enable__mutmut_5, 
    'x_enable__mutmut_6': x_enable__mutmut_6, 
    'x_enable__mutmut_7': x_enable__mutmut_7
}

def enable(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_enable__mutmut_orig, x_enable__mutmut_mutants, args, kwargs)
    return result 

enable.__signature__ = _mutmut_signature(x_enable__mutmut_orig)
x_enable__mutmut_orig.__name__ = 'x_enable'


def x_set_ignore_certificate_errors__mutmut_orig(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_1(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = None
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_2(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_3(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["XXignoreXX"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_4(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["IGNORE"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_5(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["Ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_6(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_7(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_8(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_9(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "Method": "Security.setIgnoreCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_10(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "XXSecurity.setIgnoreCertificateErrorsXX",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_11(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "security.setignorecertificateerrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_12(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "SECURITY.SETIGNORECERTIFICATEERRORS",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_13(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setignorecertificateerrors",
        "params": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_14(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_15(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_ignore_certificate_errors__mutmut_16(
    ignore: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable whether all certificate errors should be ignored.

    :param ignore: If true, all certificate errors will be ignored.
    """
    params: T_JSON_DICT = {}
    params["ignore"] = ignore
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setIgnoreCertificateErrors",
        "Params": params,
    }
    yield cmd_dict

x_set_ignore_certificate_errors__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_ignore_certificate_errors__mutmut_1': x_set_ignore_certificate_errors__mutmut_1, 
    'x_set_ignore_certificate_errors__mutmut_2': x_set_ignore_certificate_errors__mutmut_2, 
    'x_set_ignore_certificate_errors__mutmut_3': x_set_ignore_certificate_errors__mutmut_3, 
    'x_set_ignore_certificate_errors__mutmut_4': x_set_ignore_certificate_errors__mutmut_4, 
    'x_set_ignore_certificate_errors__mutmut_5': x_set_ignore_certificate_errors__mutmut_5, 
    'x_set_ignore_certificate_errors__mutmut_6': x_set_ignore_certificate_errors__mutmut_6, 
    'x_set_ignore_certificate_errors__mutmut_7': x_set_ignore_certificate_errors__mutmut_7, 
    'x_set_ignore_certificate_errors__mutmut_8': x_set_ignore_certificate_errors__mutmut_8, 
    'x_set_ignore_certificate_errors__mutmut_9': x_set_ignore_certificate_errors__mutmut_9, 
    'x_set_ignore_certificate_errors__mutmut_10': x_set_ignore_certificate_errors__mutmut_10, 
    'x_set_ignore_certificate_errors__mutmut_11': x_set_ignore_certificate_errors__mutmut_11, 
    'x_set_ignore_certificate_errors__mutmut_12': x_set_ignore_certificate_errors__mutmut_12, 
    'x_set_ignore_certificate_errors__mutmut_13': x_set_ignore_certificate_errors__mutmut_13, 
    'x_set_ignore_certificate_errors__mutmut_14': x_set_ignore_certificate_errors__mutmut_14, 
    'x_set_ignore_certificate_errors__mutmut_15': x_set_ignore_certificate_errors__mutmut_15, 
    'x_set_ignore_certificate_errors__mutmut_16': x_set_ignore_certificate_errors__mutmut_16
}

def set_ignore_certificate_errors(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_ignore_certificate_errors__mutmut_orig, x_set_ignore_certificate_errors__mutmut_mutants, args, kwargs)
    return result 

set_ignore_certificate_errors.__signature__ = _mutmut_signature(x_set_ignore_certificate_errors__mutmut_orig)
x_set_ignore_certificate_errors__mutmut_orig.__name__ = 'x_set_ignore_certificate_errors'


def x_handle_certificate_error__mutmut_orig(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_1(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = None
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_2(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = None
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_3(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["XXeventIdXX"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_4(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventid"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_5(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["EVENTID"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_6(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["Eventid"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_7(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_8(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["XXactionXX"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_9(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["ACTION"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_10(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["Action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_11(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_handle_certificate_error__mutmut_12(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_13(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_14(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "Method": "Security.handleCertificateError",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_15(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "XXSecurity.handleCertificateErrorXX",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_16(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "security.handlecertificateerror",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_17(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "SECURITY.HANDLECERTIFICATEERROR",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_18(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handlecertificateerror",
        "params": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_19(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_20(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "PARAMS": params,
    }
    yield cmd_dict


def x_handle_certificate_error__mutmut_21(
    event_id: int,
    action: CertificateErrorAction,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Handles a certificate error that fired a certificateError event.

    :param event_id: The ID of the event.
    :param action: The action to take on the certificate error.
    """
    params: T_JSON_DICT = {}
    params["eventId"] = event_id
    params["action"] = action.to_json()
    cmd_dict: T_JSON_DICT = {
        "method": "Security.handleCertificateError",
        "Params": params,
    }
    yield cmd_dict

x_handle_certificate_error__mutmut_mutants : ClassVar[MutantDict] = {
'x_handle_certificate_error__mutmut_1': x_handle_certificate_error__mutmut_1, 
    'x_handle_certificate_error__mutmut_2': x_handle_certificate_error__mutmut_2, 
    'x_handle_certificate_error__mutmut_3': x_handle_certificate_error__mutmut_3, 
    'x_handle_certificate_error__mutmut_4': x_handle_certificate_error__mutmut_4, 
    'x_handle_certificate_error__mutmut_5': x_handle_certificate_error__mutmut_5, 
    'x_handle_certificate_error__mutmut_6': x_handle_certificate_error__mutmut_6, 
    'x_handle_certificate_error__mutmut_7': x_handle_certificate_error__mutmut_7, 
    'x_handle_certificate_error__mutmut_8': x_handle_certificate_error__mutmut_8, 
    'x_handle_certificate_error__mutmut_9': x_handle_certificate_error__mutmut_9, 
    'x_handle_certificate_error__mutmut_10': x_handle_certificate_error__mutmut_10, 
    'x_handle_certificate_error__mutmut_11': x_handle_certificate_error__mutmut_11, 
    'x_handle_certificate_error__mutmut_12': x_handle_certificate_error__mutmut_12, 
    'x_handle_certificate_error__mutmut_13': x_handle_certificate_error__mutmut_13, 
    'x_handle_certificate_error__mutmut_14': x_handle_certificate_error__mutmut_14, 
    'x_handle_certificate_error__mutmut_15': x_handle_certificate_error__mutmut_15, 
    'x_handle_certificate_error__mutmut_16': x_handle_certificate_error__mutmut_16, 
    'x_handle_certificate_error__mutmut_17': x_handle_certificate_error__mutmut_17, 
    'x_handle_certificate_error__mutmut_18': x_handle_certificate_error__mutmut_18, 
    'x_handle_certificate_error__mutmut_19': x_handle_certificate_error__mutmut_19, 
    'x_handle_certificate_error__mutmut_20': x_handle_certificate_error__mutmut_20, 
    'x_handle_certificate_error__mutmut_21': x_handle_certificate_error__mutmut_21
}

def handle_certificate_error(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_handle_certificate_error__mutmut_orig, x_handle_certificate_error__mutmut_mutants, args, kwargs)
    return result 

handle_certificate_error.__signature__ = _mutmut_signature(x_handle_certificate_error__mutmut_orig)
x_handle_certificate_error__mutmut_orig.__name__ = 'x_handle_certificate_error'


def x_set_override_certificate_errors__mutmut_orig(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_1(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = None
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_2(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = None
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_3(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["XXoverrideXX"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_4(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["OVERRIDE"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_5(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["Override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_6(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = None
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_7(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "XXmethodXX": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_8(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "METHOD": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_9(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "Method": "Security.setOverrideCertificateErrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_10(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "XXSecurity.setOverrideCertificateErrorsXX",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_11(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "security.setoverridecertificateerrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_12(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "SECURITY.SETOVERRIDECERTIFICATEERRORS",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_13(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setoverridecertificateerrors",
        "params": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_14(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "XXparamsXX": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_15(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "PARAMS": params,
    }
    yield cmd_dict


def x_set_override_certificate_errors__mutmut_16(
    override: bool,
) -> Generator[T_JSON_DICT, T_JSON_DICT, None]:
    """
    Enable/disable overriding certificate errors. If enabled, all certificate error events need to
    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.

    :param override: If true, certificate errors will be overridden.
    """
    params: T_JSON_DICT = {}
    params["override"] = override
    cmd_dict: T_JSON_DICT = {
        "method": "Security.setOverrideCertificateErrors",
        "Params": params,
    }
    yield cmd_dict

x_set_override_certificate_errors__mutmut_mutants : ClassVar[MutantDict] = {
'x_set_override_certificate_errors__mutmut_1': x_set_override_certificate_errors__mutmut_1, 
    'x_set_override_certificate_errors__mutmut_2': x_set_override_certificate_errors__mutmut_2, 
    'x_set_override_certificate_errors__mutmut_3': x_set_override_certificate_errors__mutmut_3, 
    'x_set_override_certificate_errors__mutmut_4': x_set_override_certificate_errors__mutmut_4, 
    'x_set_override_certificate_errors__mutmut_5': x_set_override_certificate_errors__mutmut_5, 
    'x_set_override_certificate_errors__mutmut_6': x_set_override_certificate_errors__mutmut_6, 
    'x_set_override_certificate_errors__mutmut_7': x_set_override_certificate_errors__mutmut_7, 
    'x_set_override_certificate_errors__mutmut_8': x_set_override_certificate_errors__mutmut_8, 
    'x_set_override_certificate_errors__mutmut_9': x_set_override_certificate_errors__mutmut_9, 
    'x_set_override_certificate_errors__mutmut_10': x_set_override_certificate_errors__mutmut_10, 
    'x_set_override_certificate_errors__mutmut_11': x_set_override_certificate_errors__mutmut_11, 
    'x_set_override_certificate_errors__mutmut_12': x_set_override_certificate_errors__mutmut_12, 
    'x_set_override_certificate_errors__mutmut_13': x_set_override_certificate_errors__mutmut_13, 
    'x_set_override_certificate_errors__mutmut_14': x_set_override_certificate_errors__mutmut_14, 
    'x_set_override_certificate_errors__mutmut_15': x_set_override_certificate_errors__mutmut_15, 
    'x_set_override_certificate_errors__mutmut_16': x_set_override_certificate_errors__mutmut_16
}

def set_override_certificate_errors(*args, **kwargs):
    result = yield from _mutmut_yield_from_trampoline(x_set_override_certificate_errors__mutmut_orig, x_set_override_certificate_errors__mutmut_mutants, args, kwargs)
    return result 

set_override_certificate_errors.__signature__ = _mutmut_signature(x_set_override_certificate_errors__mutmut_orig)
x_set_override_certificate_errors__mutmut_orig.__name__ = 'x_set_override_certificate_errors'


@event_class("Security.certificateError")
@dataclass
class CertificateError:
    """
    There is a certificate error. If overriding certificate errors is enabled, then it should be
    handled with the ``handleCertificateError`` command. Note: this event does not fire if the
    certificate error has been allowed internally. Only one client per target should override
    certificate errors at the same time.
    """
    #: The ID of the event.
    event_id: int
    #: The type of the error.
    error_type: str
    #: The url that was requested.
    request_url: str

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> CertificateError:
        return cls(
            event_id=int(json["eventId"]),
            error_type=str(json["errorType"]),
            request_url=str(json["requestURL"]),
        )


@event_class("Security.visibleSecurityStateChanged")
@dataclass
class VisibleSecurityStateChanged:
    """
    **EXPERIMENTAL**

    The security state of the page changed.
    """
    #: Security state information about the page.
    visible_security_state: VisibleSecurityState

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> VisibleSecurityStateChanged:
        return cls(
            visible_security_state=VisibleSecurityState.from_json(json["visibleSecurityState"]),
        )


@event_class("Security.securityStateChanged")
@dataclass
class SecurityStateChanged:
    """
    The security state of the page changed. No longer being sent.
    """
    #: Security state.
    security_state: SecurityState
    #: True if the page was loaded over cryptographic transport such as HTTPS.
    scheme_is_cryptographic: bool
    #: Previously a list of explanations for the security state. Now always
    #: empty.
    explanations: list[SecurityStateExplanation]
    #: Information about insecure content on the page.
    insecure_content_status: InsecureContentStatus
    #: Overrides user-visible description of the state. Always omitted.
    summary: str | None

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> SecurityStateChanged:
        return cls(
            security_state=SecurityState.from_json(json["securityState"]),
            scheme_is_cryptographic=bool(json["schemeIsCryptographic"]),
            explanations=[SecurityStateExplanation.from_json(i) for i in json["explanations"]],
            insecure_content_status=InsecureContentStatus.from_json(json["insecureContentStatus"]),
            summary=str(json["summary"]) if "summary" in json else None,
        )
